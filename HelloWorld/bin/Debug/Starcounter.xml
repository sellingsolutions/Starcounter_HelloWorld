<?xml version="1.0"?>
<doc>
    <assembly>
        <name>Starcounter</name>
    </assembly>
    <members>
        <member name="T:Starcounter.Advanced.DbEnvironment">
            <summary>
            </summary>
        </member>
        <member name="M:Starcounter.Advanced.DbEnvironment.#ctor(System.String,System.Boolean)">
            <summary>
            </summary>
        </member>
        <member name="P:Starcounter.Advanced.DbEnvironment.DatabaseNameLower">
            <summary>
            Name of the database.
            </summary>
        </member>
        <member name="P:Starcounter.Advanced.DbEnvironment.HasDatabase">
            <summary>
            Gets a value indicating whether there is a database attached to the current applet
            </summary>
        </member>
        <member name="M:Starcounter.Advanced.DbEnvironment.cm3_get_cpuc(System.Void*,System.Byte*)">
            <summary>
            Gets the number of schedulers.
            </summary>
        </member>
        <member name="P:Starcounter.Advanced.DbEnvironment.SchedulerCount">
            <summary>
            Gets the number of schedulers.
            </summary>
        </member>
        <member name="F:Starcounter.Advanced.Blender.DefaultToken">
            <summary>
            Empty or non-existing token representation string.
            </summary>
        </member>
        <member name="F:Starcounter.Advanced.Blender.allBlenderRules_">
            <summary>
            Dictionary containing all blender rules.
            </summary>
        </member>
        <member name="F:Starcounter.Advanced.Blender.allBlendingCandidates_">
            <summary>
            Dictionary containing blending candidates per URI.
            </summary>
        </member>
        <member name="M:Starcounter.Advanced.Blender.CreateTokenString(System.Type[])">
            <summary>
            Creates token string from the list of class types.
            </summary>
            <param name="types"></param>
            <returns></returns>
        </member>
        <member name="M:Starcounter.Advanced.Blender.CheckForValidUri(System.String)">
            <summary>
            Checking that given URI is correct.
            </summary>
        </member>
        <member name="M:Starcounter.Advanced.Blender.GetMixedUriFromHandlerAndParameters(System.String,System.String[])">
            <summary>
            Creates a mixed URI for a given handler and parameters.
            </summary>
            <param name="handlerUri">Handler URI.</param>
            <param name="parameters">String parameters</param>
            <returns></returns>
        </member>
        <member name="M:Starcounter.Advanced.Blender.TryGetMixedUriFromSpecific(System.String)">
            <summary>
            Returns a suggested mixed URI (if able to find) for a given specific URI.
            </summary>
            <param name="specificUri">Specific URI (for example, "/people/john/surname/smith" for handler "/people/{?}/surname/{?}").</param>
            <returns>Suggested mixed URI (for example "/people/{john}/surname/{smith}")</returns>
        </member>
        <member name="M:Starcounter.Advanced.Blender.GetHandlerOrSpecificUriFromMixed(System.String)">
            <summary>
            Getting handler or specific URI from mixed URI.
            </summary>
        </member>
        <member name="M:Starcounter.Advanced.Blender.ConvertMixedUriToHandlerAndSpecific(System.String,System.String@,System.String@)">
            <summary>
            Converting specially constructed URI to handler and specific.
            </summary>
        </member>
        <member name="T:Starcounter.Advanced.Blender.TypeOfContextMatching">
            <summary>
            Type of context matching.
            </summary>
        </member>
        <member name="M:Starcounter.Advanced.Blender.MatchContexts(Starcounter.Advanced.BlendingInfo,Starcounter.Advanced.BlendingInfo,Starcounter.Advanced.Blender.TypeOfContextMatching)">
            <summary>
            Matching of contexts.
            </summary>
        </member>
        <member name="M:Starcounter.Advanced.Blender.CreateDictKey(System.String,System.String,System.String[])">
            <summary>
            Dictionary key creation from uri, token and contexts.
            </summary>
        </member>
        <member name="M:Starcounter.Advanced.Blender.GetUriAndTokenFromDictKey(System.String,System.String@,System.String@,System.String[]@)">
            <summary>
            Extracting URI and blending token from dictionary key.
            </summary>
        </member>
        <member name="F:Starcounter.Advanced.Blender.ObsoleteConvertersString">
            <summary>
            Obsoletion string for converters.
            </summary>
        </member>
        <member name="M:Starcounter.Advanced.Blender.MapUri``1(System.String,System.Func{System.String[],System.String[]},System.Func{System.String[],System.String[]},System.String[])">
            <summary>
            Adding URI-handler to blender for a given token, represented by the class in template.
            </summary>
            <typeparam name="T">Class as a blending token.</typeparam>
            <param name="uri">URI handler to blend.</param>
            <param name="fromUriConverter">Converter from URI to token.</param>
            <param name="toUriConverter">Converter from token to URI.</param>
            <param name="contexts">List of contexts for this blending.</param>
        </member>
        <member name="M:Starcounter.Advanced.Blender.MapUri``1(System.String,System.String[],System.Boolean)">
            <summary>
            Adding URI-handler to blender for a given token, represented by the class in template.
            </summary>
            <typeparam name="T">Class as a blending token.</typeparam>
            <param name="uri">URI handler to blend.</param>
            <param name="contexts">List of contexts for this blending.</param>
        </member>
        <member name="M:Starcounter.Advanced.Blender.MapUri``2(System.String,System.Func{System.String[],System.String[]},System.Func{System.String[],System.String[]},System.String[])">
            <summary>
            Adding URI-handler to blender for a given token, represented by a combination of classes in template.
            </summary>
            <typeparam name="T1">Class as a blending token.</typeparam>
            <typeparam name="T2">Another class as a blending token.</typeparam>
            <param name="uri">URI handler to blend.</param>
            <param name="fromUriConverter">Converter from URI to token.</param>
            <param name="toUriConverter">Converter from token to URI.</param>
            <param name="contexts">List of contexts for this blending.</param>
        </member>
        <member name="M:Starcounter.Advanced.Blender.MapUri``2(System.String,System.String[],System.Boolean)">
            <summary>
            Adding URI-handler to blender for a given token, represented by a combination of classes in template.
            </summary>
            <typeparam name="T1">Class as a blending token.</typeparam>
            <typeparam name="T2">Another class as a blending token.</typeparam>
            <param name="uri">URI handler to blend.</param>
            <param name="contexts">List of contexts for this blending.</param>
        </member>
        <member name="M:Starcounter.Advanced.Blender.MapUri``3(System.String,System.Func{System.String[],System.String[]},System.Func{System.String[],System.String[]},System.String[])">
            <summary>
            Adding URI-handler to blender for a given token, represented by a combination of classes in template.
            </summary>
            <typeparam name="T1">Class as a blending token.</typeparam>
            <typeparam name="T2">Another class as a blending token.</typeparam>
            <typeparam name="T3">Another class as a blending token.</typeparam>
            <param name="uri">URI handler to blend.</param>
            <param name="fromUriConverter">Converter from URI to token.</param>
            <param name="toUriConverter">Converter from token to URI.</param>
            <param name="contexts">List of contexts for this blending.</param>
        </member>
        <member name="M:Starcounter.Advanced.Blender.MapUri``3(System.String,System.String[],System.Boolean)">
            <summary>
            Adding URI-handler to blender for a given token, represented by a combination of classes in template.
            </summary>
            <typeparam name="T1">Class as a blending token.</typeparam>
            <typeparam name="T2">Another class as a blending token.</typeparam>
            <typeparam name="T3">Another class as a blending token.</typeparam>
            <param name="uri">URI handler to blend.</param>
            <param name="contexts">List of contexts for this blending.</param>
        </member>
        <member name="M:Starcounter.Advanced.Blender.MapUri(System.String,System.Type[],System.Func{System.String[],System.String[]},System.Func{System.String[],System.String[]},System.String[])">
            <summary>
            Adding URI-handler to blender for a given token, represented by a combination of classes in array.
            </summary>
            <param name="uri">URI handler to blend.</param>
            <param name="types">Combination of classes that are representing a blending token.</param>
            <param name="fromUriConverter">Converter from URI to token.</param>
            <param name="toUriConverter">Converter from token to URI.</param>
            <param name="contexts">List of contexts for this blending.</param>
        </member>
        <member name="M:Starcounter.Advanced.Blender.MapUri(System.String,System.Type[],System.String[],System.Boolean)">
            <summary>
            Adding URI-handler to blender for a given token, represented by a combination of classes in array.
            </summary>
            <param name="uri">URI handler to blend.</param>
            <param name="types">Combination of classes that are representing a blending token.</param>
            <param name="contexts">List of contexts for this blending.</param>
            <param name="isBlendingActive">Default activness of a blender rule.</param>
        </member>
        <member name="M:Starcounter.Advanced.Blender.MapUri(System.String,System.String,System.String[],System.Boolean)">
            <summary>
            Adding URI-handler to blender for a given token, represented by a combination of classes in array.
            </summary>
            <param name="uri">URI handler to blend.</param>
            <param name="blendingToken">Blending token represented as a string.</param>
            <param name="contexts">List of contexts for this blending.</param>
            <param name="isBlendingActive">Default activness of a blender rule.</param>
        </member>
        <member name="M:Starcounter.Advanced.Blender.MapUri(System.String,System.Boolean,System.Boolean,System.String[],System.Boolean)">
            <summary>
            Adding URI-handler to blender for a given token, represented by a combination of classes in array.
            </summary>
            <param name="uri">URI handler to blend.</param>
            <param name="allowBlendingFromUri">Allow blending direction from URI.</param>
            <param name="allowBlendingToUri">Allow blending direction to URI.</param>
            <param name="contexts">List of contexts for this blending.</param>
            <param name="isBlendingActive">Default activness of a blender rule.</param>
        </member>
        <member name="M:Starcounter.Advanced.Blender.MapUri(System.String,System.String,System.Boolean,System.Boolean,System.String[],System.Boolean)">
            <summary>
            Adding URI-handler to blender for a given token, represented by a combination of classes in array.
            </summary>
            <param name="uri">URI handler to blend.</param>
            <param name="blendingToken">Blending token represented as a string.</param>
            <param name="allowBlendingFromUri">Allow blending direction from URI.</param>
            <param name="allowBlendingToUri">Allow blending direction to URI.</param>
            <param name="contexts">List of contexts for this blending.</param>
            <param name="isBlendingActive">Default activness of a blender rule.</param>
        </member>
        <member name="M:Starcounter.Advanced.Blender.MapUri(System.String,System.String,System.Func{System.String[],System.String[]},System.Func{System.String[],System.String[]},System.String[])">
            <summary>
            Adding URI-handler to blender for a given token, represented by a combination of classes in array.
            </summary>
            <param name="uri">Handler or specific URI to blend.</param>
            <param name="blendingToken">Blending token represented as a string.</param>
            <param name="fromUriConverter">Converter from URI to token.</param>
            <param name="toUriConverter">Converter from token to URI.</param>
            <param name="contexts">List of contexts for this blending.</param>
        </member>
        <member name="M:Starcounter.Advanced.Blender.MapUriInternal(System.String,System.String,System.Func{System.String[],System.String[]},System.Func{System.String[],System.String[]},System.String[],System.Boolean,System.Boolean)">
            <summary>
            Adding URI-handler to blender for a given token, represented by a combination of classes in array.
            </summary>
        </member>
        <member name="T:Starcounter.Advanced.Blender.NewBlendingEventHandler">
            <summary>
            New blending rule delegate.
            </summary>
            <param name="bi">New added blending info.</param>
        </member>
        <member name="E:Starcounter.Advanced.Blender.BlendingRuleAdded">
            <summary>
            Event in case if a new blending rule is added.
            </summary>
        </member>
        <member name="M:Starcounter.Advanced.Blender.OnBlendingRuleAdded(Starcounter.Advanced.BlendingInfo)">
            <summary>
            Called when a new blending rule is added.
            </summary>
        </member>
        <member name="M:Starcounter.Advanced.Blender.PopulateBlendings(System.Collections.Generic.IEnumerable{Starcounter.Advanced.BlendingInfoOnStartup})">
            <summary>
            Calls MapUri for all entries in the blendings list.
            </summary>
            <param name="blendings">List of blendings.</param>
        </member>
        <member name="M:Starcounter.Advanced.Blender.PopulateFromJsonFile(System.String)">
            <summary>
            Loads and populates blendings from given Json file.
            </summary>
            <param name="pathToJsonFile">Path to JSON file with blendings.</param>
            <returns></returns>
        </member>
        <member name="M:Starcounter.Advanced.Blender.UnmapUri``1(System.String,System.String[])">
            <summary>
            Unmaps given URI and blending token (represented by class types) from Blender.
            </summary>
            <typeparam name="T">Class as a blending token.</typeparam>
            <param name="uri">URI that was used in MapUri call.</param>
            <param name="contexts">List of contexts for this blending.</param>
            <returns>True if successfully unmapped.</returns>
        </member>
        <member name="M:Starcounter.Advanced.Blender.UnmapUri``2(System.String,System.String[])">
            <summary>
            Unmaps given URI and blending token (represented by class types) from Blender.
            </summary>
            <typeparam name="T1">Class as a blending token.</typeparam>
            <typeparam name="T2">Another class as a blending token.</typeparam>
            <param name="uri">URI that was used in MapUri call.</param>
            <param name="contexts">List of contexts for this blending.</param>
            <returns>True if successfully unmapped.</returns>
        </member>
        <member name="M:Starcounter.Advanced.Blender.UnmapUri``3(System.String,System.String[])">
            <summary>
            Unmaps given URI and blending token (represented by class types) from Blender.
            </summary>
            <typeparam name="T1">Class as a blending token.</typeparam>
            <typeparam name="T2">Another class as a blending token.</typeparam>
            <typeparam name="T3">Another class as a blending token.</typeparam>
            <param name="uri">URI that was used in MapUri call.</param>
            <param name="contexts">List of contexts for this blending.</param>
            <returns>True if successfully unmapped.</returns>
        </member>
        <member name="M:Starcounter.Advanced.Blender.UnmapUri(System.String,System.Type[],System.String[])">
            <summary>
            Unmaps given URI and blending token (represented by class types) from Blender.
            </summary>
            <param name="uri">URI that was used in MapUri call.</param>
            <param name="types">Combination of classes that are representing a blending token.</param>
            <param name="contexts">List of contexts for this blending.</param>
            <returns>True if successfully unmapped.</returns>
        </member>
        <member name="M:Starcounter.Advanced.Blender.UnmapUri(System.String,System.String,System.String[])">
            <summary>
            Unmapping handler URI and blending token from Blender.
            </summary>
            <param name="uri">URI that was used in MapUri call.</param>
            <param name="blendingToken">Blending token represented as a string.</param>
            <param name="contexts">List of contexts for this blending.</param>
            <returns>True if successfully unmapped.</returns>
        </member>
        <member name="M:Starcounter.Advanced.Blender.IsMapped``1(System.String,System.String[])">
            <summary>
            Checks if given handler URI and blending token (represented by class in template) are mapped in Blender.
            </summary>
            <typeparam name="T">Class as a blending token.</typeparam>
            <param name="uri">URI handler to blend.</param>
            <param name="contexts">List of contexts for this blending.</param>
            <returns>True if mapped in Blender.</returns>
        </member>
        <member name="M:Starcounter.Advanced.Blender.IsMapped``2(System.String,System.String[])">
            <summary>
            Checks if given handler URI and blending token (represented by classes in template) are mapped in Blender.
            </summary>
            <typeparam name="T1">Class as a blending token.</typeparam>
            <typeparam name="T2">Another class as a blending token.</typeparam>
            <param name="uri">URI handler to blend.</param>
            <param name="contexts">List of contexts for this blending.</param>
            <returns>True if mapped in Blender.</returns>
        </member>
        <member name="M:Starcounter.Advanced.Blender.IsMapped``3(System.String,System.String[])">
            <summary>
            Checks if given handler URI and blending token (represented by classes in template) are mapped in Blender.
            </summary>
            <typeparam name="T1">Class as a blending token.</typeparam>
            <typeparam name="T2">Another class as a blending token.</typeparam>
            <typeparam name="T3">Another class as a blending token.</typeparam>
            <param name="uri">URI handler to blend.</param>
            <param name="contexts">List of contexts for this blending.</param>
            <returns>True if mapped in Blender.</returns>
        </member>
        <member name="M:Starcounter.Advanced.Blender.IsMapped(System.String,System.Type[],System.String[])">
            <summary>
            Checks if given handler URI and blending token (represented by class types) are mapped in Blender.
            </summary>
            <param name="uri">URI handler to blend.</param>
            <param name="types">Combination of classes that are representing a blending token.</param>
            <param name="contexts">List of contexts for this blending.</param>
            <returns>True if mapped in Blender.</returns>
        </member>
        <member name="M:Starcounter.Advanced.Blender.IsMapped(System.String,System.String,System.String[])">
            <summary>
            Checks if given handler URI and blending token are mapped in Blender.
            </summary>
            <param name="uri">URI handler to blend.</param>
            <param name="blendingToken">Blending token represented as a string.</param>
            <param name="contexts">List of contexts for this blending.</param>
            <returns>True if mapped in Blender.</returns>
        </member>
        <member name="M:Starcounter.Advanced.Blender.IsActive(System.String,System.Type[],System.String[])">
            <summary>
            Checks if given handler URI and blending token combination is active.
            </summary>
            <param name="uri">URI handler to blend.</param>
            <param name="types">Blending token represented as a types.</param>
            <param name="contexts">List of contexts for this blending.</param>
            <returns>True if active.</returns>
        </member>
        <member name="M:Starcounter.Advanced.Blender.IsActive(System.String,System.String,System.String[])">
            <summary>
            Checks if given handler URI and blending token combination is active.
            </summary>
            <param name="uri">URI handler to blend.</param>
            <param name="blendingToken">Blending token represented as a string.</param>
            <param name="contexts">List of contexts for this blending.</param>
            <returns>True if active.</returns>
        </member>
        <member name="M:Starcounter.Advanced.Blender.Activate(System.String,System.Type[],System.String[])">
            <summary>
            Activates given handler URI and blending token combination.
            </summary>
            <param name="uri">URI handler to blend.</param>
            <param name="types">Blending token represented as an array of types.</param>
            <param name="contexts">List of contexts for this blending.</param>
            <returns>True if successfully activated.</returns>
        </member>
        <member name="M:Starcounter.Advanced.Blender.Activate(System.String,System.String,System.String[])">
            <summary>
            Activates given handler URI and blending token combination.
            </summary>
            <param name="uri">URI handler to blend.</param>
            <param name="blendingToken">Blending token represented as a string.</param>
            <param name="contexts">List of contexts for this blending.</param>
            <returns>True if successfully activated.</returns>
        </member>
        <member name="M:Starcounter.Advanced.Blender.Deactivate(System.String,System.Type[],System.String[])">
            <summary>
            Deactivates given handler URI and blending token combination.
            </summary>
            <param name="uri">URI handler to blend.</param>
            <param name="types">Blending token represented as an array of types.</param>
            <param name="contexts">List of contexts for this blending.</param>
            <returns>True if successfully deactivated.</returns>
        </member>
        <member name="M:Starcounter.Advanced.Blender.Deactivate(System.String,System.String,System.String[])">
            <summary>
            Deactivates given handler URI and blending token combination.
            </summary>
            <param name="uri">URI handler to blend.</param>
            <param name="blendingToken">Blending token represented as a string.</param>
            <param name="contexts">List of contexts for this blending.</param>
            <returns>True if successfully deactivated.</returns>
        </member>
        <member name="M:Starcounter.Advanced.Blender.CalculateHandlerBlendings(Starcounter.Advanced.BlendingInfo[],Starcounter.Advanced.BlendingInfo[])">
            <summary>
            Gets a list of blendings for given handler.
            </summary>
        </member>
        <member name="M:Starcounter.Advanced.Blender.GetBlendingsForHandlerFiltered(System.String)">
            <summary>
            Gets a list of blendings for a given handler.
            </summary>
        </member>
        <member name="M:Starcounter.Advanced.Blender.GetBlendingsForTokens(Starcounter.Advanced.BlendingInfo[])">
            <summary>
            Gets a list of blendings for given tokens.
            </summary>
        </member>
        <member name="M:Starcounter.Advanced.Blender.DeactivateBlendingsForHandler(System.String)">
            <summary>
            Deactivating blendings for a given URI handler.
            </summary>
            <param name="handlerUri"></param>
        </member>
        <member name="M:Starcounter.Advanced.Blender.SetBlendingForActivatedHandler(Starcounter.Rest.UserHandlerInfo)">
            <summary>
            URI handler activated. Updating handlers.
            </summary>
            <param name="handlerInfo">Handler information.</param>
        </member>
        <member name="M:Starcounter.Advanced.Blender.UpdateHandlerInfoInAllHandlers">
            <summary>
            Updating blending info in all handlers.
            </summary>
        </member>
        <member name="M:Starcounter.Advanced.Blender.ListAll">
            <summary>
            List all blending rules in Blender.
            </summary>
            <returns>All registered blending rules.</returns>
        </member>
        <member name="M:Starcounter.Advanced.Blender.ListAllByTokens">
            <summary>
            List all blending tokens and URI handlers registered in Blender.
            </summary>
            <returns>Dictionary containing blending tokens and blending infos.</returns>
        </member>
        <member name="M:Starcounter.Advanced.Blender.ListAllByUris">
            <summary>
            List all blending tokens and URI handlers registered in Blender.
            </summary>
            <returns>Dictionary containing URIs and blending infos.</returns>
        </member>
        <member name="M:Starcounter.Advanced.Blender.ListByToken(System.String)">
            <summary>
            List all blending rules for a given token.
            </summary>
            <returns>List containing blending infos.</returns>
        </member>
        <member name="M:Starcounter.Advanced.Blender.ListByUri(System.String)">
            <summary>
            List registered blending rules for a given URI.
            </summary>
            <returns>List containing blending infos.</returns>
        </member>
        <member name="M:Starcounter.Advanced.Blender.GetRunCandidatesForUri(System.String)">
            <summary>
            List all blending candidates for a given URI.
            Blending info for this URI is not included.
            </summary>
            <returns>List containing blending infos.</returns>
        </member>
        <member name="T:Starcounter.Advanced.DatabaseObjectRetriever">
            <summary>
            Used by the data binding implementation (IBindable) to find a database object using its object number.
            </summary>
        </member>
        <member name="F:Starcounter.Advanced.DatabaseObjectRetriever.Instance">
            <summary>
            The single instance of this object look class
            </summary>
        </member>
        <member name="M:Starcounter.Advanced.DatabaseObjectRetriever.Retrieve(System.UInt64)">
            <summary>
            Returns the database object with the supplied object number
            </summary>
            <param name="id">The ObjectNo of the database object</param>
            <returns>The database objects</returns>
        </member>
        <member name="M:Starcounter.Advanced.DatabaseObjectRetriever.Equals(System.Object)">
            <summary>
            Gets a value that indicates if <paramref name="obj"/> is
            considered equal to the current instance.
            </summary>
            <param name="obj">The object to compare.</param>
            <returns>True if equal; false otherwise.</returns>
        </member>
        <member name="M:Starcounter.Advanced.DatabaseObjectRetriever.GetHashCode">
            <summary>
            Computes the hash code of the current instance.
            </summary>
            <returns>A hashcode representing the current instance.</returns>
        </member>
        <member name="T:Starcounter.Application">
            <summary>
            Represents a Starcounter application, executing in or configured
            to run in, a Starcounter code host.
            </summary>
        </member>
        <member name="P:Starcounter.Application.Host">
            <summary>
            Gets the <see cref="T:Starcounter.ICodeHost"/> the current application
            execute within.
            </summary>
        </member>
        <member name="P:Starcounter.Application.TransactEntrypoint">
            <summary>
            Gets indicator if the host should wrap the entrypoint call in a
            write transaction.
            </summary>
        </member>
        <member name="P:Starcounter.Application.Name">
            <summary>
            Gets the name of the application.
            </summary>
        </member>
        <member name="P:Starcounter.Application.DisplayName">
            <summary>
            Gets the display name of the current application.
            </summary>
        </member>
        <member name="P:Starcounter.Application.FullName">
            <summary>
            Gets the full name of the current application.
            </summary>
        </member>
        <member name="P:Starcounter.Application.FilePath">
            <summary>
            Gets the file that was used to launch the current
            application.
            </summary>
        </member>
        <member name="P:Starcounter.Application.WorkingDirectory">
            <summary>
            Gets the working directory of the application.
            </summary>
        </member>
        <member name="P:Starcounter.Application.ResourceDirectories">
            <summary>
            Gets the set of resource directories for the current application.
            </summary>
            <remarks>
            This set contains resource directories specified when the application
            started, and are all resolved to their fully qualified paths by our
            standard algorithm to do so. This list does not contain all resource
            directories; its is possible Starcounter add convention-based directories
            to the full set, and these are not part of this list.
            </remarks>
        </member>
        <member name="P:Starcounter.Application.Arguments">
            <summary>
            Gets the arguments that was used to start the
            current application.
            </summary>
        </member>
        <member name="P:Starcounter.Application.HostedFilePath">
            <summary>
            Gets the full path to the binary file that is actually hosted, i.e.
            the weaved executable.
            </summary>
        </member>
        <member name="P:Starcounter.Application.Current">
            <summary>
            Gets the currently hosted application.
            </summary>
            <remarks>
            <para>
            In the shared code host, the current application is determined by
            context where this property is read. The code host has several ways
            to figure out the which is the current application, based on the
            calling code.
            </para>
            <para>
            In independent hosts, this property return null if the current
            application is not yet hosted.
            </para>
            </remarks>
            <exception cref="T:System.ArgumentException">Thrown in the shared code host
            when the application can't be resolved based on the given context.
            </exception>
        </member>
        <member name="M:Starcounter.Application.Use(System.Func{Starcounter.Request,Starcounter.Response})">
            <summary>
            Register a request filter middleware, affecting the request
            pipeline, possibly filtering requests as they arrive.
            </summary>
            <param name="requestFilter">The request filter middleware the
            current application want to enable.</param>
        </member>
        <member name="M:Starcounter.Application.Use(System.Func{Starcounter.Request,Starcounter.Response,Starcounter.Response})">
            <summary>
            Register a response filter middleware, affecting the request
            pipeline, possibly customizing responses before they are sent
            back to the client.
            </summary>
            <param name="responseFilter">The response filter middleware the
            current application want to enable.</param>
        </member>
        <member name="M:Starcounter.Application.Use(Starcounter.IMiddleware)">
            <summary>
            Register a custom middleware exposed via <see cref="T:Starcounter.IMiddleware"/>.
            </summary>
            <param name="middleware">The middleware component the current
            application want to enable.
            </param>
        </member>
        <member name="M:Starcounter.Application.GetApplication(System.Reflection.Assembly)">
            <summary>
            Gets the <see cref="T:Starcounter.Application"/> the given <paramref name="assembly"/>
            represent or is part of.
            </summary>
            <param name="assembly">The assembly whose <see cref="T:Starcounter.Application"/> are
            being requested.</param>
            <returns>The application <paramref name="assembly"/> represent or runs
            as a part of.</returns>
            <exception cref="!:AgrumentNullException">Thrown when <paramref name="assembly"/>
            is null.</exception>
            <exception cref="T:System.ArgumentException">Thrown when the application can't
            be resolved based on the given assembly.</exception>
        </member>
        <!-- Badly formed XML comment ignored for member "M:Starcounter.Application.GetApplication(System.String)" -->
        <member name="M:Starcounter.Application.GetFastNamedApplication(System.String)">
            <summary>
            Gets an application only by consulting its name. Internal version, not
            checking the name for null, and assuming the application is indexed.
            </summary>
            <param name="name">The name of the application</param>
            <returns>The application.</returns>
        </member>
        <member name="M:Starcounter.Application.ToString">
            <inheritdoc />
        </member>
        <member name="M:Starcounter.Application.GetAllApplications">
            <summary>
            Returns a copy of all applications currently indexed.
            </summary>
            <returns>An array of all running, indexed applications.</returns>
        </member>
        <member name="M:Starcounter.Application.Index(Starcounter.Application)">
            <summary>
            Assures the given <see cref="T:Starcounter.Application"/> is properly indexed,
            allowing it to be later retrived from any of the supported lookup
            methods.
            </summary>
            <param name="application">The application to index.</param>
        </member>
        <member name="M:Starcounter.Application.#ctor(Starcounter.Hosting.ApplicationBase,Starcounter.ICodeHost)">
            <summary>
            Initialize an <see cref="T:Starcounter.Application"/>.
            </summary>
            <param name="appBase">The underlying state.</param>
            <param name="host">The code host the application runs
            within.</param>
        </member>
        <member name="M:Starcounter.Application.CreateArgumentExceptionWithCode(System.String,System.Exception)">
            <summary>
            
            </summary>
        </member>
        <member name="T:Starcounter.AppNew">
            <summary>
            The base Apps class representing a logical App.
            </summary>
        </member>
        <member name="M:Starcounter.AppNew.#cctor">
            <summary>
            Initializes static members of the <see cref="T:Starcounter.AppNew" /> class.
            </summary>
        </member>
        <member name="T:Starcounter.GatewayHandlers">
            <summary>
            Class GatewayHandlers
            </summary>
        </member>
        <member name="F:Starcounter.GatewayHandlers.allHandlers_">
            <summary>
            All handler types.
            </summary>
        </member>
        <member name="F:Starcounter.GatewayHandlers.uniqueHandlersId_">
            <summary>
            Global unique handlers id.
            </summary>
        </member>
        <member name="M:Starcounter.GatewayHandlers.HandleManaged(System.UInt64,System.Byte*,Starcounter.Internal.bmx.BMX_TASK_INFO*,System.Boolean*)">
            <summary>
            Handles generic managed handler.
            </summary>
        </member>
        <member name="M:Starcounter.GatewayHandlers.RegisterManagedHandler(Starcounter.HandlerTypes,System.UInt16,System.UInt64@)">
            <summary>
            Registers generic managed handler.
            </summary>
        </member>
        <member name="M:Starcounter.GatewayHandlers.UnregisterManagedHandler(System.UInt16)">
            <summary>
            Unregisters managed handler.
            </summary>
        </member>
        <member name="F:Starcounter.GatewayHandlers.MAX_HANDLERS">
            <summary>
            Maximum number of user handlers to register.
            </summary>
        </member>
        <member name="F:Starcounter.GatewayHandlers.tcpSocketHandlers_">
            <summary>
            TCP socket handlers.
            </summary>
        </member>
        <member name="F:Starcounter.GatewayHandlers.numTcpPortHandlers_">
            <summary>
            Number of registered TCP port handlers.
            </summary>
        </member>
        <member name="F:Starcounter.GatewayHandlers.udpSocketHandlers_">
            <summary>
            UDP socket handlers.
            </summary>
        </member>
        <member name="F:Starcounter.GatewayHandlers.numUdpPortHandlers_">
            <summary>
            Number of registered UDP port handlers.
            </summary>
        </member>
        <member name="M:Starcounter.GatewayHandlers.#cctor">
            <summary>
            Initializes static members of the <see cref="T:Starcounter.GatewayHandlers" /> class.
            </summary>
        </member>
        <member name="F:Starcounter.GatewayHandlers.SchedulerNumRequests">
            <summary>
            Contains number of requests for each scheduler.
            </summary>
        </member>
        <member name="M:Starcounter.GatewayHandlers.HandleUdpSocket(System.UInt16,System.Byte*,Starcounter.Internal.bmx.BMX_TASK_INFO*,System.Boolean*)">
            <summary>
            UDP outer handler.
            </summary>
        </member>
        <member name="M:Starcounter.GatewayHandlers.HandleTcpSocket(System.UInt16,System.Byte*,Starcounter.Internal.bmx.BMX_TASK_INFO*,System.Boolean*)">
            <summary>
            Handles TCP socket data.
            </summary>
        </member>
        <member name="M:Starcounter.GatewayHandlers.GetSessionThatCameWithRequest(Starcounter.Request)">
            <summary>
            Start the session that came with request.
            </summary>
        </member>
        <member name="M:Starcounter.GatewayHandlers.HandleHttpRequest(System.UInt16,System.Byte*,Starcounter.Internal.bmx.BMX_TASK_INFO*,System.Boolean*)">
            <summary>
            This is the main entry point of incoming HTTP requests.
            It is called from the Gateway via the shared memory IPC (interprocess communication).
            </summary>
        </member>
        <member name="M:Starcounter.GatewayHandlers.RegisterHttpHandlerInGateway(System.UInt16,System.String,System.String,System.Byte[],System.UInt16,System.UInt64@)">
            <summary>
            Registers handler with gateway.
            </summary>
        </member>
        <member name="M:Starcounter.GatewayHandlers.UnregisterHttpHandlerInGateway(System.UInt16,System.String)">
            <summary>
            Unregister existing URI handler.
            </summary>
        </member>
        <member name="M:Starcounter.GatewayHandlers.HandleWebSocket(System.UInt16,System.Byte*,Starcounter.Internal.bmx.BMX_TASK_INFO*,System.Boolean*)">
            <summary>
            This is the main entry point of incoming WebSocket requests.
            It is called from the Gateway via the shared memory IPC (interprocess communication).
            </summary>
        </member>
        <member name="M:Starcounter.GatewayHandlers.RegisterWsChannelHandlerInGateway(System.UInt16,System.String,System.String,System.UInt32,System.UInt16,System.UInt64@)">
            <summary>
            Registers the WebSocket handler.
            </summary>
        </member>
        <member name="M:Starcounter.GatewayHandlers.RegisterUdpSocketHandlerInGateway(System.UInt16,System.String,System.Action{System.Net.IPAddress,System.UInt16,System.Byte[]},System.UInt64@)">
            <summary>
            Registers UDP port handler.
            </summary>
        </member>
        <member name="M:Starcounter.GatewayHandlers.RegisterTcpSocketHandlerInGateway(System.UInt16,System.String,System.Action{Starcounter.TcpSocket,System.Byte[]},System.UInt64@)">
            <summary>
            Registers TCP port handler.
            </summary>
        </member>
        <member name="M:Starcounter.GatewayHandlers.RegisterPortHandler(System.UInt16,System.String,System.Action{Starcounter.TcpSocket,System.Byte[]},System.Action{System.Net.IPAddress,System.UInt16,System.Byte[]},System.UInt64@)">
            <summary>
            Registering port handler.
            </summary>
        </member>
        <member name="M:Starcounter.GatewayHandlers.UnregisterPort(System.UInt16,System.UInt64)">
            <summary>
            Unregister port handler.
            </summary>
        </member>
        <member name="T:Starcounter.Internal.JsonResponseMerger.JsonMergeCallback">
            <summary>
            Private class that holds information about which app that registered 
            the callback and the callback itself.
            </summary>
        </member>
        <member name="F:Starcounter.Internal.JsonResponseMerger.afterMergeCallbacks_">
            <summary>
            List of registered hooks that should be called after a merge of jsons.
            </summary>
        </member>
        <member name="M:Starcounter.Internal.JsonResponseMerger.RegisterMergeCallback(System.Func{Starcounter.Request,System.String,System.Collections.Generic.IEnumerable{Starcounter.Json},Starcounter.Json})">
            <summary>
            Registers a callback that is triggered when one or more responses containing json are merged.
            </summary>
            <param name="callback"></param>
        </member>
        <member name="M:Starcounter.Internal.JsonResponseMerger.DefaultMerger(Starcounter.Request,Starcounter.Response,System.Collections.Generic.List{Starcounter.Response})">
            <summary>
            Default JSON merger function.
            </summary>
        </member>
        <member name="M:Starcounter.Internal.JsonResponseMerger.DoMerge(Starcounter.Request,Starcounter.Response,System.Collections.Generic.List{Starcounter.Response})">
            <summary>
            Default JSON merger function.
            </summary>
        </member>
        <member name="P:Starcounter.Internal.XSONSessionDependencies.SessionFactory">
            <summary>
            
            </summary>
        </member>
        <member name="M:Starcounter.Internal.XSONSessionDependencies.Push(Starcounter.Session,System.String)">
            <summary>
            
            </summary>
            <param name="session"></param>
            <param name="patch"></param>
        </member>
        <member name="M:Starcounter.Internal.XSONSessionDependencies.ForAll(Starcounter.Session.SessionTask,System.Boolean)">
            <summary>
            Running given task on each active session on each owning scheduler.
            </summary>
            <param name="task">Task to run on session. Second string parameter is the session ASCII representation.</param>
            <param name="waitForCompletion">Should we wait for the task to be completed.</param>
        </member>
        <member name="M:Starcounter.Internal.XSONSessionDependencies.RunTask(System.Collections.Generic.IEnumerable{System.String},Starcounter.Session.SessionTask)">
            <summary>
            Schedule a task on given sessions.
            </summary>
            <param name="sessionId">String representing the session (string is obtained from Session.SessionId).</param>
            <param name="task">Task to run on session. Note that Session value can still be null (if session was destroyed in the meantime).
            Second string parameter is the session ASCII representation (useful in case if Session value is null).</param>
            <returns>An array of tasks representing job run on each session.</returns>
        </member>
        <member name="M:Starcounter.Internal.XSONSessionDependencies.RunTask(System.String,Starcounter.Session.SessionTask)">
            <summary>
            Schedule a task on specific session.
            </summary>
            <param name="sessionId">String representing the session (string is obtained from Session.SessionId).</param>
            <param name="task">Task to run on session. Note that Session value can still be null (if session was destroyed in the meantime).
            Second string parameter is the session ASCII representation (useful in case if Session value is null).</param>
            <returns>A task representing job run on the given session.</returns>
        </member>
        <member name="M:Starcounter.Internal.XSONSessionDependencies.RunTaskForAll(Starcounter.Session.SessionTask)">
            <summary>
            Running given task on each active session on each owning scheduler.
            </summary>
            <param name="task">Task to run on session. Second string parameter is the session ASCII representation.</param>
            <returns>An array of tasks representing a task on each scheduler.</returns>
        </member>
        <member name="M:Starcounter.Internal.XSONSessionDependencies.ScheduleTask(System.String,Starcounter.Session.SessionTask,System.Boolean)">
            <summary>
            Schedule a task on specific session.
            </summary>
            <param name="sessionId">String representing the session (string is obtained from Session.SessionId).</param>
            <param name="task">Task to run on session. Note that Session value can still be null (if session was destroyed in the meantime).
            Second string parameter is the session ASCII representation (useful in case if Session value is null).</param>
            <param name="waitForCompletion">Should we wait for the task to be completed.</param>
        </member>
        <member name="M:Starcounter.Internal.XSONSessionDependencies.RunForSessionsOnCurrentScheduler(Starcounter.Session.SessionTask)">
            <summary>
            Runs a given session for each task on current scheduler.
            </summary>
        </member>
        <member name="M:Starcounter.Internal.XSONSessionDependencies.UseAndDestroyOnException(Starcounter.Session,Starcounter.Session.SessionTask)">
            <summary>
            Uses the session and destroys it if exception occurs.
            </summary>
            <param name="s">Session on which to run.</param>
            <param name="task">Task to be run.</param>
        </member>
        <member name="T:Starcounter.Internal.MapConfig">
            <summary>
            Temporary class providing global on/off for mapping.
            </summary>
        </member>
        <member name="F:Starcounter.Internal.MapConfig.IsGlobalMappingEnabled">
            <summary>
            Global mapping flag.
            </summary>
        </member>
        <member name="F:Starcounter.Internal.MapConfig.isMappingEnabled_">
            <summary>
            Variable that stores decision if database mapping is enabled.
            </summary>
        </member>
        <member name="P:Starcounter.Internal.MapConfig.Enabled">
            <summary>
            Indicates if mapping of applications should be enabled
            or not. Configuration will probably be on another level (app
            level?) in the final solution.
            </summary>
        </member>
        <member name="F:Starcounter.Internal.MapConfig.ModificationTriggerToken">
            <summary>
            Token name for the trigger that is involved in modification.
            </summary>
        </member>
        <member name="F:Starcounter.Internal.MapConfig.DeletionTriggerToken">
            <summary>
            Token name for the trigger that is involved in deletion.
            </summary>
        </member>
        <member name="F:Starcounter.Internal.MapConfig.CreationTriggerToken">
            <summary>
            Token name for the trigger that is involved in creation.
            </summary>
        </member>
        <member name="F:Starcounter.Internal.MapConfig.ModificationUriTemplate">
            <summary>
            Token name for the trigger that is involved in modification.
            </summary>
        </member>
        <member name="F:Starcounter.Internal.MapConfig.CreationUriTemplate">
            <summary>
            Token name for the trigger that is involved in creation.
            </summary>
        </member>
        <member name="F:Starcounter.Internal.MapConfig.DeletionUriTemplate">
            <summary>
            Token name for the trigger that is involved in deletion.
            </summary>
        </member>
        <member name="M:Starcounter.Internal.MapConfig.InitTriggers">
            <summary>
            Enabling the modification trigger callback.
            </summary>
        </member>
        <member name="T:Starcounter.Internal.MapInvoke">
            <summary>
            Implement an intermediate call level layer, in between
            the weaver/host and the actual mapper logic. Will be replaced
            in the final, optimized solution.
            </summary>
        </member>
        <member name="T:Starcounter.Internal.SystemEntity">
            <summary>
            Serves as a base class for Starcounter-provided entities,
            such as system tables.
            </summary>
            <remarks>
            Eventually, we'll rename this class to Entity, once we have
            removed all references to the obsolete class with the same
            name. Also, we might consider adapting this class so it can
            be used by end-user developers too.
            </remarks>
        </member>
        <member name="M:Starcounter.Internal.SystemEntity.#ctor(Starcounter.Internal.Uninitialized)">
            <summary>
            Initializes a new instance of the <see cref="T:Starcounter.Internal.SystemEntity" /> class.
            </summary>
            <param name="u">An instance of <see cref="T:Starcounter.Internal.Uninitialized"/>,
            serving the purpose to assure we have a unique signature for
            this constructor.</param>
        </member>
        <member name="M:Starcounter.Internal.SystemEntity.Equals(System.Object)">
            <inheritdoc />
        </member>
        <member name="M:Starcounter.Internal.SystemEntity.GetHashCode">
            <inheritdoc />
        </member>
        <member name="P:Starcounter.Internal.SystemEntity.Starcounter#Binding#IObjectProxyInternal#ThisHandle">
            <inheritdoc />
        </member>
        <member name="M:Starcounter.Internal.SystemEntity.Starcounter#Binding#IObjectProxyInternal#Bind(System.UInt64,System.UInt64,Starcounter.Binding.TypeBinding)">
            <inheritdoc />
        </member>
        <member name="P:Starcounter.Internal.SystemEntity.Starcounter#IObjectViewInternal#TypeBinding">
            <inheritdoc />
        </member>
        <member name="M:Starcounter.Internal.SystemEntity.Starcounter#IObjectViewInternal#EqualsOrIsDerivedFrom(Starcounter.IObjectViewInternal)">
            <inheritdoc />
        </member>
        <member name="M:Starcounter.Internal.SystemEntity.Starcounter#IObjectViewInternal#GetBinary(System.Int32)">
            <inheritdoc />
        </member>
        <member name="M:Starcounter.Internal.SystemEntity.Starcounter#IObjectViewInternal#GetBoolean(System.Int32)">
            <inheritdoc />
        </member>
        <member name="M:Starcounter.Internal.SystemEntity.Starcounter#IObjectViewInternal#GetByte(System.Int32)">
            <inheritdoc />
        </member>
        <member name="M:Starcounter.Internal.SystemEntity.Starcounter#IObjectViewInternal#GetDateTime(System.Int32)">
            <inheritdoc />
        </member>
        <member name="M:Starcounter.Internal.SystemEntity.Starcounter#IObjectViewInternal#GetDecimal(System.Int32)">
            <inheritdoc />
        </member>
        <member name="M:Starcounter.Internal.SystemEntity.Starcounter#IObjectViewInternal#GetDouble(System.Int32)">
            <inheritdoc />
        </member>
        <member name="M:Starcounter.Internal.SystemEntity.Starcounter#IObjectViewInternal#GetInt16(System.Int32)">
            <inheritdoc />
        </member>
        <member name="M:Starcounter.Internal.SystemEntity.Starcounter#IObjectViewInternal#GetInt32(System.Int32)">
            <inheritdoc />
        </member>
        <member name="M:Starcounter.Internal.SystemEntity.Starcounter#IObjectViewInternal#GetInt64(System.Int32)">
            <inheritdoc />
        </member>
        <member name="M:Starcounter.Internal.SystemEntity.Starcounter#IObjectViewInternal#GetObject(System.Int32)">
            <inheritdoc />
        </member>
        <member name="M:Starcounter.Internal.SystemEntity.Starcounter#IObjectViewInternal#GetSByte(System.Int32)">
            <inheritdoc />
        </member>
        <member name="M:Starcounter.Internal.SystemEntity.Starcounter#IObjectViewInternal#GetSingle(System.Int32)">
            <inheritdoc />
        </member>
        <member name="M:Starcounter.Internal.SystemEntity.Starcounter#IObjectViewInternal#GetString(System.Int32)">
            <inheritdoc />
        </member>
        <member name="M:Starcounter.Internal.SystemEntity.Starcounter#IObjectViewInternal#GetUInt16(System.Int32)">
            <inheritdoc />
        </member>
        <member name="M:Starcounter.Internal.SystemEntity.Starcounter#IObjectViewInternal#GetUInt32(System.Int32)">
            <inheritdoc />
        </member>
        <member name="M:Starcounter.Internal.SystemEntity.Starcounter#IObjectViewInternal#GetUInt64(System.Int32)">
            <inheritdoc />
        </member>
        <member name="P:Starcounter.Internal.SystemEntity.Starcounter#Advanced#IBindableInternal#Identity">
            <inheritdoc />
        </member>
        <member name="P:Starcounter.Internal.SystemEntity.Starcounter#Advanced#IBindableInternal#Retriever">
            <inheritdoc />
        </member>
        <member name="T:Starcounter.Internal.DatabaseExceptionFactory">
            <summary>
            The database specific exception factory to be installed inside the
            database worker process.
            </summary>
        </member>
        <member name="M:Starcounter.Internal.DatabaseExceptionFactory.InstallInCurrentAppDomain">
            <summary>
            Installs the in current app domain.
            </summary>
        </member>
        <member name="M:Starcounter.Internal.DatabaseExceptionFactory.#ctor">
            <summary>
            Prevents a default instance of the <see cref="T:Starcounter.Internal.DatabaseExceptionFactory" /> class from being created.
            </summary>
        </member>
        <member name="M:Starcounter.Internal.DatabaseExceptionFactory.CreateException(System.UInt32,System.Exception,System.String,System.Func{System.UInt32,System.String,System.Object[],System.String},System.Object[])">
            <inheritdoc />
        </member>
        <member name="T:Starcounter.Internal.ExceptionManager">
            <summary>
            Class ExceptionManager
            </summary>
        </member>
        <member name="M:Starcounter.Internal.ExceptionManager.HandleInternalFatalError(System.UInt32)">
            <summary>
            Handles the internal fatal error.
            </summary>
            <param name="code">The code.</param>
        </member>
        <member name="T:Starcounter.Internal.Initialized">
            <summary>
            Type used to assure unique signatures when weaving database
            user code.
            </summary>
            <remarks>
            The weaver assures this class is never used explicitly
            in user code in a way that can violate the uniqeness of our
            required signatures.
            </remarks>
            <see cref="T:Starcounter.Internal.Uninitialized"/>
        </member>
        <member name="T:Starcounter.Internal.HostedThread">
            <summary>
            Provides a set of utility methods for hosted threads, i.e.
            threads that execute in the Starcounter code host process.
            </summary>
            <remarks>
            The methods of this class are primary intended for the Starcounter
            tools and the runtime host.
            </remarks>
        </member>
        <member name="M:Starcounter.Internal.HostedThread.SetPriority(System.Threading.Thread,System.Threading.ThreadPriority)">
            <summary>
            Sets the thread priority of <paramref name="self"/> to the
            given <paramref name="value"/>.
            </summary>
            <param name="self">The thread whose priority to set.</param>
            <param name="value">The new priority.</param>
            <remarks>
            The Starcounter runtime will investigate all hosted code and
            replace all assignments to <see cref="!:System.Thread.Priority"/>
            with a call to this method.
            </remarks>
        </member>
        <member name="M:Starcounter.Internal.HostedThread.Sleep(System.Int32)">
            <summary>
            Sleeps the specified milliseconds timeout.
            </summary>
            <param name="millisecondsTimeout">The milliseconds timeout to sleep.</param>
            <exception cref="T:System.ArgumentOutOfRangeException">millisecondsTimeout</exception>
            <remarks>
            The Starcounter runtime will investigate all hosted code and
            replace all calls to <see cref="!:System.Thread.Sleep(int)"/>
            with a call to this method.
            </remarks>
        </member>
        <member name="M:Starcounter.Internal.HostedThread.Sleep(System.TimeSpan)">
            <summary>
            Sleeps the specified timeout.
            </summary>
            <param name="timeout">The timeout to sleep</param>
            <exception cref="T:System.ArgumentOutOfRangeException">timeout</exception>
            <remarks>
            The Starcounter runtime will investigate all hosted code and
            replace all calls to <see cref="!:System.Thread.Sleep(TimeSpan)"/>
            with a call to this method.
            </remarks>
        </member>
        <member name="T:Starcounter.Internal.StarcounterAssemblyAttribute">
            <summary>
            Custom attrbute that is used initially just as a tag set
            on assemblies targeting Starcounter to assure the compiler
            does not omit adding a reference to the Starcounter assembly,
            something that is required for assemblies that are to be
            processed by the weaver.
            </summary>
        </member>
        <member name="P:Starcounter.Internal.StarcounterAssemblyAttribute.QualifyTypesOnlyByFullNameInQueries">
            <summary>
            Gets or sets a value dictating if database types are to be qualified
            only by their full name. Default is <c>false</c>.
            </summary>
        </member>
        <member name="T:Starcounter.Internal.TaskHelper">
            <summary>
            </summary>
        </member>
        <member name="M:Starcounter.Internal.TaskHelper.Reset">
            <summary>
            Called when exiting managed task entry point to cleanup managed
            resources attached to the task.
            </summary>
        </member>
        <member name="T:Starcounter.Internal.Kernel32">
            <summary>
            Class Kernel32
            </summary>
        </member>
        <member name="T:Starcounter.Internal.Kernel32.MEMORYSTATUSEX">
            <summary>
            </summary>
        </member>
        <member name="M:Starcounter.Internal.Kernel32.GlobalMemoryStatusEx(Starcounter.Internal.Kernel32.MEMORYSTATUSEX*)">
            <summary>
            </summary>
        </member>
        <member name="M:Starcounter.Internal.Kernel32.ExitProcess(System.UInt32)">
            <summary>
            Exits the process.
            </summary>
            <param name="exitCode">The exit code.</param>
        </member>
        <member name="M:Starcounter.Internal.Kernel32.GetCurrentProcess">
            <summary>
            Gets the current process.
            </summary>
            <returns>IntPtr.</returns>
        </member>
        <member name="M:Starcounter.Internal.Kernel32.GetProcAddress(System.Void*,System.String)">
            <summary>
            Gets the proc address.
            </summary>
            <param name="hModule">The h module.</param>
            <param name="procName">Name of the proc.</param>
        </member>
        <member name="M:Starcounter.Internal.Kernel32.LoadLibraryA(System.String)">
            <summary>
            Loads the library A.
            </summary>
            <param name="fileName">Name of the file.</param>
        </member>
        <member name="M:Starcounter.Internal.Kernel32.MoveByteMemory(System.Byte*,System.Byte*,System.Int32)">
            <summary>
            Moves the byte memory.
            </summary>
            <param name="Destination">The destination.</param>
            <param name="Source">The source.</param>
            <param name="LengthBytes">The length bytes.</param>
        </member>
        <member name="M:Starcounter.Internal.Kernel32.SetProcessPriorityBoost(System.IntPtr,System.Int32)">
            <summary>
            Sets the process priority boost.
            </summary>
            <param name="hProcess">The h process.</param>
            <param name="DisablePriorityBoost">The disable priority boost.</param>
            <returns>System.Int32.</returns>
        </member>
        <member name="F:Starcounter.Internal.Kernel32.MEM_COMMIT">
            <summary>
            The ME m_ COMMIT
            </summary>
        </member>
        <member name="F:Starcounter.Internal.Kernel32.PAGE_READWRITE">
            <summary>
            The PAG e_ READWRITE
            </summary>
        </member>
        <member name="M:Starcounter.Internal.Kernel32.VirtualAlloc(System.Void*,System.IntPtr,System.UInt32,System.UInt32)">
            <summary>
            Virtuals the alloc.
            </summary>
            <param name="lpAddress">The lp address.</param>
            <param name="dwSize">Size of the dw.</param>
            <param name="flAllocationType">Type of the fl allocation.</param>
            <param name="flProtect">The fl protect.</param>
        </member>
        <member name="T:Starcounter.Internal.Metadata.MetaBinder">
            <summary>
            Defines the semantics we need to bind metadata classes, and
            provides a way to inject a concrete binder from generated
            code.
            </summary>
        </member>
        <member name="F:Starcounter.Internal.Metadata.MetaBinder.Instance">
            <summary>
            Gets the runtime instance of the binder. Assigned by
            generated code.
            </summary>
        </member>
        <member name="M:Starcounter.Internal.Metadata.MetaBinder.CreateTypeTableDef(System.Type)">
            <summary>
            This is a help method, which creates TypeDef and TableDef for given meta-data type.
            </summary>
            <param name="sysType">Instance of System.Type describing the meta-data type.</param>
            <returns></returns>
        </member>
        <member name="M:Starcounter.Internal.Metadata.MetaBinder.GetDefinitions">
            <summary>
            Return the set of <see cref="T:Starcounter.Binding.TypeDef"/> instances representing
            metadata host classes.
            </summary>
            <returns>Metadata host definitions.</returns>
        </member>
        <member name="M:Starcounter.Internal.Metadata.MetaBinder.GetSpecifications">
            <summary>
            Gets the type of every type specification belonging to a
            metadata class.
            </summary>
            <returns>Types of specifications.</returns>
        </member>
        <member name="T:Starcounter.Internal.TransactionManager">
            <summary>
            Class that keeps track of created (kernel) transactions during a task. All transactions 
            that have not been explicitly claimed will be released in the end of the task, the others
            is up to the claimee to properly release them when finished.
            </summary>
            <remarks>
            1) The transactions created using <c>Db.Transact</c> is not handled by this class. The transactions here
            are created using <c>Db.Scope</c> or <c>Transaction</c> object directly.
            2) Since parts of this class needs to be exposed to other projects it needs to use an interface that is
            injected with this instance during startup. The implementation is threadsafe however. No state is kept on 
            the instance.
            </remarks>
        </member>
        <member name="M:Starcounter.Internal.TransactionManager.Create(System.Boolean,Starcounter.HookCategory)">
            <summary>
            
            </summary>
            <param name="readOnly"></param>
            <param name="disabledHooks"></param>
            <returns></returns>
        </member>
        <member name="M:Starcounter.Internal.TransactionManager.WrapHandle(Starcounter.Internal.TransactionHandle)">
            <summary>
            Wraps a transaction handle in a managed transaction object.
            </summary>
            <param name="handle"></param>
            <returns></returns>
        </member>
        <member name="M:Starcounter.Internal.TransactionManager.DisposeNoException(Starcounter.Internal.TransactionHandle)">
            <summary>
            Releases the kerneltransaction and removes the handle from the references.
            </summary>
            <param name="handle"></param>
            <param name="index"></param>
        </member>
        <member name="M:Starcounter.Internal.TransactionManager.CheckForRefOrDisposeTransaction(Starcounter.Internal.TransactionHandle)">
            <summary>
            Checks if the specified transaction has any temporary references or is managed by another.
            If not it will be disposed.
            </summary>
            <param name="handle"></param>
            <returns>
            True if the transaction has a reference, false otherwise which means that it's been disposed.
            </returns>
        </member>
        <member name="M:Starcounter.Internal.TransactionManager.SetTemporaryRef(Starcounter.Advanced.ITransaction)">
            <summary>
            
            </summary>
            <param name="transaction"></param>
        </member>
        <member name="M:Starcounter.Internal.TransactionManager.SetTemporaryRef(Starcounter.Internal.TransactionHandle)">
            <summary>
            Marks the transaction with the specified index as temporary in use. This means
            the transaction cannot be cleaned up in the end of the scope, but will be cleaned
            up in the end of the request, unless the ownership of the transaction is claimed.
            </summary>
            <param name="index"></param>
            <returns></returns>
        </member>
        <member name="M:Starcounter.Internal.TransactionManager.VerifyTransaction(Starcounter.Internal.TransactionHandle)">
            <summary>
            Verifies that the handle is still valid by either check that it points to
            the correct handle in the list for the current task, or that ownership have 
            been properly transfered.
            </summary>
            <param name="handle"></param>
        </member>
        <member name="M:Starcounter.Internal.TransactionManager.VerifyTransaction(Starcounter.Internal.TransactionHandle,Starcounter.Internal.TransactionHandle)">
            <summary>
            Verifies that both parameters, the handle coming from usercode and the handle stored in
            this class for the current task, points to the same kernelhandle.
            </summary>
            <param name="handle"></param>
            <param name="kept"></param>
        </member>
        <!-- Badly formed XML comment ignored for member "M:Starcounter.Internal.TransactionManager.Touch(System.Object)" -->
        <!-- Badly formed XML comment ignored for member "M:Starcounter.Internal.TransactionManager.Touch(Starcounter.Binding.IObjectProxy)" -->
        <member name="M:Starcounter.Internal.TransactionManager.Scope(Starcounter.Internal.TransactionHandle,System.Action)">
            <summary>
            Executes some code within this transaction scope.
            </summary>
            <param name="action">Delegate that is called on transaction.</param>
        </member>
        <member name="M:Starcounter.Internal.TransactionManager.Commit(System.UInt64,System.Int32)">
            <summary>
            Commits current transaction.
            </summary>
        </member>
        <member name="M:Starcounter.Internal.TransactionManager.Rollback(Starcounter.Internal.TransactionHandle)">
            <summary>
            Rollbacks uncommitted changes on transaction.
            </summary>
        </member>
        <member name="T:Starcounter.Internal.DbState">
            <summary>
            Class DbState
            </summary>
        </member>
        <member name="T:Starcounter.Internal.DbState.View">
            <summary>
            Defines a set of read-only methods used by the weaver to emit
            calls from weave-time implementations of <see cref="T:Starcounter.IObjectViewInternal"/>
            that must call into Starcounter.
            </summary>
            <remarks>
            This alternative allows us to keep the visibility of TypeBinding
            and PropertyBinding intact. If we find it makes for slower calls
            we have to adapt the call layer using IObjectView.
            </remarks>
        </member>
        <member name="M:Starcounter.Internal.DbState.WriteBoolean(System.UInt64,System.UInt64,System.Int32,System.Boolean)">
            <summary>
            
            </summary>
            <param name="obj"></param>
            <param name="index"></param>
            <param name="value"></param>
        </member>
        <member name="M:Starcounter.Internal.DbState.WriteNullableBoolean(System.UInt64,System.UInt64,System.Int32,System.Nullable{System.Boolean})">
            <summary>
            
            </summary>
            <param name="oid"></param>
            <param name="address"></param>
            <param name="index"></param>
            <param name="value"></param>
        </member>
        <member name="M:Starcounter.Internal.DbState.WriteByte(System.UInt64,System.UInt64,System.Int32,System.Byte)">
            <summary>
            
            </summary>
            <param name="oid"></param>
            <param name="address"></param>
            <param name="index"></param>
            <param name="value"></param>
        </member>
        <member name="M:Starcounter.Internal.DbState.WriteNullableByte(System.UInt64,System.UInt64,System.Int32,System.Nullable{System.Byte})">
            <summary>
            
            </summary>
            <param name="oid"></param>
            <param name="address"></param>
            <param name="index"></param>
            <param name="value"></param>
        </member>
        <member name="M:Starcounter.Internal.DbState.WriteDateTime(System.UInt64,System.UInt64,System.Int32,System.DateTime)">
            <summary>
            
            </summary>
            <param name="oid"></param>
            <param name="address"></param>
            <param name="index"></param>
            <param name="value"></param>
        </member>
        <member name="M:Starcounter.Internal.DbState.WriteNullableDateTime(System.UInt64,System.UInt64,System.Int32,System.Nullable{System.DateTime})">
            <summary>
            
            </summary>
            <param name="oid"></param>
            <param name="address"></param>
            <param name="index"></param>
            <param name="value"></param>
        </member>
        <member name="M:Starcounter.Internal.DbState.WriteDateTimeEx(System.UInt64,System.UInt64,System.Int32,System.Int64)">
            <summary>
            
            </summary>
            <param name="oid"></param>
            <param name="address"></param>
            <param name="index"></param>
            <param name="value"></param>
            <exception cref="T:System.NotImplementedException">Negative timestamps are currently not supported.</exception>
        </member>
        <member name="M:Starcounter.Internal.DbState.WriteDecimal(System.UInt64,System.UInt64,System.Int32,System.Decimal)">
            <summary>
            
            </summary>
            <param name="recordID"></param>
            <param name="recordAddr"></param>
            <param name="columnIndex"></param>
            <param name="value"></param>
        </member>
        <member name="M:Starcounter.Internal.DbState.WriteNullableDecimal(System.UInt64,System.UInt64,System.Int32,System.Nullable{System.Decimal})">
            <summary>
            
            </summary>
            <param name="oid"></param>
            <param name="address"></param>
            <param name="index"></param>
            <param name="value"></param>
        </member>
        <member name="M:Starcounter.Internal.DbState.WriteDouble(System.UInt64,System.UInt64,System.Int32,System.Double)">
            <summary>
            
            </summary>
            <param name="oid"></param>
            <param name="address"></param>
            <param name="index"></param>
            <param name="value"></param>
        </member>
        <member name="M:Starcounter.Internal.DbState.WriteNullableDouble(System.UInt64,System.UInt64,System.Int32,System.Nullable{System.Double})">
            <summary>
            
            </summary>
            <param name="oid"></param>
            <param name="address"></param>
            <param name="index"></param>
            <param name="value"></param>
        </member>
        <member name="M:Starcounter.Internal.DbState.WriteInt16(System.UInt64,System.UInt64,System.Int32,System.Int16)">
            <summary>
            
            </summary>
            <param name="oid"></param>
            <param name="address"></param>
            <param name="index"></param>
            <param name="value"></param>
        </member>
        <member name="M:Starcounter.Internal.DbState.WriteNullableInt16(System.UInt64,System.UInt64,System.Int32,System.Nullable{System.Int16})">
            <summary>
            
            </summary>
            <param name="oid"></param>
            <param name="address"></param>
            <param name="index"></param>
            <param name="value"></param>
        </member>
        <member name="M:Starcounter.Internal.DbState.WriteInt32(System.UInt64,System.UInt64,System.Int32,System.Int32)">
            <summary>
            
            </summary>
            <param name="oid"></param>
            <param name="address"></param>
            <param name="index"></param>
            <param name="value"></param>
        </member>
        <member name="M:Starcounter.Internal.DbState.WriteNullableInt32(System.UInt64,System.UInt64,System.Int32,System.Nullable{System.Int32})">
            <summary>
            
            </summary>
            <param name="oid"></param>
            <param name="address"></param>
            <param name="index"></param>
            <param name="value"></param>
        </member>
        <member name="M:Starcounter.Internal.DbState.WriteInt64(System.UInt64,System.UInt64,System.Int32,System.Int64)">
            <summary>
            
            </summary>
            <param name="oid"></param>
            <param name="address"></param>
            <param name="index"></param>
            <param name="value"></param>
        </member>
        <member name="M:Starcounter.Internal.DbState.WriteNullableInt64(System.UInt64,System.UInt64,System.Int32,System.Nullable{System.Int64})">
            <summary>
            
            </summary>
            <param name="oid"></param>
            <param name="address"></param>
            <param name="index"></param>
            <param name="value"></param>
        </member>
        <member name="M:Starcounter.Internal.DbState.WriteObject(System.UInt64,System.UInt64,System.Int32,Starcounter.Binding.IObjectProxy)">
            <summary>
            
            </summary>
            <param name="oid"></param>
            <param name="address"></param>
            <param name="index"></param>
            <param name="value"></param>
        </member>
        <member name="M:Starcounter.Internal.DbState.WriteTypeReference(System.UInt64,System.UInt64,System.Int32,Starcounter.Binding.IObjectProxy)">
            <summary>
            
            </summary>
            <param name="oid"></param>
            <param name="address"></param>
            <param name="index"></param>
            <param name="value"></param>
        </member>
        <member name="M:Starcounter.Internal.DbState.WriteInherits(System.UInt64,System.UInt64,System.Int32,Starcounter.Binding.IObjectProxy)">
            <summary>
            
            </summary>
            <param name="oid"></param>
            <param name="address"></param>
            <param name="index"></param>
            <param name="value"></param>
        </member>
        <member name="M:Starcounter.Internal.DbState.WriteTypeName(System.UInt64,System.UInt64,System.Int32,System.String)">
            <summary>
            
            </summary>
            <param name="oid"></param>
            <param name="address"></param>
            <param name="index"></param>
            <param name="value"></param>
        </member>
        <member name="M:Starcounter.Internal.DbState.WriteSByte(System.UInt64,System.UInt64,System.Int32,System.SByte)">
            <summary>
            
            </summary>
            <param name="oid"></param>
            <param name="address"></param>
            <param name="index"></param>
            <param name="value"></param>
        </member>
        <member name="M:Starcounter.Internal.DbState.WriteNullableSByte(System.UInt64,System.UInt64,System.Int32,System.Nullable{System.SByte})">
            <summary>
            
            </summary>
            <param name="oid"></param>
            <param name="address"></param>
            <param name="index"></param>
            <param name="value"></param>
        </member>
        <member name="M:Starcounter.Internal.DbState.WriteSingle(System.UInt64,System.UInt64,System.Int32,System.Single)">
            <summary>
            
            </summary>
            <param name="oid"></param>
            <param name="address"></param>
            <param name="index"></param>
            <param name="value"></param>
        </member>
        <member name="M:Starcounter.Internal.DbState.WriteNullableSingle(System.UInt64,System.UInt64,System.Int32,System.Nullable{System.Single})">
            <summary>
            
            </summary>
            <param name="oid"></param>
            <param name="address"></param>
            <param name="index"></param>
            <param name="value"></param>
        </member>
        <member name="M:Starcounter.Internal.DbState.WriteString(System.UInt64,System.UInt64,System.Int32,System.String)">
            <summary>
            
            </summary>
            <param name="oid"></param>
            <param name="address"></param>
            <param name="index"></param>
            <param name="value"></param>
        </member>
        <member name="M:Starcounter.Internal.DbState.WriteTimeSpan(System.UInt64,System.UInt64,System.Int32,System.TimeSpan)">
            <summary>
            
            </summary>
            <param name="oid"></param>
            <param name="address"></param>
            <param name="index"></param>
            <param name="value"></param>
        </member>
        <member name="M:Starcounter.Internal.DbState.WriteNullableTimeSpan(System.UInt64,System.UInt64,System.Int32,System.Nullable{System.TimeSpan})">
            <summary>
            
            </summary>
            <param name="oid"></param>
            <param name="address"></param>
            <param name="index"></param>
            <param name="value"></param>
        </member>
        <member name="M:Starcounter.Internal.DbState.WriteTimeSpanEx(System.UInt64,System.UInt64,System.Int32,System.Int64)">
            <summary>
            
            </summary>
            <param name="oid"></param>
            <param name="address"></param>
            <param name="index"></param>
            <param name="value"></param>
            <exception cref="T:System.NotImplementedException">Negative timestamps are currently not supported.</exception>
        </member>
        <member name="M:Starcounter.Internal.DbState.WriteUInt16(System.UInt64,System.UInt64,System.Int32,System.UInt16)">
            <summary>
            
            </summary>
            <param name="oid"></param>
            <param name="address"></param>
            <param name="index"></param>
            <param name="value"></param>
        </member>
        <member name="M:Starcounter.Internal.DbState.WriteNullableUInt16(System.UInt64,System.UInt64,System.Int32,System.Nullable{System.UInt16})">
            <summary>
            
            </summary>
            <param name="oid"></param>
            <param name="address"></param>
            <param name="index"></param>
            <param name="value"></param>
        </member>
        <member name="M:Starcounter.Internal.DbState.WriteUInt32(System.UInt64,System.UInt64,System.Int32,System.UInt32)">
            <summary>
            
            </summary>
            <param name="oid"></param>
            <param name="address"></param>
            <param name="index"></param>
            <param name="value"></param>
        </member>
        <member name="M:Starcounter.Internal.DbState.WriteNullableUInt32(System.UInt64,System.UInt64,System.Int32,System.Nullable{System.UInt32})">
            <summary>
            
            </summary>
            <param name="oid"></param>
            <param name="address"></param>
            <param name="index"></param>
            <param name="value"></param>
        </member>
        <member name="M:Starcounter.Internal.DbState.WriteUInt64(System.UInt64,System.UInt64,System.Int32,System.UInt64)">
            <summary>
            
            </summary>
            <param name="oid"></param>
            <param name="address"></param>
            <param name="index"></param>
            <param name="value"></param>
        </member>
        <member name="M:Starcounter.Internal.DbState.WriteNullableUInt64(System.UInt64,System.UInt64,System.Int32,System.Nullable{System.UInt64})">
            <summary>
            
            </summary>
            <param name="oid"></param>
            <param name="address"></param>
            <param name="index"></param>
            <param name="value"></param>
        </member>
        <member name="M:Starcounter.Internal.DbState.WriteBinary(System.UInt64,System.UInt64,System.Int32,Starcounter.Binary)">
            <summary>
            
            </summary>
            <param name="oid"></param>
            <param name="address"></param>
            <param name="index"></param>
            <param name="value"></param>
        </member>
        <member name="M:Starcounter.Internal.DbState.WriteNull(System.UInt64,System.UInt64,System.Int32)">
            <summary>
            
            </summary>
            <param name="oid"></param>
            <param name="address"></param>
            <param name="index"></param>
        </member>
        <member name="T:Starcounter.Internal.LoaderHelper">
            <summary>
            Class LoaderHelper
            </summary>
        </member>
        <member name="M:Starcounter.Internal.LoaderHelper.MapPropertyDefsToColumnDefs(Starcounter.Binding.TableDef,Starcounter.Binding.ColumnDef[],Starcounter.Binding.PropertyDef[],Starcounter.Binding.DbTypeCode[]@)">
            <summary>
            Maps the property defs to column defs.
            </summary>
            <param name="columnDefs">The column defs.</param>
            <param name="propertyDefs">The property defs.</param>
            <param name="columnRuntimeTypes">
            Array parallel to columnDefs with type codes of columns as mapped by properties.
            </param>
            <exception cref="T:System.Exception"></exception>
        </member>
        <member name="T:Starcounter.Internal.SchemaLoader">
            <summary>
            Class SchemaLoader
            </summary>
        </member>
        <member name="M:Starcounter.Internal.SchemaLoader.LoadAndConvertSchema(Sc.Server.Weaver.Schema.DatabaseSchema)">
            <summary>
            Loads and convert the schema.
            </summary>
            <param name="databaseSchema">The schema to work upon.</param>
            <returns>List of type definitions</returns>
        </member>
        <member name="M:Starcounter.Internal.SchemaLoader.EntityClassToTypeDef(Sc.Server.Weaver.Schema.DatabaseEntityClass,Starcounter.Binding.TypeLoader)">
            <summary>
            Entities the class to type def.
            </summary>
            <param name="databaseClass">The database class.</param>
            <param name="typeLoader">The type loader.</param>
            <returns>TypeDef.</returns>
        </member>
        <member name="M:Starcounter.Internal.SchemaLoader.GatherColumnAndPropertyDefs(Sc.Server.Weaver.Schema.DatabaseEntityClass,System.Collections.Generic.List{Starcounter.Binding.ColumnDef},System.Collections.Generic.List{Starcounter.Binding.PropertyDef},System.Boolean)">
            <summary>
            Gathers the column and property defs.
            </summary>
            <param name="databaseClass">The database class.</param>
            <param name="columnDefs">The column defs.</param>
            <param name="propertyDefs">The property defs.</param>
            <param name="subClass">if set to <c>true</c> [sub class].</param>
            <exception cref="T:System.Exception"></exception>
        </member>
        <member name="M:Starcounter.Internal.SchemaLoader.AddProperty(Starcounter.Binding.PropertyDef,System.Collections.Generic.List{Starcounter.Binding.PropertyDef})">
            <summary>
            
            </summary>
            <param name="property"></param>
            <param name="properties"></param>
        </member>
        <member name="M:Starcounter.Internal.SchemaLoader.PrimitiveToTypeCode(Sc.Server.Weaver.Schema.DatabasePrimitive)">
            <summary>
            Primitives to type code.
            </summary>
            <param name="primitive">The primitive.</param>
            <returns>DbTypeCode.</returns>
            <exception cref="T:System.NotSupportedException"></exception>
        </member>
        <member name="T:Starcounter.Internal.sccorelib">
            <summary>
            Class sccorelib
            </summary>
        </member>
        <member name="T:Starcounter.Internal.sccorelib.THREAD_ENTER">
            <summary>
            Delegate THREAD_ENTER
            </summary>
            <param name="hsched">The hsched.</param>
            <param name="cpun">The cpun.</param>
            <param name="p">The p.</param>
            <param name="init">The init.</param>
        </member>
        <member name="T:Starcounter.Internal.sccorelib.THREAD_LEAVE">
            <summary>
            Delegate THREAD_LEAVE
            </summary>
            <param name="hsched">The hsched.</param>
            <param name="cpun">The cpun.</param>
            <param name="p">The p.</param>
            <param name="yr">The yr.</param>
        </member>
        <member name="F:Starcounter.Internal.sccorelib.CM5_START_FLAG_FIRST_THREAD">
            <summary>
            The C M5_ STAR t_ FLA g_ FIRS t_ THREAD
            </summary>
        </member>
        <member name="T:Starcounter.Internal.sccorelib.THREAD_START">
            <summary>
            Delegate THREAD_START
            </summary>
            <param name="hsched">The hsched.</param>
            <param name="cpun">The cpun.</param>
            <param name="p">The p.</param>
            <param name="sf">The sf.</param>
        </member>
        <member name="T:Starcounter.Internal.sccorelib.THREAD_RESET">
            <summary>
            Delegate THREAD_RESET
            </summary>
            <param name="hsched">The hsched.</param>
            <param name="cpun">The cpun.</param>
            <param name="p">The p.</param>
        </member>
        <member name="T:Starcounter.Internal.sccorelib.THREAD_YIELD">
            <summary>
            Delegate THREAD_YIELD
            </summary>
            <param name="hsched">The hsched.</param>
            <param name="cpun">The cpun.</param>
            <param name="p">The p.</param>
            <param name="yr">The yr.</param>
            <returns>System.Int32.</returns>
        </member>
        <member name="T:Starcounter.Internal.sccorelib.VPROC_IDLE">
            <summary>
            Delegate VPROC_IDLE
            </summary>
            <param name="hsched">The hsched.</param>
            <param name="cpun">The cpun.</param>
            <param name="p">The p.</param>
            <returns>System.Int32.</returns>
        </member>
        <member name="F:Starcounter.Internal.sccorelib.CM5_YIELD_REASON_TIMES_UP">
            <summary>
            The C M5_ YIEL d_ REASO n_ TIME s_ UP
            </summary>
        </member>
        <member name="F:Starcounter.Internal.sccorelib.CM5_YIELD_REASON_USER_INITIATED">
            <summary>
            The C M5_ YIEL d_ REASO n_ USE r_ INITIATED
            </summary>
        </member>
        <member name="F:Starcounter.Internal.sccorelib.CM5_YIELD_REASON_INTERRUPTED">
            <summary>
            The C M5_ YIEL d_ REASO n_ INTERRUPTED
            </summary>
        </member>
        <member name="F:Starcounter.Internal.sccorelib.CM5_YIELD_REASON_DETACHED">
            <summary>
            The C M5_ YIEL d_ REASO n_ DETACHED
            </summary>
        </member>
        <member name="F:Starcounter.Internal.sccorelib.CM5_YIELD_REASON_BLOCKED">
            <summary>
            The C M5_ YIEL d_ REASO n_ BLOCKED
            </summary>
        </member>
        <member name="F:Starcounter.Internal.sccorelib.CM5_YIELD_REASON_SUSPENDED">
            <summary>
            The C M5_ YIEL d_ REASO n_ SUSPENDED
            </summary>
        </member>
        <member name="F:Starcounter.Internal.sccorelib.CM5_YIELD_REASON_RELEASED">
            <summary>
            The C M5_ YIEL d_ REASO n_ RELEASED
            </summary>
        </member>
        <member name="T:Starcounter.Internal.sccorelib.CM2_SETUP">
            <summary>
            Struct CM2_SETUP
            </summary>
        </member>
        <member name="F:Starcounter.Internal.sccorelib.CM2_SETUP.name">
            <summary>
            The name
            </summary>
        </member>
        <member name="F:Starcounter.Internal.sccorelib.CM2_SETUP.db_data_dir_path">
            <summary>
            The db_data_dir_path
            </summary>
        </member>
        <member name="F:Starcounter.Internal.sccorelib.CM2_SETUP.server_name">
            <summary>
            The server_name
            </summary>
        </member>
        <member name="F:Starcounter.Internal.sccorelib.CM2_SETUP.mem">
            <summary>
            The mem
            </summary>
        </member>
        <member name="F:Starcounter.Internal.sccorelib.CM2_SETUP.mem_size">
            <summary>
            The mem_size
            </summary>
        </member>
        <member name="F:Starcounter.Internal.sccorelib.CM2_SETUP.num_shm_chunks">
            <summary>
            The num_shm_chunks
            </summary>
        </member>
        <member name="F:Starcounter.Internal.sccorelib.CM2_SETUP.gateway_num_workers">
            <summary>
            Number of workers in gateway
            </summary>
        </member>
        <member name="F:Starcounter.Internal.sccorelib.CM2_SETUP.cpuc">
            <summary>
            The cpuc
            </summary>
        </member>
        <member name="F:Starcounter.Internal.sccorelib.CM2_SETUP.is_system">
            <summary>
            The is_system
            </summary>
        </member>
        <member name="F:Starcounter.Internal.sccorelib.CM2_SETUP.th_enter">
            <summary>
            The th_enter
            </summary>
        </member>
        <member name="F:Starcounter.Internal.sccorelib.CM2_SETUP.th_leave">
            <summary>
            The th_leave
            </summary>
        </member>
        <member name="F:Starcounter.Internal.sccorelib.CM2_SETUP.th_start">
            <summary>
            The th_start
            </summary>
        </member>
        <member name="F:Starcounter.Internal.sccorelib.CM2_SETUP.th_reset">
            <summary>
            The th_reset
            </summary>
        </member>
        <member name="F:Starcounter.Internal.sccorelib.CM2_SETUP.th_yield">
            <summary>
            The th_yield
            </summary>
        </member>
        <member name="F:Starcounter.Internal.sccorelib.CM2_SETUP.vp_idle">
            <summary>
            The vp_idle
            </summary>
        </member>
        <member name="F:Starcounter.Internal.sccorelib.CM2_SETUP.pex_ctxt">
            <summary>
            The pex_ctxt
            </summary>
        </member>
        <member name="M:Starcounter.Internal.sccorelib.cm2_setup(Starcounter.Internal.sccorelib.CM2_SETUP*,System.Void**)">
            <summary>
            Cm2_setups the specified psetup.
            </summary>
            <param name="psetup">The psetup.</param>
            <param name="phsched">The phsched.</param>
            <returns>System.UInt32.</returns>
        </member>
        <member name="M:Starcounter.Internal.sccorelib.cm2_start(System.Void*)">
            <summary>
            Cm2_starts the specified hsched.
            </summary>
            <param name="hsched">The hsched.</param>
            <returns>System.UInt32.</returns>
        </member>
        <member name="M:Starcounter.Internal.sccorelib.cm2_stop(System.Void*,System.Int32)">
            <summary>
            Cm2_stops the specified hsched.
            </summary>
            <param name="hsched">The hsched.</param>
            <param name="wait">The wait.</param>
            <returns>System.UInt32.</returns>
        </member>
        <member name="M:Starcounter.Internal.sccorelib.cm3_get_cpun(System.Void*,System.Byte*)">
            <summary>
            Cm3_get_cpuns the specified ignore.
            </summary>
            <param name="ignore">The ignore.</param>
            <param name="pcpun">The pcpun.</param>
            <returns>System.UInt32.</returns>
        </member>
        <member name="M:Starcounter.Internal.sccorelib.cm2_schedule_impl(System.Void*,System.Byte,System.UInt16,System.UInt16,System.UInt32,System.UInt64,System.UInt64)">
            <summary>
            Cm2_schedules the specified hsched.
            </summary>
            <param name="hsched">The hsched.</param>
            <param name="cpun">The cpun.</param>
            <param name="type">The type.</param>
            <param name="prio">The prio.</param>
            <param name="output1">The output1.</param>
            <param name="output2">The output2.</param>
            <param name="output3">The output3.</param>
            <returns>System.UInt32.</returns>
        </member>
        <member name="F:Starcounter.Internal.sccorelib.CM2_TYPE_RELEASE">
            <summary>
            The C M2_ TYP e_ RELEASE
            </summary>
        </member>
        <member name="F:Starcounter.Internal.sccorelib.CM2_TYPE_REQUEST">
            <summary>
            The C M2_ TYP e_ REQUEST
            </summary>
        </member>
        <member name="F:Starcounter.Internal.sccorelib.CM2_TYPE_CALLBACK">
            <summary>
            The C M2_ TYP e_ CALLBACK
            </summary>
        </member>
        <member name="T:Starcounter.Internal.sccorelib.CM2_TASK_DATA">
            <summary>
            Struct CM2_TASK_DATA
            </summary>
        </member>
        <member name="F:Starcounter.Internal.sccorelib.CM2_TASK_DATA.Type">
            <summary>
            The type
            </summary>
        </member>
        <member name="F:Starcounter.Internal.sccorelib.CM2_TASK_DATA.Prio">
            <summary>
            The prio
            </summary>
        </member>
        <member name="F:Starcounter.Internal.sccorelib.CM2_TASK_DATA.Output1">
            <summary>
            The output1
            </summary>
        </member>
        <member name="F:Starcounter.Internal.sccorelib.CM2_TASK_DATA.Output2">
            <summary>
            The output2
            </summary>
        </member>
        <member name="F:Starcounter.Internal.sccorelib.CM2_TASK_DATA.Output3">
            <summary>
            The output3
            </summary>
        </member>
        <member name="M:Starcounter.Internal.sccorelib.cm2_standby_impl(System.Void*,Starcounter.Internal.sccorelib.CM2_TASK_DATA*)">
            <summary>
            Cm2_standbies the specified hsched.
            </summary>
            <param name="hsched">The hsched.</param>
            <param name="ptask_data">The ptask_data.</param>
            <returns>System.UInt32.</returns>
        </member>
        <member name="M:Starcounter.Internal.sccorelib.cm2_get_cpuc(System.IntPtr,System.Byte*)">
            <summary>
            Cm2_get_cpucs the specified h.
            </summary>
            <param name="h">The h.</param>
            <param name="pcpuc">The pcpuc.</param>
            <returns>UInt32.</returns>
        </member>
        <member name="M:Starcounter.Internal.sccorelib.cm3_eautodet_impl(System.IntPtr)">
            <summary>
            Cm3_eautodets the specified h_opt.
            </summary>
            <param name="h_opt">The h_opt.</param>
            <returns>UInt32.</returns>
        </member>
        <member name="M:Starcounter.Internal.sccorelib.cm3_set_yblk_impl(System.IntPtr)">
            <summary>
            Cm3_set_yblks the specified h_opt.
            </summary>
            <param name="h_opt">The h_opt.</param>
            <returns>UInt32.</returns>
        </member>
        <member name="M:Starcounter.Internal.sccorelib.cm3_rel_yblk(System.IntPtr)">
            <summary>
            Cm3_rel_yblks the specified h_opt.
            </summary>
            <param name="h_opt">The h_opt.</param>
            <returns>UInt32.</returns>
        </member>
        <member name="M:Starcounter.Internal.sccorelib.cm3_sleep_impl(System.IntPtr,System.UInt32)">
            <summary>
            Expose the kernel method <c>cm3_sleep</c> to managed code.
            </summary>
            <param name="h_opt">Optional handle.</param>
            <param name="time">The time to sleep.</param>
            <returns>The result of the call.</returns>
        </member>
        <member name="M:Starcounter.Internal.sccorelib.cm3_yieldc_impl(System.IntPtr)">
            <summary>
            </summary>
        </member>
        <member name="M:Starcounter.Internal.sccorelib.cm3_get_stash(System.Void*,System.UInt32**)">
            <summary>
            Cm3_get_stashes the specified ignore.
            </summary>
            <param name="ignore">The ignore.</param>
            <param name="ppstash">The ppstash.</param>
            <returns>UInt32.</returns>
        </member>
        <member name="M:Starcounter.Internal.sccorelib.cm_send_to_client_impl(System.UInt32,System.UInt32)">
            <summary>
            </summary>
        </member>
        <member name="M:Starcounter.Internal.sccorelib.cm3_mevt_new(System.Void*,System.Int32,System.Void**)">
            <summary>
            </summary>
        </member>
        <member name="M:Starcounter.Internal.sccorelib.cm3_mevt_rel(System.Void*)">
            <summary>
            </summary>
        </member>
        <member name="M:Starcounter.Internal.sccorelib.cm3_mevt_set(System.Void*)">
            <summary>
            </summary>
        </member>
        <member name="M:Starcounter.Internal.sccorelib.cm3_mevt_wait(System.Void*,System.UInt32,System.UInt32)">
            <summary>
            </summary>
        </member>
        <member name="M:Starcounter.Internal.sccorelib.fix_wait_for_gateway_available(System.UInt32)">
            <summary>
            </summary>
        </member>
        <member name="M:Starcounter.Internal.sccorelib.fix_get_performance_counter_file_map">
            <summary>
            </summary>
        </member>
        <member name="M:Starcounter.Internal.sccorelib.GetCpuCount(System.IntPtr)">
            <summary>
            Gets the cpu count.
            </summary>
            <param name="handle">The handle.</param>
            <returns>Byte.</returns>
        </member>
        <member name="M:Starcounter.Internal.sccorelib.GetCpuNumber">
            <summary>
            Gets the cpu number.
            </summary>
            <returns>System.Byte.</returns>
        </member>
        <member name="M:Starcounter.Internal.sccorelib.GetStateShare">
            <summary>
            Gets the state share.
            </summary>
            <returns>System.UInt32.</returns>
        </member>
        <member name="T:Starcounter.Internal.sccorelib_ext">
            <summary>
            Class sccorelib_ext
            </summary>
        </member>
        <member name="F:Starcounter.Internal.sccorelib_ext.TYPE_RECYCLE_SCRAP">
            <summary>
            </summary>
        </member>
        <member name="F:Starcounter.Internal.sccorelib_ext.TYPE_RUN_TASK">
            <summary>
            </summary>
        </member>
        <member name="F:Starcounter.Internal.sccorelib_ext.TYPE_PROCESS_PACKAGE">
            <summary>
            </summary>
        </member>
        <member name="T:Starcounter.Internal.Uninitialized">
            <summary>
            Class Uninitialized
            </summary>
        </member>
        <member name="T:Starcounter.Internal.ITask">
            <summary>
            Interface representing a task. Used by the in process task scheduler to
            run the task.
            </summary>
        </member>
        <member name="P:Starcounter.Internal.ITask.UserAction">
            <summary>
            User action.
            </summary>
        </member>
        <member name="M:Starcounter.Internal.ITask.Run">
            <summary>
            Called to execute the task.
            </summary>
        </member>
        <member name="M:Starcounter.Internal.ITask.GetException">
            <summary>
            Getting exception.
            </summary>
            <returns></returns>
        </member>
        <member name="T:Starcounter.Internal.ITaskScheduler">
            <summary>
            </summary>
        </member>
        <member name="M:Starcounter.Internal.ITaskScheduler.Run(Starcounter.Internal.ITask,System.Byte)">
            <summary>
            </summary>
        </member>
        <member name="T:Starcounter.Internal.TaskScheduler">
            <summary>
            </summary>
        </member>
        <member name="M:Starcounter.Internal.TaskScheduler.SetImplementation(Starcounter.Internal.ITaskScheduler)">
            <summary>
            </summary>
        </member>
        <member name="F:Starcounter.UriMapping.EndsWithStringParam">
            <summary>
            Supported parameter string.
            </summary>
        </member>
        <member name="F:Starcounter.UriMapping.MappingUriPrefix">
            <summary>
            Required URI mapping prefix.
            </summary>
        </member>
        <member name="F:Starcounter.UriMapping.OntologyMappingUriPrefix">
            <summary>
            Mapping class URI prefix.
            </summary>
        </member>
        <member name="M:Starcounter.UriMapping.Map(System.String,System.String,System.String)">
            <summary>
            Maps an existing application URI to another URI.
            </summary>
        </member>
        <member name="M:Starcounter.UriMapping.Map(System.String,System.String,System.Func{System.String,System.String},System.Func{System.String,System.String},System.String)">
            <summary>
            Maps an existing application URI to another URI.
            </summary>
        </member>
        <member name="M:Starcounter.UriMapping.DefaultConverter(System.String)">
            <summary>
            Default parameters converter.
            </summary>
            <param name="a"></param>
            <returns></returns>
        </member>
        <member name="M:Starcounter.UriMapping.OntologyMap``1(System.String)">
            <summary>
            Maps an existing application URI to class URI.
            </summary>
        </member>
        <member name="M:Starcounter.UriMapping.OntologyMap(System.String,System.String)">
            <summary>
            Maps an existing application URI to class URI.
            </summary>
        </member>
        <member name="M:Starcounter.UriMapping.OntologyMap(System.String,System.String,System.Func{System.String,System.String},System.Func{System.String,System.String})">
            <summary>
            Maps an existing application URI to class URI.
            </summary>
        </member>
        <member name="T:Starcounter.Binding.BinaryPropertyBinding">
            <summary>
            Class BinaryPropertyBinding
            </summary>
        </member>
        <member name="P:Starcounter.Binding.BinaryPropertyBinding.TypeCode">
            <summary>
            Gets the type code.
            </summary>
            <value>The type code.</value>
        </member>
        <member name="M:Starcounter.Binding.BinaryPropertyBinding.DoGetBoolean(System.Object)">
            <summary>
            Gets the value of a boolean attribute.
            </summary>
            <param name="obj">The obj.</param>
            <returns>System.Nullable{Boolean}.</returns>
        </member>
        <member name="M:Starcounter.Binding.BinaryPropertyBinding.DoGetByte(System.Object)">
            <summary>
            Gets the value of an integer attribute as a 8-bits unsigned integer.
            </summary>
            <param name="obj">The obj.</param>
            <returns>System.Nullable{Byte}.</returns>
        </member>
        <member name="M:Starcounter.Binding.BinaryPropertyBinding.DoGetDateTime(System.Object)">
            <summary>
            Gets the value of a timestamp attribute.
            </summary>
            <param name="obj">The obj.</param>
            <returns>System.Nullable{DateTime}.</returns>
        </member>
        <member name="M:Starcounter.Binding.BinaryPropertyBinding.DoGetDecimal(System.Object)">
            <summary>
            Gets the value of a decimal attribute.
            </summary>
            <param name="obj">The obj.</param>
            <returns>System.Nullable{Decimal}.</returns>
        </member>
        <member name="M:Starcounter.Binding.BinaryPropertyBinding.DoGetDouble(System.Object)">
            <summary>
            Gets the value of a 64-bits floating point attribute.
            </summary>
            <param name="obj">The obj.</param>
            <returns>System.Nullable{Double}.</returns>
        </member>
        <member name="M:Starcounter.Binding.BinaryPropertyBinding.DoGetInt16(System.Object)">
            <summary>
            Gets the value of an integer attribute as a 16-bits signed integer.
            </summary>
            <param name="obj">The obj.</param>
            <returns>System.Nullable{Int16}.</returns>
        </member>
        <member name="M:Starcounter.Binding.BinaryPropertyBinding.DoGetInt32(System.Object)">
            <summary>
            Gets the value of an integer attribute as a 32-bits signed integer.
            </summary>
            <param name="obj">The obj.</param>
            <returns>System.Nullable{Int32}.</returns>
        </member>
        <member name="M:Starcounter.Binding.BinaryPropertyBinding.DoGetInt64(System.Object)">
            <summary>
            Gets the value of an integer attribute as a 64-bits signed integer.
            </summary>
            <param name="obj">The obj.</param>
            <returns>System.Nullable{Int64}.</returns>
        </member>
        <member name="M:Starcounter.Binding.BinaryPropertyBinding.DoGetObject(System.Object)">
            <summary>
            Gets the value of a reference attribute.
            </summary>
            <param name="obj">The obj.</param>
            <returns>Entity.</returns>
        </member>
        <member name="M:Starcounter.Binding.BinaryPropertyBinding.DoGetSByte(System.Object)">
            <summary>
            Gets the value of an integer attribute as a 8-bits signed integer.
            </summary>
            <param name="obj">The obj.</param>
            <returns>System.Nullable{SByte}.</returns>
        </member>
        <member name="M:Starcounter.Binding.BinaryPropertyBinding.DoGetSingle(System.Object)">
            <summary>
            Gets the value of a 32-bits floating point attribute.
            </summary>
            <param name="obj">The obj.</param>
            <returns>System.Nullable{Single}.</returns>
        </member>
        <member name="M:Starcounter.Binding.BinaryPropertyBinding.DoGetString(System.Object)">
            <summary>
            Gets the value of a string attribute.
            </summary>
            <param name="obj">The obj.</param>
            <returns>String.</returns>
        </member>
        <member name="M:Starcounter.Binding.BinaryPropertyBinding.DoGetUInt16(System.Object)">
            <summary>
            Gets the value of an integer attribute as a 16-bits unsigned integer.
            </summary>
            <param name="obj">The obj.</param>
            <returns>System.Nullable{UInt16}.</returns>
        </member>
        <member name="M:Starcounter.Binding.BinaryPropertyBinding.DoGetUInt32(System.Object)">
            <summary>
            Gets the value of an integer attribute as a 32-bits unsigned integer.
            </summary>
            <param name="obj">The obj.</param>
            <returns>System.Nullable{UInt32}.</returns>
        </member>
        <member name="M:Starcounter.Binding.BinaryPropertyBinding.DoGetUInt64(System.Object)">
            <summary>
            Gets the value of an integer attribute as a 64-bits unsigned integer.
            </summary>
            <param name="obj">The obj.</param>
            <returns>System.Nullable{UInt64}.</returns>
        </member>
        <member name="M:Starcounter.Binding.BinaryPropertyBinding.ExceptionForInvalidType">
            <summary>
            Exceptions the type of for invalid.
            </summary>
            <returns>Exception.</returns>
            <exception cref="T:System.NotSupportedException">Attempt to access a binary attribute as something other then a binary attribute.</exception>
        </member>
        <member name="T:Starcounter.Binding.BindingBuilder">
            <summary>
            Class BindingBuilder
            </summary>
        </member>
        <member name="F:Starcounter.Binding.BindingBuilder._typeDef">
            <summary>
            The _type def
            </summary>
        </member>
        <member name="F:Starcounter.Binding.BindingBuilder._assemblyName">
            <summary>
            The _assembly name
            </summary>
        </member>
        <member name="F:Starcounter.Binding.BindingBuilder._assemblyBuilder">
            <summary>
            The _assembly builder
            </summary>
        </member>
        <member name="F:Starcounter.Binding.BindingBuilder._moduleBuilder">
            <summary>
            The _module builder
            </summary>
        </member>
        <member name="M:Starcounter.Binding.BindingBuilder.#ctor(Starcounter.Binding.TypeDef,System.UInt16[])">
            <summary>
            Initializes a new instance of the <see cref="T:Starcounter.Binding.BindingBuilder" /> class.
            </summary>
            <param name="typeDef">The type def.</param>
            <param name="currentAndBaseTableIds">The baseTableIds.</param>
        </member>
        <member name="M:Starcounter.Binding.BindingBuilder.WriteAssemblyToDisk">
            <summary>
            Writes the assembly to disk.
            </summary>
        </member>
        <member name="M:Starcounter.Binding.BindingBuilder.CreateTypeBinding">
            <summary>
            Creates the type binding.
            </summary>
            <returns>TypeBinding.</returns>
        </member>
        <member name="F:Starcounter.Binding.BindingBuilder.entityType">
            <summary>
            The entity type
            </summary>
        </member>
        <member name="M:Starcounter.Binding.BindingBuilder.SetTypeBindingFlags(Starcounter.Binding.TypeBinding,System.Type)">
            <summary>
            Sets the type binding flags.
            </summary>
            <param name="binding">The binding.</param>
            <param name="type">The type.</param>
        </member>
        <member name="M:Starcounter.Binding.BindingBuilder.BuildPropertyBindingList(Starcounter.Binding.TypeBinding,System.Type)">
            <summary>
            Builds the property binding list.
            </summary>
            <param name="typeBinding">The type binding.</param>
            <param name="type">The type.</param>
            <exception cref="T:System.NotSupportedException"></exception>
        </member>
        <member name="F:Starcounter.Binding.BindingBuilder.boolPropertyBindingBaseType">
            <summary>
            The bool property binding base type
            </summary>
        </member>
        <member name="F:Starcounter.Binding.BindingBuilder.boolPropertyBindingReturnType">
            <summary>
            The bool property binding return type
            </summary>
        </member>
        <member name="F:Starcounter.Binding.BindingBuilder.nullableBoolPropertyBindingReturnType">
            <summary>
            The nullable bool property binding return type
            </summary>
        </member>
        <member name="M:Starcounter.Binding.BindingBuilder.CreateBooleanPropertyBinding(Starcounter.Binding.PropertyDef,System.Type)">
            <summary>
            Creates the boolean property binding.
            </summary>
            <param name="propertyDef">The property def.</param>
            <param name="thisType">Type of the this.</param>
            <returns>PropertyBinding.</returns>
        </member>
        <member name="F:Starcounter.Binding.BindingBuilder.datetimePropertyBindingBaseType">
            <summary>
            The datetime property binding base type
            </summary>
        </member>
        <member name="F:Starcounter.Binding.BindingBuilder.datetimePropertyBindingReturnType">
            <summary>
            The datetime property binding return type
            </summary>
        </member>
        <member name="F:Starcounter.Binding.BindingBuilder.nullableDatetimePropertyBindingReturnType">
            <summary>
            The nullable datetime property binding return type
            </summary>
        </member>
        <member name="M:Starcounter.Binding.BindingBuilder.CreateDateTimePropertyBinding(Starcounter.Binding.PropertyDef,System.Type)">
            <summary>
            Creates the date time property binding.
            </summary>
            <param name="propertyDef">The property def.</param>
            <param name="thisType">Type of the this.</param>
            <returns>PropertyBinding.</returns>
        </member>
        <member name="F:Starcounter.Binding.BindingBuilder.decimalPropertyBindingBaseType">
            <summary>
            The decimal property binding base type
            </summary>
        </member>
        <member name="F:Starcounter.Binding.BindingBuilder.decimalPropertyBindingReturnType">
            <summary>
            The decimal property binding return type
            </summary>
        </member>
        <member name="F:Starcounter.Binding.BindingBuilder.nullableDecimalPropertyBindingReturnType">
            <summary>
            The nullable decimal property binding return type
            </summary>
        </member>
        <member name="M:Starcounter.Binding.BindingBuilder.CreateDecimalPropertyBinding(Starcounter.Binding.PropertyDef,System.Type)">
            <summary>
            Creates the decimal property binding.
            </summary>
            <param name="propertyDef">The property def.</param>
            <param name="thisType">Type of the this.</param>
            <returns>PropertyBinding.</returns>
        </member>
        <member name="F:Starcounter.Binding.BindingBuilder.doublePropertyBindingBaseType">
            <summary>
            The double property binding base type
            </summary>
        </member>
        <member name="F:Starcounter.Binding.BindingBuilder.doublePropertyBindingReturnType">
            <summary>
            The double property binding return type
            </summary>
        </member>
        <member name="F:Starcounter.Binding.BindingBuilder.nullableDoublePropertyBindingReturnType">
            <summary>
            The nullable double property binding return type
            </summary>
        </member>
        <member name="M:Starcounter.Binding.BindingBuilder.CreateDoublePropertyBinding(Starcounter.Binding.PropertyDef,System.Type)">
            <summary>
            Creates the double property binding.
            </summary>
            <param name="propertyDef">The property def.</param>
            <param name="thisType">Type of the this.</param>
            <returns>PropertyBinding.</returns>
        </member>
        <member name="F:Starcounter.Binding.BindingBuilder.singlePropertyBindingBaseType">
            <summary>
            The single property binding base type
            </summary>
        </member>
        <member name="F:Starcounter.Binding.BindingBuilder.singlePropertyBindingReturnType">
            <summary>
            The single property binding return type
            </summary>
        </member>
        <member name="F:Starcounter.Binding.BindingBuilder.nullableSinglePropertyBindingReturnType">
            <summary>
            The nullable single property binding return type
            </summary>
        </member>
        <member name="M:Starcounter.Binding.BindingBuilder.CreateSinglePropertyBinding(Starcounter.Binding.PropertyDef,System.Type)">
            <summary>
            Creates the single property binding.
            </summary>
            <param name="propertyDef">The property def.</param>
            <param name="thisType">Type of the this.</param>
            <returns>PropertyBinding.</returns>
        </member>
        <member name="F:Starcounter.Binding.BindingBuilder.objectPropertyBindingBaseType">
            <summary>
            The object property binding base type
            </summary>
        </member>
        <member name="F:Starcounter.Binding.BindingBuilder.objectPropertyBindingReturnType">
            <summary>
            The object property binding return type
            </summary>
        </member>
        <member name="M:Starcounter.Binding.BindingBuilder.CreateObjectPropertyBinding(Starcounter.Binding.PropertyDef,System.Type)">
            <summary>
            Creates the object property binding.
            </summary>
            <param name="propertyDef">The property def.</param>
            <param name="thisType">Type of the this.</param>
            <returns>PropertyBinding.</returns>
        </member>
        <member name="F:Starcounter.Binding.BindingBuilder.int8PropertyBindingBaseType">
            <summary>
            The int8 property binding base type
            </summary>
        </member>
        <member name="F:Starcounter.Binding.BindingBuilder.int8PropertyBindingReturnType">
            <summary>
            The int8 property binding return type
            </summary>
        </member>
        <member name="F:Starcounter.Binding.BindingBuilder.nullableInt8PropertyBindingReturnType">
            <summary>
            The nullable int8 property binding return type
            </summary>
        </member>
        <member name="M:Starcounter.Binding.BindingBuilder.CreateSBytePropertyBinding(Starcounter.Binding.PropertyDef,System.Type)">
            <summary>
            Creates the S byte property binding.
            </summary>
            <param name="propertyDef">The property def.</param>
            <param name="thisType">Type of the this.</param>
            <returns>PropertyBinding.</returns>
        </member>
        <member name="F:Starcounter.Binding.BindingBuilder.int16PropertyBindingBaseType">
            <summary>
            The int16 property binding base type
            </summary>
        </member>
        <member name="F:Starcounter.Binding.BindingBuilder.int16PropertyBindingReturnType">
            <summary>
            The int16 property binding return type
            </summary>
        </member>
        <member name="F:Starcounter.Binding.BindingBuilder.nullableInt16PropertyBindingReturnType">
            <summary>
            The nullable int16 property binding return type
            </summary>
        </member>
        <member name="M:Starcounter.Binding.BindingBuilder.CreateInt16PropertyBinding(Starcounter.Binding.PropertyDef,System.Type)">
            <summary>
            Creates the int16 property binding.
            </summary>
            <param name="propertyDef">The property def.</param>
            <param name="thisType">Type of the this.</param>
            <returns>PropertyBinding.</returns>
        </member>
        <member name="F:Starcounter.Binding.BindingBuilder.int32PropertyBindingBaseType">
            <summary>
            The int32 property binding base type
            </summary>
        </member>
        <member name="F:Starcounter.Binding.BindingBuilder.int32PropertyBindingReturnType">
            <summary>
            The int32 property binding return type
            </summary>
        </member>
        <member name="F:Starcounter.Binding.BindingBuilder.nullableInt32PropertyBindingReturnType">
            <summary>
            The nullable int32 property binding return type
            </summary>
        </member>
        <member name="M:Starcounter.Binding.BindingBuilder.CreateInt32PropertyBinding(Starcounter.Binding.PropertyDef,System.Type)">
            <summary>
            Creates the int32 property binding.
            </summary>
            <param name="propertyDef">The property def.</param>
            <param name="thisType">Type of the this.</param>
            <returns>PropertyBinding.</returns>
        </member>
        <member name="F:Starcounter.Binding.BindingBuilder.int64PropertyBindingBaseType">
            <summary>
            The int64 property binding base type
            </summary>
        </member>
        <member name="F:Starcounter.Binding.BindingBuilder.int64PropertyBindingReturnType">
            <summary>
            The int64 property binding return type
            </summary>
        </member>
        <member name="F:Starcounter.Binding.BindingBuilder.nullableInt64PropertyBindingReturnType">
            <summary>
            The nullable int64 property binding return type
            </summary>
        </member>
        <member name="M:Starcounter.Binding.BindingBuilder.CreateInt64PropertyBinding(Starcounter.Binding.PropertyDef,System.Type)">
            <summary>
            Creates the int64 property binding.
            </summary>
            <param name="propertyDef">The property def.</param>
            <param name="thisType">Type of the this.</param>
            <returns>PropertyBinding.</returns>
        </member>
        <member name="F:Starcounter.Binding.BindingBuilder.stringPropertyBindingBaseType">
            <summary>
            The string property binding base type
            </summary>
        </member>
        <member name="F:Starcounter.Binding.BindingBuilder.stringPropertyBindingReturnType">
            <summary>
            The string property binding return type
            </summary>
        </member>
        <member name="M:Starcounter.Binding.BindingBuilder.CreateStringPropertyBinding(Starcounter.Binding.PropertyDef,System.Type)">
            <summary>
            Creates the string property binding.
            </summary>
            <param name="propertyDef">The property def.</param>
            <param name="thisType">Type of the this.</param>
            <returns>PropertyBinding.</returns>
        </member>
        <member name="F:Starcounter.Binding.BindingBuilder.uint8PropertyBindingBaseType">
            <summary>
            The uint8 property binding base type
            </summary>
        </member>
        <member name="F:Starcounter.Binding.BindingBuilder.uint8PropertyBindingReturnType">
            <summary>
            The uint8 property binding return type
            </summary>
        </member>
        <member name="F:Starcounter.Binding.BindingBuilder.nullableUint8PropertyBindingReturnType">
            <summary>
            The nullable uint8 property binding return type
            </summary>
        </member>
        <member name="M:Starcounter.Binding.BindingBuilder.CreateBytePropertyBinding(Starcounter.Binding.PropertyDef,System.Type)">
            <summary>
            Creates the byte property binding.
            </summary>
            <param name="propertyDef">The property def.</param>
            <param name="thisType">Type of the this.</param>
            <returns>PropertyBinding.</returns>
        </member>
        <member name="F:Starcounter.Binding.BindingBuilder.uint16PropertyBindingBaseType">
            <summary>
            The uint16 property binding base type
            </summary>
        </member>
        <member name="F:Starcounter.Binding.BindingBuilder.uint16PropertyBindingReturnType">
            <summary>
            The uint16 property binding return type
            </summary>
        </member>
        <member name="F:Starcounter.Binding.BindingBuilder.nullableUint16PropertyBindingReturnType">
            <summary>
            The nullable uint16 property binding return type
            </summary>
        </member>
        <member name="M:Starcounter.Binding.BindingBuilder.CreateUInt16PropertyBinding(Starcounter.Binding.PropertyDef,System.Type)">
            <summary>
            Creates the U int16 property binding.
            </summary>
            <param name="propertyDef">The property def.</param>
            <param name="thisType">Type of the this.</param>
            <returns>PropertyBinding.</returns>
        </member>
        <member name="F:Starcounter.Binding.BindingBuilder.uint32PropertyBindingBaseType">
            <summary>
            The uint32 property binding base type
            </summary>
        </member>
        <member name="F:Starcounter.Binding.BindingBuilder.uint32PropertyBindingReturnType">
            <summary>
            The uint32 property binding return type
            </summary>
        </member>
        <member name="F:Starcounter.Binding.BindingBuilder.nullableUint32PropertyBindingReturnType">
            <summary>
            The nullable uint32 property binding return type
            </summary>
        </member>
        <member name="M:Starcounter.Binding.BindingBuilder.CreateUInt32PropertyBinding(Starcounter.Binding.PropertyDef,System.Type)">
            <summary>
            Creates the U int32 property binding.
            </summary>
            <param name="propertyDef">The property def.</param>
            <param name="thisType">Type of the this.</param>
            <returns>PropertyBinding.</returns>
        </member>
        <member name="F:Starcounter.Binding.BindingBuilder.uint64PropertyBindingBaseType">
            <summary>
            The uint64 property binding base type
            </summary>
        </member>
        <member name="F:Starcounter.Binding.BindingBuilder.uint64PropertyBindingReturnType">
            <summary>
            The uint64 property binding return type
            </summary>
        </member>
        <member name="F:Starcounter.Binding.BindingBuilder.nullableUint64PropertyBindingReturnType">
            <summary>
            The nullable uint64 property binding return type
            </summary>
        </member>
        <member name="M:Starcounter.Binding.BindingBuilder.CreateUInt64PropertyBinding(Starcounter.Binding.PropertyDef,System.Type)">
            <summary>
            Creates the U int64 property binding.
            </summary>
            <param name="propertyDef">The property def.</param>
            <param name="thisType">Type of the this.</param>
            <returns>PropertyBinding.</returns>
        </member>
        <member name="F:Starcounter.Binding.BindingBuilder.binaryPropertyBindingBaseType">
            <summary>
            The binary property binding base type
            </summary>
        </member>
        <member name="F:Starcounter.Binding.BindingBuilder.binaryPropertyBindingReturnType">
            <summary>
            The binary property binding return type
            </summary>
        </member>
        <member name="M:Starcounter.Binding.BindingBuilder.CreateBinaryPropertyBinding(Starcounter.Binding.PropertyDef,System.Type)">
            <summary>
            Creates the binary property binding.
            </summary>
            <param name="propertyDef">The property def.</param>
            <param name="thisType">Type of the this.</param>
            <returns>PropertyBinding.</returns>
        </member>
        <member name="M:Starcounter.Binding.BindingBuilder.GeneratePropertyBindingDefault(Starcounter.Binding.PropertyDef,System.Type,System.String,System.Type,System.Type,System.Type)">
            <summary>
            Generates the property binding default.
            </summary>
            <param name="propertyDef">The property def.</param>
            <param name="bindingBaseType">Type of the binding base.</param>
            <param name="methodName">Name of the method.</param>
            <param name="returnType">Type of the return.</param>
            <param name="nullableReturnType">Type of the nullable return.</param>
            <param name="thisType">Type of the this.</param>
            <returns>PropertyBinding.</returns>
        </member>
        <member name="F:Starcounter.Binding.BindingBuilder.propertyBindingGetParams">
            <summary>
            The property binding get params
            </summary>
        </member>
        <member name="M:Starcounter.Binding.BindingBuilder.GeneratePropertyBindingDefault(System.Reflection.Emit.TypeBuilder,System.String,System.Type,System.Type,System.Type,System.Reflection.PropertyInfo)">
            <summary>
            Generates the property binding default.
            </summary>
            <param name="typeBuilder">The type builder.</param>
            <param name="methodName">Name of the method.</param>
            <param name="implReturnType">Type of the impl return.</param>
            <param name="targetReturnType">Type of the target return.</param>
            <param name="thisType">Type of the this.</param>
            <param name="propertyInfo">The property info.</param>
        </member>
        <member name="M:Starcounter.Binding.BindingBuilder.GeneratePropertyBindingDefaultNullable(System.Reflection.Emit.TypeBuilder,System.String,System.Type,System.Type,System.Reflection.PropertyInfo)">
            <summary>
            Generates the property binding default nullable.
            </summary>
            <param name="typeBuilder">The type builder.</param>
            <param name="methodName">Name of the method.</param>
            <param name="returnType">Type of the return.</param>
            <param name="thisType">Type of the this.</param>
            <param name="propertyInfo">The property info.</param>
        </member>
        <member name="M:Starcounter.Binding.BindingBuilder.GeneratePropertyBindingNoNullOut(Starcounter.Binding.PropertyDef,System.Type,System.String,System.Type,System.Type)">
            <summary>
            Generates the property binding no null out.
            </summary>
            <param name="propertyDef">The property def.</param>
            <param name="bindingBaseType">Type of the binding base.</param>
            <param name="methodName">Name of the method.</param>
            <param name="returnType">Type of the return.</param>
            <param name="thisType">Type of the this.</param>
            <returns>PropertyBinding.</returns>
        </member>
        <member name="M:Starcounter.Binding.BindingBuilder.GeneratePropertyBindingNoNullOut(System.Reflection.Emit.TypeBuilder,System.String,System.Type,System.Type,System.Reflection.PropertyInfo)">
            <summary>
            Generates the property binding no null out.
            </summary>
            <param name="typeBuilder">The type builder.</param>
            <param name="methodName">Name of the method.</param>
            <param name="returnType">Type of the return.</param>
            <param name="thisType">Type of the this.</param>
            <param name="propertyInfo">The property info.</param>
        </member>
        <member name="M:Starcounter.Binding.BindingBuilder.VerifyProperty(System.Reflection.PropertyInfo,System.Type)">
            <summary>
            Verifies the property.
            </summary>
            <remarks>
            This method assumes that the propertyinfo is not null. Handling of
            cases where property is null should be done before calling.
            </remarks>
            <param name="propertyInfo">The property info.</param>
            <param name="returnType">Type of the return.</param>
        </member>
        <member name="M:Starcounter.Binding.BindingBuilder.VerifyObjectProperty(System.Reflection.PropertyInfo)">
            <summary>
            Verifies the object property.
            </summary>
            <param name="propertyInfo">The property info.</param>
        </member>
        <member name="T:Starcounter.Binding.BooleanPropertyBinding">
            <summary>
            Class BooleanPropertyBinding
            </summary>
        </member>
        <member name="P:Starcounter.Binding.BooleanPropertyBinding.TypeCode">
            <summary>
            Gets the type code.
            </summary>
            <value>The type code.</value>
        </member>
        <member name="M:Starcounter.Binding.BooleanPropertyBinding.DoGetBinary(System.Object)">
            <summary>
            Gets the value of a binary attribute
            </summary>
            <param name="obj">The obj.</param>
            <returns>Binary.</returns>
        </member>
        <member name="M:Starcounter.Binding.BooleanPropertyBinding.DoGetByte(System.Object)">
            <summary>
            Gets the value of an integer attribute as a 8-bits unsigned integer.
            </summary>
            <param name="obj">The obj.</param>
            <returns>System.Nullable{Byte}.</returns>
        </member>
        <member name="M:Starcounter.Binding.BooleanPropertyBinding.DoGetDateTime(System.Object)">
            <summary>
            Gets the value of a timestamp attribute.
            </summary>
            <param name="obj">The obj.</param>
            <returns>System.Nullable{DateTime}.</returns>
        </member>
        <member name="M:Starcounter.Binding.BooleanPropertyBinding.DoGetDecimal(System.Object)">
            <summary>
            Gets the value of a decimal attribute.
            </summary>
            <param name="obj">The obj.</param>
            <returns>System.Nullable{Decimal}.</returns>
        </member>
        <member name="M:Starcounter.Binding.BooleanPropertyBinding.DoGetDouble(System.Object)">
            <summary>
            Gets the value of a 64-bits floating point attribute.
            </summary>
            <param name="obj">The obj.</param>
            <returns>System.Nullable{Double}.</returns>
        </member>
        <member name="M:Starcounter.Binding.BooleanPropertyBinding.DoGetInt16(System.Object)">
            <summary>
            Gets the value of an integer attribute as a 16-bits signed integer.
            </summary>
            <param name="obj">The obj.</param>
            <returns>System.Nullable{Int16}.</returns>
        </member>
        <member name="M:Starcounter.Binding.BooleanPropertyBinding.DoGetInt32(System.Object)">
            <summary>
            Gets the value of an integer attribute as a 32-bits signed integer.
            </summary>
            <param name="obj">The obj.</param>
            <returns>System.Nullable{Int32}.</returns>
        </member>
        <member name="M:Starcounter.Binding.BooleanPropertyBinding.DoGetInt64(System.Object)">
            <summary>
            Gets the value of an integer attribute as a 64-bits signed integer.
            </summary>
            <param name="obj">The obj.</param>
            <returns>System.Nullable{Int64}.</returns>
        </member>
        <member name="M:Starcounter.Binding.BooleanPropertyBinding.DoGetObject(System.Object)">
            <summary>
            Gets the value of a reference attribute.
            </summary>
            <param name="obj">The obj.</param>
            <returns>Entity.</returns>
        </member>
        <member name="M:Starcounter.Binding.BooleanPropertyBinding.DoGetSByte(System.Object)">
            <summary>
            Gets the value of an integer attribute as a 8-bits signed integer.
            </summary>
            <param name="obj">The obj.</param>
            <returns>System.Nullable{SByte}.</returns>
        </member>
        <member name="M:Starcounter.Binding.BooleanPropertyBinding.DoGetSingle(System.Object)">
            <summary>
            Gets the value of a 32-bits floating point attribute.
            </summary>
            <param name="obj">The obj.</param>
            <returns>System.Nullable{Single}.</returns>
        </member>
        <member name="M:Starcounter.Binding.BooleanPropertyBinding.DoGetString(System.Object)">
            <summary>
            Gets the value of a string attribute.
            </summary>
            <param name="obj">The obj.</param>
            <returns>String.</returns>
        </member>
        <member name="M:Starcounter.Binding.BooleanPropertyBinding.DoGetUInt16(System.Object)">
            <summary>
            Gets the value of an integer attribute as a 16-bits unsigned integer.
            </summary>
            <param name="obj">The obj.</param>
            <returns>System.Nullable{UInt16}.</returns>
        </member>
        <member name="M:Starcounter.Binding.BooleanPropertyBinding.DoGetUInt32(System.Object)">
            <summary>
            Gets the value of an integer attribute as a 32-bits unsigned integer.
            </summary>
            <param name="obj">The obj.</param>
            <returns>System.Nullable{UInt32}.</returns>
        </member>
        <member name="M:Starcounter.Binding.BooleanPropertyBinding.DoGetUInt64(System.Object)">
            <summary>
            Gets the value of an integer attribute as a 64-bits unsigned integer.
            </summary>
            <param name="obj">The obj.</param>
            <returns>System.Nullable{UInt64}.</returns>
        </member>
        <member name="M:Starcounter.Binding.BooleanPropertyBinding.ExceptionForInvalidType">
            <summary>
            Exceptions the type of for invalid.
            </summary>
            <returns>Exception.</returns>
            <exception cref="T:System.NotSupportedException">Attempt to access a boolean attribute as something other then a boolean attribute.</exception>
        </member>
        <member name="T:Starcounter.Binding.BytePropertyBinding">
            <summary>
            Class BytePropertyBinding
            </summary>
        </member>
        <member name="P:Starcounter.Binding.BytePropertyBinding.TypeCode">
            <summary>
            Gets the type code.
            </summary>
            <value>The type code.</value>
        </member>
        <member name="M:Starcounter.Binding.BytePropertyBinding.DoGetInt16(System.Object)">
            <summary>
            Gets the value of an integer attribute as a 16-bits signed integer.
            </summary>
            <param name="obj">The obj.</param>
            <returns>System.Nullable{Int16}.</returns>
        </member>
        <member name="M:Starcounter.Binding.BytePropertyBinding.DoGetInt32(System.Object)">
            <summary>
            Gets the value of an integer attribute as a 32-bits signed integer.
            </summary>
            <param name="obj">The obj.</param>
            <returns>System.Nullable{Int32}.</returns>
        </member>
        <member name="M:Starcounter.Binding.BytePropertyBinding.DoGetInt64(System.Object)">
            <summary>
            Gets the value of an integer attribute as a 64-bits signed integer.
            </summary>
            <param name="obj">The obj.</param>
            <returns>System.Nullable{Int64}.</returns>
        </member>
        <member name="M:Starcounter.Binding.BytePropertyBinding.DoGetUInt16(System.Object)">
            <summary>
            Gets the value of an integer attribute as a 16-bits unsigned integer.
            </summary>
            <param name="obj">The obj.</param>
            <returns>System.Nullable{UInt16}.</returns>
        </member>
        <member name="M:Starcounter.Binding.BytePropertyBinding.DoGetUInt32(System.Object)">
            <summary>
            Gets the value of an integer attribute as a 32-bits unsigned integer.
            </summary>
            <param name="obj">The obj.</param>
            <returns>System.Nullable{UInt32}.</returns>
        </member>
        <member name="M:Starcounter.Binding.BytePropertyBinding.DoGetUInt64(System.Object)">
            <summary>
            Gets the value of an integer attribute as a 64-bits unsigned integer.
            </summary>
            <param name="obj">The obj.</param>
            <returns>System.Nullable{UInt64}.</returns>
        </member>
        <member name="T:Starcounter.Binding.DotNetBindingHelpers">
            <summary>
            Expose some utility code used when binding .NET code to
            Starcounter.
            </summary>
        </member>
        <member name="T:Starcounter.Binding.DotNetBindingHelpers.CSharp">
            <summary>
            Expose utility code for binding stuff relating to the
            C# langauge.
            </summary>
        </member>
        <member name="M:Starcounter.Binding.DotNetBindingHelpers.CSharp.GetAutoImplementedBackingFieldName(System.String)">
            <summary>
            Gets the name of the backing field generated by the C# compiler
            to back up an auto-implemented property, given it's property name.
            </summary>
            <param name="propertyName">The name of the property whose backing
            field name should be returned.</param>
            <returns>The backing field name for the given property.</returns>
        </member>
        <member name="M:Starcounter.Binding.DotNetBindingHelpers.CSharp.BackingFieldNameToPropertyName(System.String)">
            <summary>
            Gets the washed property name from a given backing field name,
            emitted by the compiler for an auto-implemented property.
            </summary>
            <remarks>
            If the backing field name supplied doesn't match the decoration
            used for backing fields, the name is returned as-is.
            </remarks>
            <param name="backingFieldName">The backing field name.</param>
            <returns>The name of the auto-implemented property being backed.
            </returns>
        </member>
        <member name="M:Starcounter.Binding.DotNetBindingHelpers.CSharp.IsPropertyBackingField(System.String)">
            <summary>
            Return <c>true</c> if the given name of a field is a backing field of
            an auto-implemented property.
            </summary>
            <param name="fieldName"></param>
            <returns></returns>
        </member>
        <member name="T:Starcounter.Binding.IObjectProxy">
            <summary>
            Expose a low-level state related interface to managed database
            objects. A proxy is a view with a small additional API to allow
            modification of the underlying state.
            </summary>
        </member>
        <member name="T:Starcounter.Binding.TableCreate">
            <summary>
            
            </summary>
        </member>
        <member name="M:Starcounter.Binding.TableCreate.#ctor(Starcounter.Binding.TableDef,Starcounter.Binding.TypeDef)">
            <summary>
            Initializes a new instance of the <see cref="T:Starcounter.Binding.TableCreate" /> class.
            </summary>
            <param name="tableDef">The definition for the table to create.</param>
            <param name="typeDef">The definition of the type that the table is based on.</param>
            <remarks>
            The type definition is used to provide additional information to the metalayer when the table 
            to create contains columns with reference values. The type definition can be omitted, with 
            the effect that the extra typeinformation will not be set, but the creation will still go through.
            </remarks>
        </member>
        <member name="M:Starcounter.Binding.TableCreate.Eval">
            <summary>
            Evaluates and creates the table.
            </summary>
            <returns>The created table</returns>
        </member>
        <member name="T:Starcounter.Binding.ObjectPropertyBinding">
            <summary>
            Class ObjectPropertyBinding
            </summary>
        </member>
        <member name="F:Starcounter.Binding.ObjectPropertyBinding.targetTypeBinding_">
            <summary>
            The target type binding_
            </summary>
        </member>
        <member name="F:Starcounter.Binding.ObjectPropertyBinding.targetTypeName_">
            <summary>
            The target type name_
            </summary>
        </member>
        <member name="P:Starcounter.Binding.ObjectPropertyBinding.TypeCode">
            <summary>
            Gets the type code.
            </summary>
            <value>The type code.</value>
        </member>
        <member name="P:Starcounter.Binding.ObjectPropertyBinding.TypeBinding">
            <summary>
            Gets the type binding.
            </summary>
            <value>The type binding.</value>
        </member>
        <member name="M:Starcounter.Binding.ObjectPropertyBinding.DoGetBinary(System.Object)">
            <summary>
            Gets the value of a binary attribute
            </summary>
            <param name="obj">The obj.</param>
            <returns>Binary.</returns>
        </member>
        <member name="M:Starcounter.Binding.ObjectPropertyBinding.DoGetBoolean(System.Object)">
            <summary>
            Gets the value of a boolean attribute.
            </summary>
            <param name="obj">The obj.</param>
            <returns>System.Nullable{Boolean}.</returns>
        </member>
        <member name="M:Starcounter.Binding.ObjectPropertyBinding.DoGetByte(System.Object)">
            <summary>
            Gets the value of an integer attribute as a 8-bits unsigned integer.
            </summary>
            <param name="obj">The obj.</param>
            <returns>System.Nullable{Byte}.</returns>
        </member>
        <member name="M:Starcounter.Binding.ObjectPropertyBinding.DoGetDateTime(System.Object)">
            <summary>
            Gets the value of a timestamp attribute.
            </summary>
            <param name="obj">The obj.</param>
            <returns>System.Nullable{DateTime}.</returns>
        </member>
        <member name="M:Starcounter.Binding.ObjectPropertyBinding.DoGetDecimal(System.Object)">
            <summary>
            Gets the value of a decimal attribute.
            </summary>
            <param name="obj">The obj.</param>
            <returns>System.Nullable{Decimal}.</returns>
        </member>
        <member name="M:Starcounter.Binding.ObjectPropertyBinding.DoGetDouble(System.Object)">
            <summary>
            Gets the value of a 64-bits floating point attribute.
            </summary>
            <param name="obj">The obj.</param>
            <returns>System.Nullable{Double}.</returns>
        </member>
        <member name="M:Starcounter.Binding.ObjectPropertyBinding.DoGetInt16(System.Object)">
            <summary>
            Gets the value of an integer attribute as a 16-bits signed integer.
            </summary>
            <param name="obj">The obj.</param>
            <returns>System.Nullable{Int16}.</returns>
        </member>
        <member name="M:Starcounter.Binding.ObjectPropertyBinding.DoGetInt32(System.Object)">
            <summary>
            Gets the value of an integer attribute as a 32-bits signed integer.
            </summary>
            <param name="obj">The obj.</param>
            <returns>System.Nullable{Int32}.</returns>
        </member>
        <member name="M:Starcounter.Binding.ObjectPropertyBinding.DoGetInt64(System.Object)">
            <summary>
            Gets the value of an integer attribute as a 64-bits signed integer.
            </summary>
            <param name="obj">The obj.</param>
            <returns>System.Nullable{Int64}.</returns>
        </member>
        <member name="M:Starcounter.Binding.ObjectPropertyBinding.DoGetSByte(System.Object)">
            <summary>
            Gets the value of an integer attribute as a 8-bits signed integer.
            </summary>
            <param name="obj">The obj.</param>
            <returns>System.Nullable{SByte}.</returns>
        </member>
        <member name="M:Starcounter.Binding.ObjectPropertyBinding.DoGetSingle(System.Object)">
            <summary>
            Gets the value of a 32-bits floating point attribute.
            </summary>
            <param name="obj">The obj.</param>
            <returns>System.Nullable{Single}.</returns>
        </member>
        <member name="M:Starcounter.Binding.ObjectPropertyBinding.DoGetString(System.Object)">
            <summary>
            Gets the value of a string attribute.
            </summary>
            <param name="obj">The obj.</param>
            <returns>String.</returns>
        </member>
        <member name="M:Starcounter.Binding.ObjectPropertyBinding.DoGetUInt16(System.Object)">
            <summary>
            Gets the value of an integer attribute as a 16-bits unsigned integer.
            </summary>
            <param name="obj">The obj.</param>
            <returns>System.Nullable{UInt16}.</returns>
        </member>
        <member name="M:Starcounter.Binding.ObjectPropertyBinding.DoGetUInt32(System.Object)">
            <summary>
            Gets the value of an integer attribute as a 32-bits unsigned integer.
            </summary>
            <param name="obj">The obj.</param>
            <returns>System.Nullable{UInt32}.</returns>
        </member>
        <member name="M:Starcounter.Binding.ObjectPropertyBinding.DoGetUInt64(System.Object)">
            <summary>
            Gets the value of an integer attribute as a 64-bits unsigned integer.
            </summary>
            <param name="obj">The obj.</param>
            <returns>System.Nullable{UInt64}.</returns>
        </member>
        <member name="M:Starcounter.Binding.ObjectPropertyBinding.SetTargetTypeName(System.String)">
            <summary>
            Sets the name of the target type.
            </summary>
            <param name="targetTypeName">Name of the target type.</param>
        </member>
        <member name="M:Starcounter.Binding.ObjectPropertyBinding.ExceptionForInvalidType">
            <summary>
            Exceptions the type of for invalid.
            </summary>
            <returns>Exception.</returns>
            <exception cref="T:System.NotSupportedException">Attempt to access a reference attribute as something other then a reference attribute.</exception>
        </member>
        <member name="M:Starcounter.Binding.ObjectPropertyBinding.LookupTargetTypeBinding">
            <summary>
            Lookups the target type binding.
            </summary>
            <returns>TypeBinding.</returns>
        </member>
        <member name="T:Starcounter.Binding.SinglePropertyBinding">
            <summary>
            Class SinglePropertyBinding
            </summary>
        </member>
        <member name="P:Starcounter.Binding.SinglePropertyBinding.TypeCode">
            <summary>
            Property value type code.
            </summary>
            <value>The type code.</value>
        </member>
        <member name="M:Starcounter.Binding.SinglePropertyBinding.DoGetDouble(System.Object)">
            <summary>
            Gets the value of a 64-bits floating point attribute.
            </summary>
            <param name="obj">The obj.</param>
            <returns>System.Nullable{Double}.</returns>
        </member>
        <member name="T:Starcounter.Binding.DateTimePropertyBinding">
            <summary>
            Class DateTimePropertyBinding
            </summary>
        </member>
        <member name="M:Starcounter.Binding.DateTimePropertyBinding.#ctor">
            <summary>
            Initializes a new instance of the <see cref="T:Starcounter.Binding.DateTimePropertyBinding" /> class.
            </summary>
        </member>
        <member name="P:Starcounter.Binding.DateTimePropertyBinding.TypeCode">
            <summary>
            Gets the type code.
            </summary>
            <value>The type code.</value>
        </member>
        <member name="M:Starcounter.Binding.DateTimePropertyBinding.DoGetBinary(System.Object)">
            <summary>
            Gets the value of a binary attribute
            </summary>
            <param name="obj">The obj.</param>
            <returns>Binary.</returns>
        </member>
        <member name="M:Starcounter.Binding.DateTimePropertyBinding.DoGetBoolean(System.Object)">
            <summary>
            Gets the value of a boolean attribute.
            </summary>
            <param name="obj">The obj.</param>
            <returns>System.Nullable{Boolean}.</returns>
        </member>
        <member name="M:Starcounter.Binding.DateTimePropertyBinding.DoGetByte(System.Object)">
            <summary>
            Gets the value of an integer attribute as a 8-bits unsigned integer.
            </summary>
            <param name="obj">The obj.</param>
            <returns>System.Nullable{Byte}.</returns>
        </member>
        <member name="M:Starcounter.Binding.DateTimePropertyBinding.DoGetDecimal(System.Object)">
            <summary>
            Gets the value of a decimal attribute.
            </summary>
            <param name="obj">The obj.</param>
            <returns>System.Nullable{Decimal}.</returns>
        </member>
        <member name="M:Starcounter.Binding.DateTimePropertyBinding.DoGetDouble(System.Object)">
            <summary>
            Gets the value of a 64-bits floating point attribute.
            </summary>
            <param name="obj">The obj.</param>
            <returns>System.Nullable{Double}.</returns>
        </member>
        <member name="M:Starcounter.Binding.DateTimePropertyBinding.DoGetInt16(System.Object)">
            <summary>
            Gets the value of an integer attribute as a 16-bits signed integer.
            </summary>
            <param name="obj">The obj.</param>
            <returns>System.Nullable{Int16}.</returns>
        </member>
        <member name="M:Starcounter.Binding.DateTimePropertyBinding.DoGetInt32(System.Object)">
            <summary>
            Gets the value of an integer attribute as a 32-bits signed integer.
            </summary>
            <param name="obj">The obj.</param>
            <returns>System.Nullable{Int32}.</returns>
        </member>
        <member name="M:Starcounter.Binding.DateTimePropertyBinding.DoGetInt64(System.Object)">
            <summary>
            Gets the value of an integer attribute as a 64-bits signed integer.
            </summary>
            <param name="obj">The obj.</param>
            <returns>System.Nullable{Int64}.</returns>
        </member>
        <member name="M:Starcounter.Binding.DateTimePropertyBinding.DoGetObject(System.Object)">
            <summary>
            Gets the value of a reference attribute.
            </summary>
            <param name="obj">The obj.</param>
            <returns>Entity.</returns>
        </member>
        <member name="M:Starcounter.Binding.DateTimePropertyBinding.DoGetSByte(System.Object)">
            <summary>
            Gets the value of an integer attribute as a 8-bits signed integer.
            </summary>
            <param name="obj">The obj.</param>
            <returns>System.Nullable{SByte}.</returns>
        </member>
        <member name="M:Starcounter.Binding.DateTimePropertyBinding.DoGetSingle(System.Object)">
            <summary>
            Gets the value of a 32-bits floating point attribute.
            </summary>
            <param name="obj">The obj.</param>
            <returns>System.Nullable{Single}.</returns>
        </member>
        <member name="M:Starcounter.Binding.DateTimePropertyBinding.DoGetString(System.Object)">
            <summary>
            Gets the value of a string attribute.
            </summary>
            <param name="obj">The obj.</param>
            <returns>String.</returns>
        </member>
        <member name="M:Starcounter.Binding.DateTimePropertyBinding.DoGetUInt16(System.Object)">
            <summary>
            Gets the value of an integer attribute as a 16-bits unsigned integer.
            </summary>
            <param name="obj">The obj.</param>
            <returns>System.Nullable{UInt16}.</returns>
        </member>
        <member name="M:Starcounter.Binding.DateTimePropertyBinding.DoGetUInt32(System.Object)">
            <summary>
            Gets the value of an integer attribute as a 32-bits unsigned integer.
            </summary>
            <param name="obj">The obj.</param>
            <returns>System.Nullable{UInt32}.</returns>
        </member>
        <member name="M:Starcounter.Binding.DateTimePropertyBinding.DoGetUInt64(System.Object)">
            <summary>
            Gets the value of an integer attribute as a 64-bits unsigned integer.
            </summary>
            <param name="obj">The obj.</param>
            <returns>System.Nullable{UInt64}.</returns>
        </member>
        <member name="M:Starcounter.Binding.DateTimePropertyBinding.ExceptionForInvalidType">
            <summary>
            Exceptions the type of for invalid.
            </summary>
            <returns>Exception.</returns>
            <exception cref="T:System.NotSupportedException">Attempt to access a date-time attribute as something other then a date-time attribute.</exception>
        </member>
        <member name="T:Starcounter.Binding.DecimalPropertyBinding">
            <summary>
            Class DecimalPropertyBinding
            </summary>
        </member>
        <member name="P:Starcounter.Binding.DecimalPropertyBinding.TypeCode">
            <summary>
            Gets the type code.
            </summary>
            <value>The type code.</value>
        </member>
        <member name="M:Starcounter.Binding.DecimalPropertyBinding.DoGetBinary(System.Object)">
            <summary>
            Gets the value of a binary attribute
            </summary>
            <param name="obj">The obj.</param>
            <returns>Binary.</returns>
        </member>
        <member name="M:Starcounter.Binding.DecimalPropertyBinding.DoGetBoolean(System.Object)">
            <summary>
            Gets the value of a boolean attribute.
            </summary>
            <param name="obj">The obj.</param>
            <returns>System.Nullable{Boolean}.</returns>
        </member>
        <member name="M:Starcounter.Binding.DecimalPropertyBinding.DoGetByte(System.Object)">
            <summary>
            Gets the value of an integer attribute as a 8-bits unsigned integer.
            </summary>
            <param name="obj">The obj.</param>
            <returns>System.Nullable{Byte}.</returns>
        </member>
        <member name="M:Starcounter.Binding.DecimalPropertyBinding.DoGetDateTime(System.Object)">
            <summary>
            Gets the value of a timestamp attribute.
            </summary>
            <param name="obj">The obj.</param>
            <returns>System.Nullable{DateTime}.</returns>
        </member>
        <member name="M:Starcounter.Binding.DecimalPropertyBinding.DoGetDouble(System.Object)">
            <summary>
            Gets the value of a 64-bits floating point attribute.
            </summary>
            <param name="obj">The obj.</param>
            <returns>System.Nullable{Double}.</returns>
        </member>
        <member name="M:Starcounter.Binding.DecimalPropertyBinding.DoGetInt16(System.Object)">
            <summary>
            Gets the value of an integer attribute as a 16-bits signed integer.
            </summary>
            <param name="obj">The obj.</param>
            <returns>System.Nullable{Int16}.</returns>
        </member>
        <member name="M:Starcounter.Binding.DecimalPropertyBinding.DoGetInt32(System.Object)">
            <summary>
            Gets the value of an integer attribute as a 32-bits signed integer.
            </summary>
            <param name="obj">The obj.</param>
            <returns>System.Nullable{Int32}.</returns>
        </member>
        <member name="M:Starcounter.Binding.DecimalPropertyBinding.DoGetInt64(System.Object)">
            <summary>
            Gets the value of an integer attribute as a 64-bits signed integer.
            </summary>
            <param name="obj">The obj.</param>
            <returns>System.Nullable{Int64}.</returns>
        </member>
        <member name="M:Starcounter.Binding.DecimalPropertyBinding.DoGetObject(System.Object)">
            <summary>
            Gets the value of a reference attribute.
            </summary>
            <param name="obj">The obj.</param>
            <returns>Entity.</returns>
        </member>
        <member name="M:Starcounter.Binding.DecimalPropertyBinding.DoGetSByte(System.Object)">
            <summary>
            Gets the value of an integer attribute as a 8-bits signed integer.
            </summary>
            <param name="obj">The obj.</param>
            <returns>System.Nullable{SByte}.</returns>
        </member>
        <member name="M:Starcounter.Binding.DecimalPropertyBinding.DoGetSingle(System.Object)">
            <summary>
            Gets the value of a 32-bits floating point attribute.
            </summary>
            <param name="obj">The obj.</param>
            <returns>System.Nullable{Single}.</returns>
        </member>
        <member name="M:Starcounter.Binding.DecimalPropertyBinding.DoGetString(System.Object)">
            <summary>
            Gets the value of a string attribute.
            </summary>
            <param name="obj">The obj.</param>
            <returns>String.</returns>
        </member>
        <member name="M:Starcounter.Binding.DecimalPropertyBinding.DoGetUInt16(System.Object)">
            <summary>
            Gets the value of an integer attribute as a 16-bits unsigned integer.
            </summary>
            <param name="obj">The obj.</param>
            <returns>System.Nullable{UInt16}.</returns>
        </member>
        <member name="M:Starcounter.Binding.DecimalPropertyBinding.DoGetUInt32(System.Object)">
            <summary>
            Gets the value of an integer attribute as a 32-bits unsigned integer.
            </summary>
            <param name="obj">The obj.</param>
            <returns>System.Nullable{UInt32}.</returns>
        </member>
        <member name="M:Starcounter.Binding.DecimalPropertyBinding.DoGetUInt64(System.Object)">
            <summary>
            Gets the value of an integer attribute as a 64-bits unsigned integer.
            </summary>
            <param name="obj">The obj.</param>
            <returns>System.Nullable{UInt64}.</returns>
        </member>
        <member name="M:Starcounter.Binding.DecimalPropertyBinding.ExceptionForInvalidType">
            <summary>
            Exceptions the type of for invalid.
            </summary>
            <returns>Exception.</returns>
            <exception cref="T:System.NotSupportedException">Attempt to access a decimal attribute as something other then a decimal attribute.</exception>
        </member>
        <member name="T:Starcounter.Binding.DoublePropertyBinding">
            <summary>
            Class DoublePropertyBinding
            </summary>
        </member>
        <member name="P:Starcounter.Binding.DoublePropertyBinding.TypeCode">
            <summary>
            Gets the type code.
            </summary>
            <value>The type code.</value>
        </member>
        <member name="M:Starcounter.Binding.DoublePropertyBinding.DoGetSingle(System.Object)">
            <summary>
            Gets the value of a 32-bits floating point attribute.
            </summary>
            <param name="obj">The obj.</param>
            <returns>System.Nullable{Single}.</returns>
            <exception cref="T:System.NotSupportedException">Attempt to convert a single to a double.</exception>
        </member>
        <member name="T:Starcounter.Binding.RealPropertyBinding">
            <summary>
            Class RealPropertyBinding
            </summary>
        </member>
        <member name="M:Starcounter.Binding.RealPropertyBinding.DoGetBinary(System.Object)">
            <summary>
            Gets the value of a binary attribute
            </summary>
            <param name="obj">The obj.</param>
            <returns>Binary.</returns>
        </member>
        <member name="M:Starcounter.Binding.RealPropertyBinding.DoGetBoolean(System.Object)">
            <summary>
            Gets the value of a boolean attribute.
            </summary>
            <param name="obj">The obj.</param>
            <returns>System.Nullable{Boolean}.</returns>
        </member>
        <member name="M:Starcounter.Binding.RealPropertyBinding.DoGetByte(System.Object)">
            <summary>
            Gets the value of an integer attribute as a 8-bits unsigned integer.
            </summary>
            <param name="obj">The obj.</param>
            <returns>System.Nullable{Byte}.</returns>
        </member>
        <member name="M:Starcounter.Binding.RealPropertyBinding.DoGetDateTime(System.Object)">
            <summary>
            Gets the value of a timestamp attribute.
            </summary>
            <param name="obj">The obj.</param>
            <returns>System.Nullable{DateTime}.</returns>
        </member>
        <member name="M:Starcounter.Binding.RealPropertyBinding.DoGetDecimal(System.Object)">
            <summary>
            Gets the value of a decimal attribute.
            </summary>
            <param name="obj">The obj.</param>
            <returns>System.Nullable{Decimal}.</returns>
        </member>
        <member name="M:Starcounter.Binding.RealPropertyBinding.DoGetInt16(System.Object)">
            <summary>
            Gets the value of an integer attribute as a 16-bits signed integer.
            </summary>
            <param name="obj">The obj.</param>
            <returns>System.Nullable{Int16}.</returns>
        </member>
        <member name="M:Starcounter.Binding.RealPropertyBinding.DoGetInt32(System.Object)">
            <summary>
            Gets the value of an integer attribute as a 32-bits signed integer.
            </summary>
            <param name="obj">The obj.</param>
            <returns>System.Nullable{Int32}.</returns>
        </member>
        <member name="M:Starcounter.Binding.RealPropertyBinding.DoGetInt64(System.Object)">
            <summary>
            Gets the value of an integer attribute as a 64-bits signed integer.
            </summary>
            <param name="obj">The obj.</param>
            <returns>System.Nullable{Int64}.</returns>
        </member>
        <member name="M:Starcounter.Binding.RealPropertyBinding.DoGetObject(System.Object)">
            <summary>
            Gets the value of a reference attribute.
            </summary>
            <param name="obj">The obj.</param>
            <returns>Entity.</returns>
        </member>
        <member name="M:Starcounter.Binding.RealPropertyBinding.DoGetSByte(System.Object)">
            <summary>
            Gets the value of an integer attribute as a 8-bits signed integer.
            </summary>
            <param name="obj">The obj.</param>
            <returns>System.Nullable{SByte}.</returns>
        </member>
        <member name="M:Starcounter.Binding.RealPropertyBinding.DoGetString(System.Object)">
            <summary>
            Gets the value of a string attribute.
            </summary>
            <param name="obj">The obj.</param>
            <returns>String.</returns>
        </member>
        <member name="M:Starcounter.Binding.RealPropertyBinding.DoGetUInt16(System.Object)">
            <summary>
            Gets the value of an integer attribute as a 16-bits unsigned integer.
            </summary>
            <param name="obj">The obj.</param>
            <returns>System.Nullable{UInt16}.</returns>
        </member>
        <member name="M:Starcounter.Binding.RealPropertyBinding.DoGetUInt32(System.Object)">
            <summary>
            Gets the value of an integer attribute as a 32-bits unsigned integer.
            </summary>
            <param name="obj">The obj.</param>
            <returns>System.Nullable{UInt32}.</returns>
        </member>
        <member name="M:Starcounter.Binding.RealPropertyBinding.DoGetUInt64(System.Object)">
            <summary>
            Gets the value of an integer attribute as a 64-bits unsigned integer.
            </summary>
            <param name="obj">The obj.</param>
            <returns>System.Nullable{UInt64}.</returns>
        </member>
        <member name="M:Starcounter.Binding.RealPropertyBinding.ExceptionForInvalidType">
            <summary>
            Exceptions the type of for invalid.
            </summary>
            <returns>Exception.</returns>
            <exception cref="T:System.NotSupportedException">Attempt to access a real attribute as something other then a real attribute.</exception>
        </member>
        <member name="T:Starcounter.Binding.TableUpgrade">
             <summary>
            
             </summary>
        </member>
        <member name="M:Starcounter.Binding.TableUpgrade.#ctor(System.String,Starcounter.Binding.TableDef,Starcounter.Binding.TableDef,Starcounter.Binding.TypeDef)">
            <summary>
            Initializes a new instance of the <see cref="T:Starcounter.Binding.TableUpgrade" /> class.
            </summary>
            <param name="tableName">Name of the table to upgrade.</param>
            <param name="oldTableDef">The existing definition of the table.</param>
            <param name="newTableDef">The new definition of the table.</param>
            <param name="newTypeDef">The definition of the type that the new table is based on.</param>
            <remarks>
            The type definition is used to provide additional information to the metalayer when the table 
            to upgrade contains a column for a reference value. The type definition can be omitted, with 
            the effect that the extra typeinformation will not be set, but the upgrade will still go through.
            </remarks>
        </member>
        <member name="M:Starcounter.Binding.TableUpgrade.Eval">
            <summary>
            Evaluates and upgrades the table.
            </summary>
            <returns>The new table definition.</returns>
        </member>
        <member name="M:Starcounter.Binding.TableUpgrade.MetalayerAlterTable(System.Collections.Generic.List{Starcounter.Binding.ColumnDef})">
            <summary>
            Creates and populate the structures and information needed and then calls 
            the metalayer to alter the tabledefinition
            </summary>
            <param name="addedCols">The new columns to add</param>
            <returns>A layouthandle for the migrated table</returns>
        </member>
        <member name="M:Starcounter.Binding.TableUpgrade.ThrowColumnsRemovedButNotDropped(System.Collections.Generic.IEnumerable{Starcounter.Binding.ColumnDef})">
            <summary>
            
            </summary>
            <param name="droppedCols"></param>
        </member>
        <member name="M:Starcounter.Binding.TableUpgrade.VerifyColumn(Starcounter.Binding.ColumnDef,Starcounter.Binding.ColumnDef)">
            <summary>
            Verifies that the two columns are considered equal, and if not throws an 
            exception with a proper message describing the deviation.
            </summary>
            <param name="oldCol"></param>
            <param name="newCol"></param>
        </member>
        <member name="M:Starcounter.Binding.TableUpgrade.VerifyTableInheritance(Starcounter.Binding.TableDef,Starcounter.Binding.TableDef)">
            <summary>
            Verifies that the inheritance for the table have not changed. 
            </summary>
            <param name="oldTableDef"></param>
            <param name="newTableDef"></param>
        </member>
        <member name="T:Starcounter.Binding.UInt16PropertyBinding">
            <summary>
            Class UInt16PropertyBinding
            </summary>
        </member>
        <member name="P:Starcounter.Binding.UInt16PropertyBinding.TypeCode">
            <summary>
            Gets the type code.
            </summary>
            <value>The type code.</value>
        </member>
        <member name="M:Starcounter.Binding.UInt16PropertyBinding.DoGetByte(System.Object)">
            <summary>
            Gets the value of an integer attribute as a 8-bits unsigned integer.
            </summary>
            <param name="obj">The obj.</param>
            <returns>System.Nullable{Byte}.</returns>
            <exception cref="T:System.NotSupportedException">Attempt to convert a 16-bit unsigned value to a 8-bit unsigned value.</exception>
        </member>
        <member name="M:Starcounter.Binding.UInt16PropertyBinding.DoGetInt16(System.Object)">
            <summary>
            Gets the value of an integer attribute as a 16-bits signed integer.
            </summary>
            <param name="obj">The obj.</param>
            <returns>System.Nullable{Int16}.</returns>
        </member>
        <member name="M:Starcounter.Binding.UInt16PropertyBinding.DoGetInt32(System.Object)">
            <summary>
            Gets the value of an integer attribute as a 32-bits signed integer.
            </summary>
            <param name="obj">The obj.</param>
            <returns>System.Nullable{Int32}.</returns>
        </member>
        <member name="M:Starcounter.Binding.UInt16PropertyBinding.DoGetInt64(System.Object)">
            <summary>
            Gets the value of an integer attribute as a 64-bits signed integer.
            </summary>
            <param name="obj">The obj.</param>
            <returns>System.Nullable{Int64}.</returns>
        </member>
        <member name="M:Starcounter.Binding.UInt16PropertyBinding.DoGetUInt32(System.Object)">
            <summary>
            Gets the value of an integer attribute as a 32-bits unsigned integer.
            </summary>
            <param name="obj">The obj.</param>
            <returns>System.Nullable{UInt32}.</returns>
        </member>
        <member name="M:Starcounter.Binding.UInt16PropertyBinding.DoGetUInt64(System.Object)">
            <summary>
            Gets the value of an integer attribute as a 64-bits unsigned integer.
            </summary>
            <param name="obj">The obj.</param>
            <returns>System.Nullable{UInt64}.</returns>
        </member>
        <member name="T:Starcounter.Binding.UInt32PropertyBinding">
            <summary>
            Class UInt32PropertyBinding
            </summary>
        </member>
        <member name="P:Starcounter.Binding.UInt32PropertyBinding.TypeCode">
            <summary>
            Gets the type code.
            </summary>
            <value>The type code.</value>
        </member>
        <member name="M:Starcounter.Binding.UInt32PropertyBinding.DoGetByte(System.Object)">
            <summary>
            Gets the value of an integer attribute as a 8-bits unsigned integer.
            </summary>
            <param name="obj">The obj.</param>
            <returns>System.Nullable{Byte}.</returns>
            <exception cref="T:System.NotSupportedException">Attempt to convert a 32-bit unsigned value to a 8-bit unsigned value.</exception>
        </member>
        <member name="M:Starcounter.Binding.UInt32PropertyBinding.DoGetInt16(System.Object)">
            <summary>
            Gets the value of an integer attribute as a 16-bits signed integer.
            </summary>
            <param name="obj">The obj.</param>
            <returns>System.Nullable{Int16}.</returns>
        </member>
        <member name="M:Starcounter.Binding.UInt32PropertyBinding.DoGetInt32(System.Object)">
            <summary>
            Gets the value of an integer attribute as a 32-bits signed integer.
            </summary>
            <param name="obj">The obj.</param>
            <returns>System.Nullable{Int32}.</returns>
        </member>
        <member name="M:Starcounter.Binding.UInt32PropertyBinding.DoGetInt64(System.Object)">
            <summary>
            Gets the value of an integer attribute as a 64-bits signed integer.
            </summary>
            <param name="obj">The obj.</param>
            <returns>System.Nullable{Int64}.</returns>
        </member>
        <member name="M:Starcounter.Binding.UInt32PropertyBinding.DoGetUInt16(System.Object)">
            <summary>
            Gets the value of an integer attribute as a 16-bits unsigned integer.
            </summary>
            <param name="obj">The obj.</param>
            <returns>System.Nullable{UInt16}.</returns>
            <exception cref="T:System.NotSupportedException">Attempt to convert a 32-bit unsigned value to a 16-bit unsigned value.</exception>
        </member>
        <member name="M:Starcounter.Binding.UInt32PropertyBinding.DoGetUInt64(System.Object)">
            <summary>
            Gets the value of an integer attribute as a 64-bits unsigned integer.
            </summary>
            <param name="obj">The obj.</param>
            <returns>System.Nullable{UInt64}.</returns>
        </member>
        <member name="T:Starcounter.Binding.UInt64PropertyBinding">
            <summary>
            Class UInt64PropertyBinding
            </summary>
        </member>
        <member name="P:Starcounter.Binding.UInt64PropertyBinding.TypeCode">
            <summary>
            Gets the type code.
            </summary>
            <value>The type code.</value>
        </member>
        <member name="M:Starcounter.Binding.UInt64PropertyBinding.DoGetByte(System.Object)">
            <summary>
            Gets the value of an integer attribute as a 8-bits unsigned integer.
            </summary>
            <param name="obj">The obj.</param>
            <returns>System.Nullable{Byte}.</returns>
            <exception cref="T:System.NotSupportedException">Attempt to convert a 64-bit unsigned value to a 8-bit unsigned value.</exception>
        </member>
        <member name="M:Starcounter.Binding.UInt64PropertyBinding.DoGetInt16(System.Object)">
            <summary>
            Gets the value of an integer attribute as a 16-bits signed integer.
            </summary>
            <param name="obj">The obj.</param>
            <returns>System.Nullable{Int16}.</returns>
        </member>
        <member name="M:Starcounter.Binding.UInt64PropertyBinding.DoGetInt32(System.Object)">
            <summary>
            Gets the value of an integer attribute as a 32-bits signed integer.
            </summary>
            <param name="obj">The obj.</param>
            <returns>System.Nullable{Int32}.</returns>
        </member>
        <member name="M:Starcounter.Binding.UInt64PropertyBinding.DoGetInt64(System.Object)">
            <summary>
            Gets the value of an integer attribute as a 64-bits signed integer.
            </summary>
            <param name="obj">The obj.</param>
            <returns>System.Nullable{Int64}.</returns>
        </member>
        <member name="M:Starcounter.Binding.UInt64PropertyBinding.DoGetUInt16(System.Object)">
            <summary>
            Gets the value of an integer attribute as a 16-bits unsigned integer.
            </summary>
            <param name="obj">The obj.</param>
            <returns>System.Nullable{UInt16}.</returns>
            <exception cref="T:System.NotSupportedException">Attempt to convert a 64-bit unsigned value to a 16-bit unsigned value.</exception>
        </member>
        <member name="M:Starcounter.Binding.UInt64PropertyBinding.DoGetUInt32(System.Object)">
            <summary>
            Gets the value of an integer attribute as a 32-bits unsigned integer.
            </summary>
            <param name="obj">The obj.</param>
            <returns>System.Nullable{UInt32}.</returns>
            <exception cref="T:System.NotSupportedException">Attempt to convert a 64-bit unsigned value to a 32-bit unsigned value.</exception>
        </member>
        <member name="T:Starcounter.Binding.SBytePropertyBinding">
            <summary>
            Class SBytePropertyBinding
            </summary>
        </member>
        <member name="P:Starcounter.Binding.SBytePropertyBinding.TypeCode">
            <summary>
            Property value type code.
            </summary>
            <value>The type code.</value>
        </member>
        <member name="M:Starcounter.Binding.SBytePropertyBinding.DoGetInt16(System.Object)">
            <summary>
            Gets the value of an integer attribute as a 16-bits signed integer.
            </summary>
            <param name="obj">The obj.</param>
            <returns>System.Nullable{Int16}.</returns>
        </member>
        <member name="M:Starcounter.Binding.SBytePropertyBinding.DoGetInt32(System.Object)">
            <summary>
            Gets the value of an integer attribute as a 32-bits signed integer.
            </summary>
            <param name="obj">The obj.</param>
            <returns>System.Nullable{Int32}.</returns>
        </member>
        <member name="M:Starcounter.Binding.SBytePropertyBinding.DoGetInt64(System.Object)">
            <summary>
            Gets the value of an integer attribute as a 64-bits signed integer.
            </summary>
            <param name="obj">The obj.</param>
            <returns>System.Nullable{Int64}.</returns>
        </member>
        <member name="T:Starcounter.Binding.Int16PropertyBinding">
            <summary>
            Class Int16PropertyBinding
            </summary>
        </member>
        <member name="P:Starcounter.Binding.Int16PropertyBinding.TypeCode">
            <summary>
            Gets the type code.
            </summary>
            <value>The type code.</value>
        </member>
        <member name="M:Starcounter.Binding.Int16PropertyBinding.DoGetSByte(System.Object)">
            <summary>
            Gets the value of an integer attribute as a 8-bits signed integer.
            </summary>
            <param name="obj">The obj.</param>
            <returns>System.Nullable{SByte}.</returns>
            <exception cref="T:System.NotSupportedException">Attempt to convert a 16-bit integer value to a 8-bit integer value.</exception>
        </member>
        <member name="M:Starcounter.Binding.Int16PropertyBinding.DoGetInt32(System.Object)">
            <summary>
            Gets the value of an integer attribute as a 32-bits signed integer.
            </summary>
            <param name="obj">The obj.</param>
            <returns>System.Nullable{Int32}.</returns>
        </member>
        <member name="M:Starcounter.Binding.Int16PropertyBinding.DoGetInt64(System.Object)">
            <summary>
            Gets the value of an integer attribute as a 64-bits signed integer.
            </summary>
            <param name="obj">The obj.</param>
            <returns>System.Nullable{Int64}.</returns>
        </member>
        <member name="T:Starcounter.Binding.Int32PropertyBinding">
            <summary>
            Class Int32PropertyBinding
            </summary>
        </member>
        <member name="P:Starcounter.Binding.Int32PropertyBinding.TypeCode">
            <summary>
            Gets the type code.
            </summary>
            <value>The type code.</value>
        </member>
        <member name="M:Starcounter.Binding.Int32PropertyBinding.DoGetSByte(System.Object)">
            <summary>
            Gets the value of an integer attribute as a 8-bits signed integer.
            </summary>
            <param name="obj">The obj.</param>
            <returns>System.Nullable{SByte}.</returns>
            <exception cref="T:System.NotSupportedException">Attempt to convert a 32-bit integer value to a 8-bit integer value.</exception>
        </member>
        <member name="M:Starcounter.Binding.Int32PropertyBinding.DoGetInt16(System.Object)">
            <summary>
            Gets the value of an integer attribute as a 16-bits signed integer.
            </summary>
            <param name="obj">The obj.</param>
            <returns>System.Nullable{Int16}.</returns>
            <exception cref="T:System.NotSupportedException">Attempt to convert a 32-bit integer value to a 16-bit integer value.</exception>
        </member>
        <member name="M:Starcounter.Binding.Int32PropertyBinding.DoGetInt64(System.Object)">
            <summary>
            Gets the value of an integer attribute as a 64-bits signed integer.
            </summary>
            <param name="obj">The obj.</param>
            <returns>System.Nullable{Int64}.</returns>
        </member>
        <member name="T:Starcounter.Binding.Int64PropertyBinding">
            <summary>
            Class Int64PropertyBinding
            </summary>
        </member>
        <member name="P:Starcounter.Binding.Int64PropertyBinding.TypeCode">
            <summary>
            Gets the type code.
            </summary>
            <value>The type code.</value>
        </member>
        <member name="M:Starcounter.Binding.Int64PropertyBinding.DoGetSByte(System.Object)">
            <summary>
            Gets the value of an integer attribute as a 8-bits signed integer.
            </summary>
            <param name="obj">The obj.</param>
            <returns>System.Nullable{SByte}.</returns>
            <exception cref="T:System.NotSupportedException">Attempt to convert a 64-bit integer value to a 8-bit integer value.</exception>
        </member>
        <member name="M:Starcounter.Binding.Int64PropertyBinding.DoGetInt16(System.Object)">
            <summary>
            Gets the value of an integer attribute as a 16-bits signed integer.
            </summary>
            <param name="obj">The obj.</param>
            <returns>System.Nullable{Int16}.</returns>
            <exception cref="T:System.NotSupportedException">Attempt to convert a 64-bit integer value to a 16-bit integer value.</exception>
        </member>
        <member name="M:Starcounter.Binding.Int64PropertyBinding.DoGetInt32(System.Object)">
            <summary>
            Gets the value of an integer attribute as a 32-bits signed integer.
            </summary>
            <param name="obj">The obj.</param>
            <returns>System.Nullable{Int32}.</returns>
            <exception cref="T:System.NotSupportedException">Attempt to convert a 64-bit integer value to a 32-bit integer value.</exception>
        </member>
        <member name="T:Starcounter.Binding.IntPropertyBinding">
            <summary>
            Class IntPropertyBinding
            </summary>
        </member>
        <member name="M:Starcounter.Binding.IntPropertyBinding.#ctor">
            <summary>
            Initializes a new instance of the <see cref="T:Starcounter.Binding.IntPropertyBinding" /> class.
            </summary>
        </member>
        <member name="M:Starcounter.Binding.IntPropertyBinding.DoGetBinary(System.Object)">
            <summary>
            Gets the value of a binary attribute
            </summary>
            <param name="obj">The obj.</param>
            <returns>Binary.</returns>
        </member>
        <member name="M:Starcounter.Binding.IntPropertyBinding.DoGetBoolean(System.Object)">
            <summary>
            Gets the value of a boolean attribute.
            </summary>
            <param name="obj">The obj.</param>
            <returns>System.Nullable{Boolean}.</returns>
        </member>
        <member name="M:Starcounter.Binding.IntPropertyBinding.DoGetByte(System.Object)">
            <summary>
            Gets the value of an integer attribute as a 8-bits unsigned integer.
            </summary>
            <param name="obj">The obj.</param>
            <returns>System.Nullable{Byte}.</returns>
        </member>
        <member name="M:Starcounter.Binding.IntPropertyBinding.DoGetDateTime(System.Object)">
            <summary>
            Gets the value of a timestamp attribute.
            </summary>
            <param name="obj">The obj.</param>
            <returns>System.Nullable{DateTime}.</returns>
        </member>
        <member name="M:Starcounter.Binding.IntPropertyBinding.DoGetDecimal(System.Object)">
            <summary>
            Gets the value of a decimal attribute.
            </summary>
            <param name="obj">The obj.</param>
            <returns>System.Nullable{Decimal}.</returns>
        </member>
        <member name="M:Starcounter.Binding.IntPropertyBinding.DoGetDouble(System.Object)">
            <summary>
            Gets the value of a 64-bits floating point attribute.
            </summary>
            <param name="obj">The obj.</param>
            <returns>System.Nullable{Double}.</returns>
        </member>
        <member name="M:Starcounter.Binding.IntPropertyBinding.DoGetObject(System.Object)">
            <summary>
            Gets the value of a reference attribute.
            </summary>
            <param name="obj">The obj.</param>
            <returns>Entity.</returns>
        </member>
        <member name="M:Starcounter.Binding.IntPropertyBinding.DoGetSingle(System.Object)">
            <summary>
            Gets the value of a 32-bits floating point attribute.
            </summary>
            <param name="obj">The obj.</param>
            <returns>System.Nullable{Single}.</returns>
        </member>
        <member name="M:Starcounter.Binding.IntPropertyBinding.DoGetString(System.Object)">
            <summary>
            Gets the value of a string attribute.
            </summary>
            <param name="obj">The obj.</param>
            <returns>String.</returns>
        </member>
        <member name="M:Starcounter.Binding.IntPropertyBinding.DoGetUInt16(System.Object)">
            <summary>
            Gets the value of an integer attribute as a 16-bits unsigned integer.
            </summary>
            <param name="obj">The obj.</param>
            <returns>System.Nullable{UInt16}.</returns>
        </member>
        <member name="M:Starcounter.Binding.IntPropertyBinding.DoGetUInt32(System.Object)">
            <summary>
            Gets the value of an integer attribute as a 32-bits unsigned integer.
            </summary>
            <param name="obj">The obj.</param>
            <returns>System.Nullable{UInt32}.</returns>
        </member>
        <member name="M:Starcounter.Binding.IntPropertyBinding.DoGetUInt64(System.Object)">
            <summary>
            Gets the value of an integer attribute as a 64-bits unsigned integer.
            </summary>
            <param name="obj">The obj.</param>
            <returns>System.Nullable{UInt64}.</returns>
        </member>
        <member name="M:Starcounter.Binding.IntPropertyBinding.ExceptionForInvalidType">
            <summary>
            Exceptions the type of for invalid.
            </summary>
            <returns>Exception.</returns>
            <exception cref="T:System.NotSupportedException">Attempt to access an integer attribute as something other then an integer attribute.</exception>
        </member>
        <member name="T:Starcounter.Binding.PrimitivePropertyBinding">
            <summary>
            Class PrimitivePropertyBinding
            </summary>
        </member>
        <member name="M:Starcounter.Binding.PrimitivePropertyBinding.#ctor">
            <summary>
            Initializes a new instance of the <see cref="T:Starcounter.Binding.PrimitivePropertyBinding" /> class.
            </summary>
        </member>
        <member name="P:Starcounter.Binding.PrimitivePropertyBinding.TypeBinding">
            <summary>
            Gets the type binding.
            </summary>
            <value>The type binding.</value>
        </member>
        <member name="T:Starcounter.Binding.StringPropertyBinding">
            <summary>
            Class StringPropertyBinding
            </summary>
        </member>
        <member name="M:Starcounter.Binding.StringPropertyBinding.#ctor">
            <summary>
            Initializes a new instance of the <see cref="T:Starcounter.Binding.StringPropertyBinding" /> class.
            </summary>
        </member>
        <member name="P:Starcounter.Binding.StringPropertyBinding.TypeCode">
            <summary>
            Property value type code.
            </summary>
            <value>The type code.</value>
        </member>
        <member name="M:Starcounter.Binding.StringPropertyBinding.DoGetBinary(System.Object)">
            <summary>
            Gets the value of a binary attribute
            </summary>
            <param name="obj">The obj.</param>
            <returns>Binary.</returns>
        </member>
        <member name="M:Starcounter.Binding.StringPropertyBinding.DoGetBoolean(System.Object)">
            <summary>
            Gets the value of a boolean attribute.
            </summary>
            <param name="obj">The obj.</param>
            <returns>System.Nullable{Boolean}.</returns>
        </member>
        <member name="M:Starcounter.Binding.StringPropertyBinding.DoGetByte(System.Object)">
            <summary>
            Gets the value of an integer attribute as a 8-bits unsigned integer.
            </summary>
            <param name="obj">The obj.</param>
            <returns>System.Nullable{Byte}.</returns>
        </member>
        <member name="M:Starcounter.Binding.StringPropertyBinding.DoGetDateTime(System.Object)">
            <summary>
            Gets the value of a timestamp attribute.
            </summary>
            <param name="obj">The obj.</param>
            <returns>System.Nullable{DateTime}.</returns>
        </member>
        <member name="M:Starcounter.Binding.StringPropertyBinding.DoGetDecimal(System.Object)">
            <summary>
            Gets the value of a decimal attribute.
            </summary>
            <param name="obj">The obj.</param>
            <returns>System.Nullable{Decimal}.</returns>
        </member>
        <member name="M:Starcounter.Binding.StringPropertyBinding.DoGetDouble(System.Object)">
            <summary>
            Gets the value of a 64-bits floating point attribute.
            </summary>
            <param name="obj">The obj.</param>
            <returns>System.Nullable{Double}.</returns>
        </member>
        <member name="M:Starcounter.Binding.StringPropertyBinding.DoGetInt16(System.Object)">
            <summary>
            Gets the value of an integer attribute as a 16-bits signed integer.
            </summary>
            <param name="obj">The obj.</param>
            <returns>System.Nullable{Int16}.</returns>
        </member>
        <member name="M:Starcounter.Binding.StringPropertyBinding.DoGetInt32(System.Object)">
            <summary>
            Gets the value of an integer attribute as a 32-bits signed integer.
            </summary>
            <param name="obj">The obj.</param>
            <returns>System.Nullable{Int32}.</returns>
        </member>
        <member name="M:Starcounter.Binding.StringPropertyBinding.DoGetInt64(System.Object)">
            <summary>
            Gets the value of an integer attribute as a 64-bits signed integer.
            </summary>
            <param name="obj">The obj.</param>
            <returns>System.Nullable{Int64}.</returns>
        </member>
        <member name="M:Starcounter.Binding.StringPropertyBinding.DoGetObject(System.Object)">
            <summary>
            Gets the value of a reference attribute.
            </summary>
            <param name="obj">The obj.</param>
            <returns>Entity.</returns>
        </member>
        <member name="M:Starcounter.Binding.StringPropertyBinding.DoGetSByte(System.Object)">
            <summary>
            Gets the value of an integer attribute as a 8-bits signed integer.
            </summary>
            <param name="obj">The obj.</param>
            <returns>System.Nullable{SByte}.</returns>
        </member>
        <member name="M:Starcounter.Binding.StringPropertyBinding.DoGetSingle(System.Object)">
            <summary>
            Gets the value of a 32-bits floating point attribute.
            </summary>
            <param name="obj">The obj.</param>
            <returns>System.Nullable{Single}.</returns>
        </member>
        <member name="M:Starcounter.Binding.StringPropertyBinding.DoGetUInt16(System.Object)">
            <summary>
            Gets the value of an integer attribute as a 16-bits unsigned integer.
            </summary>
            <param name="obj">The obj.</param>
            <returns>System.Nullable{UInt16}.</returns>
        </member>
        <member name="M:Starcounter.Binding.StringPropertyBinding.DoGetUInt32(System.Object)">
            <summary>
            Gets the value of an integer attribute as a 32-bits unsigned integer.
            </summary>
            <param name="obj">The obj.</param>
            <returns>System.Nullable{UInt32}.</returns>
        </member>
        <member name="M:Starcounter.Binding.StringPropertyBinding.DoGetUInt64(System.Object)">
            <summary>
            Gets the value of an integer attribute as a 64-bits unsigned integer.
            </summary>
            <param name="obj">The obj.</param>
            <returns>System.Nullable{UInt64}.</returns>
        </member>
        <member name="M:Starcounter.Binding.StringPropertyBinding.ExceptionForInvalidType">
            <summary>
            Exceptions the type of for invalid.
            </summary>
            <returns>Exception.</returns>
            <exception cref="T:System.NotSupportedException">Attempt to access a string attribute as something other then a string attribute.</exception>
        </member>
        <member name="T:Starcounter.Binding.UIntPropertyBinding">
            <summary>
            Class UIntPropertyBinding
            </summary>
        </member>
        <member name="M:Starcounter.Binding.UIntPropertyBinding.#ctor">
            <summary>
            Initializes a new instance of the <see cref="T:Starcounter.Binding.UIntPropertyBinding" /> class.
            </summary>
        </member>
        <member name="M:Starcounter.Binding.UIntPropertyBinding.DoGetBinary(System.Object)">
            <summary>
            Gets the value of a binary attribute
            </summary>
            <param name="obj">The obj.</param>
            <returns>Binary.</returns>
        </member>
        <member name="M:Starcounter.Binding.UIntPropertyBinding.DoGetBoolean(System.Object)">
            <summary>
            Gets the value of a boolean attribute.
            </summary>
            <param name="obj">The obj.</param>
            <returns>System.Nullable{Boolean}.</returns>
        </member>
        <member name="M:Starcounter.Binding.UIntPropertyBinding.DoGetDateTime(System.Object)">
            <summary>
            Gets the value of a timestamp attribute.
            </summary>
            <param name="obj">The obj.</param>
            <returns>System.Nullable{DateTime}.</returns>
        </member>
        <member name="M:Starcounter.Binding.UIntPropertyBinding.DoGetDecimal(System.Object)">
            <summary>
            Gets the value of a decimal attribute.
            </summary>
            <param name="obj">The obj.</param>
            <returns>System.Nullable{Decimal}.</returns>
        </member>
        <member name="M:Starcounter.Binding.UIntPropertyBinding.DoGetDouble(System.Object)">
            <summary>
            Gets the value of a 64-bits floating point attribute.
            </summary>
            <param name="obj">The obj.</param>
            <returns>System.Nullable{Double}.</returns>
        </member>
        <member name="M:Starcounter.Binding.UIntPropertyBinding.DoGetObject(System.Object)">
            <summary>
            Gets the value of a reference attribute.
            </summary>
            <param name="obj">The obj.</param>
            <returns>Entity.</returns>
        </member>
        <member name="M:Starcounter.Binding.UIntPropertyBinding.DoGetSByte(System.Object)">
            <summary>
            Gets the value of an integer attribute as a 8-bits signed integer.
            </summary>
            <param name="obj">The obj.</param>
            <returns>System.Nullable{SByte}.</returns>
        </member>
        <member name="M:Starcounter.Binding.UIntPropertyBinding.DoGetSingle(System.Object)">
            <summary>
            Gets the value of a 32-bits floating point attribute.
            </summary>
            <param name="obj">The obj.</param>
            <returns>System.Nullable{Single}.</returns>
        </member>
        <member name="M:Starcounter.Binding.UIntPropertyBinding.DoGetString(System.Object)">
            <summary>
            Gets the value of a string attribute.
            </summary>
            <param name="obj">The obj.</param>
            <returns>String.</returns>
        </member>
        <member name="M:Starcounter.Binding.UIntPropertyBinding.ExceptionForInvalidType">
            <summary>
            Exceptions the type of for invalid.
            </summary>
            <returns>Exception.</returns>
            <exception cref="T:System.NotSupportedException">Attempt to access an unsigned attribute as something other then an unsigned attribute.</exception>
        </member>
        <member name="T:Starcounter.DbException">
            <summary>
            Exception thrown on when a database error is detected (4000 or 8000 series error codes).
            </summary>
            <remarks>
            On some errors a specialized exception inheriting <see cref="T:Starcounter.DbException"/> is
            raised.
            </remarks>
        </member>
        <member name="P:Starcounter.DbException.ErrorCode">
            <summary>
            Starcounter error code.
            </summary>
        </member>
        <member name="M:Starcounter.DbException.#ctor(System.Runtime.Serialization.SerializationInfo,System.Runtime.Serialization.StreamingContext)">
            <summary>
            
            </summary>
            <param name="info"></param>
            <param name="context"></param>
        </member>
        <member name="M:Starcounter.DbException.GetObjectData(System.Runtime.Serialization.SerializationInfo,System.Runtime.Serialization.StreamingContext)">
            <summary>
            
            </summary>
            <param name="info"></param>
            <param name="context"></param>
        </member>
        <member name="T:Starcounter.TransactionCommitHookInvocationContext">
            <summary>
            Context in where installed commit- and post-commit hooks are invoked
            based on a given a modification.
            </summary>
        </member>
        <member name="T:Starcounter.Hook`1">
            <summary>
            Principal entrypoint to the Starcounter hook API Provides
            a set of events allowing hooks to be registered.
            </summary>
            <typeparam name="T">The database type to hook.</typeparam>
        </member>
        <member name="E:Starcounter.Hook`1.BeforeDelete">
            <summary>
            Occurs before an object of type <c>T</c> is being deleted.
            </summary>
        </member>
        <member name="E:Starcounter.Hook`1.CommitDelete">
            <summary>
            Occurs when an object of type <c>T</c> is deleted in a
            transaction that is being committed.
            </summary>
        </member>
        <member name="E:Starcounter.Hook`1.CommitInsert">
            <summary>
            Occurs when an object of type <c>T</c> is inserted in a
            transaction that is being committed.
            </summary>
        </member>
        <member name="E:Starcounter.Hook`1.CommitUpdate">
            <summary>
            Occurs when an object of type <c>T</c> is updated in a
            transaction that is being committed.
            </summary>
        </member>
        <member name="E:Starcounter.Hook`1.AfterCommitInsert">
            <summary>
            Occurs when an object of type <c>T</c> has been inserted in a
            transaction that has been committed.
            </summary>
        </member>
        <member name="E:Starcounter.Hook`1.AfterCommitUpdate">
            <summary>
            Occurs when an object of type <c>T</c> has been updated in a
            transaction that has been committed.
            </summary>
        </member>
        <member name="E:Starcounter.Hook`1.AfterCommitDelete">
            <summary>
            Occurs when an object of type <c>T</c> has been deleted in a
            transaction that has been committed.
            </summary>
        </member>
        <member name="M:Starcounter.Hook`1.OnCommitInsert(System.EventHandler{`0},System.Threading.Tasks.TaskScheduler)">
            <summary>
            Registers a handler that will execute when an object of type <c>T</c>
            is inserted in a transaction that is being committed.
            </summary>
            <param name="handler">Delegate to be invoked.</param>
            <param name="taskScheduler">Optional task scheduler, used by the runtime to
            schedule a task in which the delegate will be invoked.</param>
        </member>
        <member name="M:Starcounter.Hook`1.OnCommitUpdate(System.EventHandler{`0},System.Threading.Tasks.TaskScheduler)">
            <summary>
            Registers a handler that will execute when an object of type <c>T</c>
            is updated in a transaction that is being committed.
            </summary>
            <param name="handler">Delegate to be invoked.</param>
            <param name="taskScheduler">Optional task scheduler, used by the runtime to
            schedule a task in which the delegate will be invoked.</param>
        </member>
        <member name="M:Starcounter.Hook`1.OnCommitDelete(System.EventHandler{System.UInt64},System.Threading.Tasks.TaskScheduler)">
            <summary>
            Registers a handler that will execute when an object of type <c>T</c>
            is deleted in a transaction that is being committed.
            </summary>
            <param name="handler">Delegate to be invoked.</param>
            <param name="taskScheduler">Optional task scheduler, used by the runtime to
            schedule a task in which the delegate will be invoked.</param>
        </member>
        <member name="M:Starcounter.Hook`1.OnBeforeDelete(System.EventHandler{`0},System.Threading.Tasks.TaskScheduler)">
            <summary>
            Registers a handler that will execute before an object of type <c>T</c>
            is deleted.
            </summary>
            <param name="handler">Delegate to be invoked.</param>
            <param name="taskScheduler">Optional task scheduler, used by the runtime to
            schedule a task in which the delegate will be invoked.</param>
        </member>
        <member name="M:Starcounter.Hook`1.OnAfterCommitInsert(System.EventHandler{System.UInt64},System.Threading.Tasks.TaskScheduler)">
            <summary>
            Registers a handler that will execute when an object of type <c>T</c>
            was inserted in a transaction that was committed.
            </summary>
            <param name="handler">Delegate to be invoked.</param>
            <param name="taskScheduler">Optional task scheduler, used by the runtime to
            schedule a task in which the delegate will be invoked.</param>
        </member>
        <member name="M:Starcounter.Hook`1.OnAfterCommitUpdate(System.EventHandler{System.UInt64},System.Threading.Tasks.TaskScheduler)">
            <summary>
            Registers a handler that will execute when an object of type <c>T</c>
            was updated in a transaction that was committed.
            </summary>
            <param name="handler">Delegate to be invoked.</param>
            <param name="taskScheduler">Optional task scheduler, used by the runtime to
            schedule a task in which the delegate will be invoked.</param>
        </member>
        <member name="M:Starcounter.Hook`1.OnAfterCommitDelete(System.EventHandler{System.UInt64},System.Threading.Tasks.TaskScheduler)">
            <summary>
            Registers a handler that will execute when an object of type <c>T</c>
            was deleted in a transaction that was committed.
            </summary>
            <param name="handler">Delegate to be invoked.</param>
            <param name="taskScheduler">Optional task scheduler, used by the runtime to
            schedule a task in which the delegate will be invoked.</param>
        </member>
        <member name="T:Starcounter.HookDelegateList`1">
            <summary>
            List of delegates with the same signature type.
            </summary>
            <typeparam name="T">Type of target.</typeparam>
        </member>
        <member name="M:Starcounter.HookDelegateList`1.Add(System.EventHandler{`0})">
            <summary>
            Adds a new handler with the given target.
            </summary>
            <param name="h">The handler to add.</param>
            <returns>The index of the added handler.</returns>
        </member>
        <member name="M:Starcounter.HookDelegateList`1.Get(System.Int32)">
            <summary>
            Gets a handler/delegate by index.
            </summary>
            <param name="index">The index of the handler to
            retreive</param>
            <returns>The handler with the given index.</returns>
        </member>
        <member name="P:Starcounter.IHookHostDependencies.Registry">
            <summary>
            Registry to be used when hooks are installed and need to be
            consumed.
            </summary>
        </member>
        <member name="P:Starcounter.IHookHostDependencies.ApplicationName">
            <summary>
            Retrieve the name of the current application, at the time of
            when any hook is installed.
            </summary>
        </member>
        <member name="M:Starcounter.IHookHostDependencies.GetTypeId(System.Type)">
            <summary>
            Retrieves a unique ID for the given database type.
            </summary>
            <param name="type">Database type</param>
            <returns>Unique ID of the given type.</returns>
        </member>
        <member name="M:Starcounter.IHookHostDependencies.GetTypeById(System.UInt64)">
            <summary>
            Retrieves the type from a given ID constituting a
            unique hooking key.
            </summary>
            <param name="id">The ID of the type</param>
            <returns>Type corresponding to given ID.</returns>
        </member>
        <member name="T:Starcounter.RuntimeDelegate`1">
            <summary>
            Encapsulates a delegate and a named database type and expose
            a set of events that can be manipulated to subscribe/unsubscribe
            to certain database triggers, fired when the triggering type is
            being mutated.
            </summary>
            <typeparam name="T">The host type used in the delegate signature.
            Must align with the triggering type.</typeparam>
        </member>
        <!-- Badly formed XML comment ignored for member "M:Starcounter.RuntimeDelegate`1.TriggeredBy(Starcounter.IHookHostDependencies,System.Type,System.Boolean)" -->
        <member name="E:Starcounter.RuntimeDelegate`1.BeforeDelete">
            <summary>
            Occurs before an object of the triggering type is being deleted.
            </summary>
        </member>
        <member name="E:Starcounter.RuntimeDelegate`1.CommitDelete">
            <summary>
            Occurs when an object of the triggering type is deleted in a
            transaction that is being committed.
            </summary>
        </member>
        <member name="E:Starcounter.RuntimeDelegate`1.CommitInsert">
            <summary>
            Occurs when an object of the triggering type is inserted in a
            transaction that is being committed.
            </summary>
        </member>
        <member name="E:Starcounter.RuntimeDelegate`1.CommitUpdate">
            <summary>
            Occurs when an object of the triggering type is updated in a
            transaction that is being committed.
            </summary>
        </member>
        <member name="E:Starcounter.RuntimeDelegate`1.AfterCommitDelete">
            <summary>
            Occurs when an object of the triggering type has been deleted in a
            committed transaction.
            </summary>
        </member>
        <member name="E:Starcounter.RuntimeDelegate`1.AfterCommitInsert">
            <summary>
            Occurs when an object of the triggering type has been inserted in a
            committed transaction.
            </summary>
        </member>
        <member name="E:Starcounter.RuntimeDelegate`1.AfterCommitUpdate">
            <summary>
            Occurs when an object of the triggering type has been updated in a
            committed transaction.
            </summary>
        </member>
        <!-- Badly formed XML comment ignored for member "T:Starcounter.RuntimeInstalledHookDelegate`1" -->
        <member name="P:Starcounter.RuntimeInstalledHookDelegate`1.ApplicationName">
            <summary>
            The application name that defines in what scope the
            current delegate should execute when triggered.
            </summary>
        </member>
        <member name="M:Starcounter.RuntimeInstalledHookDelegate`1.Invoke(System.Object,System.Object)">
            <summary>
            Invokes the referenced delegate with the given arguments.
            </summary>
            <param name="eventData">Carry to be passed to the
            delegate.</param>
        </member>
        <member name="T:Starcounter.HookKey">
            <summary>
            A key identifying a triggering hook type, including its
            identity and the operation being hooked (e.g. Insert);
            </summary>
            <example>
            Here, the <see cref="T:Starcounter.HookKey"/> will contain a TypeID
            that is the table ID of the "Foo" table (e.g 25), and
            the TypeOfHook will have a value equal to the 
            <see cref="F:Starcounter.HookType.CommitInsert"/> constant.
            <code>
            // Register an insertion hook on class/table Foo
            Hook{Foo}.OnInsert(f => {...});
            </code>
            </example>
        </member>
        <member name="P:Starcounter.HookKey.TypeId">
            <summary>
            Gets the type id of this hook, normally a table id.
            </summary>
        </member>
        <member name="P:Starcounter.HookKey.TypeOfHook">
            <summary>
            Gets the type of hook the current key represent.
            <see cref="T:Starcounter.HookType"/>.
            </summary>
        </member>
        <member name="P:Starcounter.HookKey.Category">
            <summary>
            Gets the category of hooks this key belong to.
            </summary>
        </member>
        <!-- Badly formed XML comment ignored for member "P:Starcounter.HookKey.EqualityComparer" -->
        <member name="M:Starcounter.HookKey.FromTypeId(System.UInt64,System.UInt32,Starcounter.HookKey)">
            <summary>
            Creates a key based on a type id.
            </summary>
            <param name="typeId">The id that identifies the type of the key.</param>
            <param name="hookType">The type of hook the key are to
            represent. Valid values are from <see cref="T:Starcounter.HookType"/>.
            </param>
            <param name="keyToReuse">Optional key to reuse. If not given,
            a new key is instantiated.</param>
            <returns>A new <see cref="T:Starcounter.HookKey"/> based on the given values.
            </returns>
        </member>
        <member name="T:Starcounter.HookType">
            <summary>
            Defines the type of hooks supported by Starcounter.
            </summary>
        </member>
        <member name="F:Starcounter.HookType.CommitInsert">
            <summary>
            Integer returned on commit when an INSERT is detected
            on a kernel type that has the corresponding hook flag set.
            </summary>
        </member>
        <member name="F:Starcounter.HookType.CommitUpdate">
            <summary>
            Integer returned on commit when an UPDATE is detected
            on a kernel type that has the corresponding hook flag set.
            </summary>
        </member>
        <member name="F:Starcounter.HookType.CommitDelete">
            <summary>
            Integer returned on commit when a DELETE is detected
            on a kernel type that has the corresponding hook flag set.
            </summary>
        </member>
        <member name="F:Starcounter.HookType.BeforeDelete">
            <summary>
            Represents a hook that trigger just before a delete is carried
            out.
            </summary>
        </member>
        <member name="F:Starcounter.HookType.AfterCommitInsert">
            <summary>
            Hook invoked after an insert has been committed.
            </summary>
        </member>
        <member name="F:Starcounter.HookType.AfterCommitUpdate">
            <summary>
            Hook invoked after an update has been committed.
            </summary>
        </member>
        <member name="F:Starcounter.HookType.AfterCommitDelete">
            <summary>
            Hook invoked after a delete has been committed.
            </summary>
        </member>
        <member name="M:Starcounter.HookType.IsCommitInsertOrUpdate(System.UInt32)">
            <summary>
            Returns true if the given type represents either an
            commt hook insert or an update; false otherwise.
            </summary>
            <param name="type">The type to evaluate.</param>
            <returns>True if insert or update; false otherwise.</returns>
        </member>
        <member name="M:Starcounter.HookType.IsCommitHook(System.UInt32)">
            <summary>
            Returns true if the given type represents one of the
            commit hooks; false otherwise.
            </summary>
            <param name="type">The type to evaluate.</param>
            <returns>True the type represents a commit hook; false otherwise.</returns>
        </member>
        <member name="M:Starcounter.HookType.IsPostCommitHook(System.UInt32)">
            <summary>
            Return true of given type represent a hook invoked after a commit.
            </summary>
            <param name="type"></param>
            <returns></returns>
        </member>
        <member name="M:Starcounter.HookType.IsKnownType(System.UInt32)">
            <summary>
            Returns a value indicating if the given type is a known hook type.
            </summary>
            <param name="type">The type to check</param>
            <returns>True if the type is one of the known types.</returns>
        </member>
        <member name="T:Starcounter.InvokableHook">
            <summary>
            Provides a way for Starcounter to list all hooks in a unified way
            and allows them to be mapped and invoked.
            </summary>
        </member>
        <member name="P:Starcounter.InvokableHook.TaskScheduler">
            <summary>
            Gets or sets the tasks scheduler that should be used to schedule
            the task in which this hook will run. If no scheduler is assigned,
            the hook will be executed in the invoking thread.
            </summary>
        </member>
        <member name="M:Starcounter.InvokableHook.InvokeAll(System.Collections.Generic.IEnumerable{Starcounter.InvokableHook},System.Object,System.Object)">
            <summary>
            Invokes every hook in a given list.
            </summary>
            <param name="hooks">Hooks that are to be installed.</param>
            <param name="instance">Carry to each hook.</param>
            <param name="sender">Optional sender object, causing the hook
            invocation.</param>
        </member>
        <member name="M:Starcounter.InvokableHook.Invoke(System.Object,System.Object)">
            <summary>
            Invokes the current hook.
            </summary>
            <param name="eventData">Reference to the instance
            representing the carry the hook receives.</param>
        </member>
        <member name="T:Starcounter.ConstraintViolationException">
            <summary>
            Exception thrown when a transaction is aborted because of a constraint violation (error
            code 8001, ScErrConstraintViolationAbort).
            </summary>
        </member>
        <member name="M:Starcounter.ConstraintViolationException.GetViolatingIndexName">
            <summary>
            Retrieves a violated index name. Should be called on a Starcounter thread. May fail if the index has been 
            dropped by the time of the call.
            </summary>
        </member>
        <member name="T:Starcounter.Entity">
            <summary>
            Defines a common base class for Starcounter database
            classes, as an alternative to the [Database] attribute.
            </summary>
        </member>
        <member name="P:Starcounter.Entity.Type">
            <summary>
            Gets or sets the dynamic type of the current entity.
            </summary>
        </member>
        <member name="P:Starcounter.Entity.Quantity">
            <summary>
            Allows any single entity to represent a set of instances 
            (such as 2 cars or 3.5 litres of water)
            </summary>
        </member>
        <member name="M:Starcounter.Entity.Create">
            <summary>
            Creates a new entity whose dynamic type will be the
            current entity, i.e. instantiating the current entity
            (where the current entity is to be considered a type).
            </summary>
            <returns>A new entity whose dynamic type is the
            current entity.</returns>
        </member>
        <member name="M:Starcounter.Entity.Derive">
            <summary>
            Creates a new entity whose parent dynamic type
            will be the current entity, i.e. deriving the
            current entity (where the current entity is to
            be considered a type).
            </summary>
            <returns>A new entity whose base dynamic type is
            the current entity.</returns>
        </member>
        <member name="P:Starcounter.Entity.Name">
            <summary>
            Gets or sets the name of the current entity. The
            name is commonly used to name entities that are
            types, but can be used on entities that are not
            types too, giving them a logical name.
            </summary>
        </member>
        <member name="P:Starcounter.Entity.TypeID">
            <summary>
            Gets the unique type ID of the current entity.
            </summary>
        </member>
        <member name="P:Starcounter.Entity.ObjectNo">
            <summary>
            Gets the unique object number of the current
            entity.
            </summary>
        </member>
        <member name="M:Starcounter.Entity.Delete">
            <summary>
            Deletes the current entity.
            </summary>
        </member>
        <member name="P:Starcounter.Entity.Item(System.String)">
            <summary>
            Gets or sets a property of the current entity.
            </summary>
            <param name="propertName">The name of the
            property to set.</param>
            <returns>The value of the named property.</returns>
        </member>
        <member name="P:Starcounter.Entity.TypeInherits">
            <summary>
            Gets or sets the parent dynamic type of the
            current entity.
            </summary>
            <seealso cref="M:Starcounter.Entity.Derive"/>
        </member>
        <member name="P:Starcounter.Entity.IsType">
            <summary>
            Gets or sets a value indicating if the current
            entity should be considered a dynamic type.
            </summary>
        </member>
        <member name="P:Starcounter.Entity.IsEdge">
            <summary>
            Gets or sets a value indicating if the current
            entity is an edge.
            </summary>
        </member>
        <member name="P:Starcounter.Entity.EdgeSubject">
            <summary>
            Gets or sets the subject of the current entity in
            a context where the current entity is to be
            considered a relation (edge).
            </summary>
        </member>
        <member name="P:Starcounter.Entity.EdgeObject">
            <summary>
            Gets or sets the object of the current entity in
            a context where the current entity is to be
            considered a relation (edge).
            </summary>
        </member>
        <member name="M:Starcounter.Entity.#ctor">
            <summary>
            Initialize a new <see cref="T:Starcounter.Entity"/>.
            </summary>
        </member>
        <member name="M:Starcounter.Entity.Equals(System.Object)">
            <inheritdoc />
        </member>
        <member name="M:Starcounter.Entity.GetHashCode">
            <inheritdoc />
        </member>
        <member name="M:Starcounter.Entity.OnDelete">
            <summary>
            Called on the current entity when it is being
            deleted.
            </summary>
        </member>
        <member name="M:Starcounter.Entity.Starcounter#Binding#IObjectProxyInternal#Bind(System.UInt64,System.UInt64,Starcounter.Binding.TypeBinding)">
            <inheritdoc />
        </member>
        <member name="M:Starcounter.Entity.Starcounter#IObjectViewInternal#EqualsOrIsDerivedFrom(Starcounter.IObjectViewInternal)">
            <inheritdoc />
        </member>
        <member name="M:Starcounter.Entity.Starcounter#IObjectViewInternal#GetBinary(System.Int32)">
            <inheritdoc />
        </member>
        <member name="M:Starcounter.Entity.Starcounter#IObjectViewInternal#GetBoolean(System.Int32)">
            <inheritdoc />
        </member>
        <member name="M:Starcounter.Entity.Starcounter#IObjectViewInternal#GetByte(System.Int32)">
            <inheritdoc />
        </member>
        <member name="M:Starcounter.Entity.Starcounter#IObjectViewInternal#GetDateTime(System.Int32)">
            <inheritdoc />
        </member>
        <member name="M:Starcounter.Entity.Starcounter#IObjectViewInternal#GetDecimal(System.Int32)">
            <inheritdoc />
        </member>
        <member name="M:Starcounter.Entity.Starcounter#IObjectViewInternal#GetDouble(System.Int32)">
            <inheritdoc />
        </member>
        <member name="M:Starcounter.Entity.Starcounter#IObjectViewInternal#GetInt16(System.Int32)">
            <inheritdoc />
        </member>
        <member name="M:Starcounter.Entity.Starcounter#IObjectViewInternal#GetInt32(System.Int32)">
            <inheritdoc />
        </member>
        <member name="M:Starcounter.Entity.Starcounter#IObjectViewInternal#GetInt64(System.Int32)">
            <inheritdoc />
        </member>
        <member name="M:Starcounter.Entity.Starcounter#IObjectViewInternal#GetObject(System.Int32)">
            <inheritdoc />
        </member>
        <member name="M:Starcounter.Entity.Starcounter#IObjectViewInternal#GetSByte(System.Int32)">
            <inheritdoc />
        </member>
        <member name="M:Starcounter.Entity.Starcounter#IObjectViewInternal#GetSingle(System.Int32)">
            <inheritdoc />
        </member>
        <member name="M:Starcounter.Entity.Starcounter#IObjectViewInternal#GetString(System.Int32)">
            <inheritdoc />
        </member>
        <member name="M:Starcounter.Entity.Starcounter#IObjectViewInternal#GetUInt16(System.Int32)">
            <inheritdoc />
        </member>
        <member name="M:Starcounter.Entity.Starcounter#IObjectViewInternal#GetUInt32(System.Int32)">
            <inheritdoc />
        </member>
        <member name="M:Starcounter.Entity.Starcounter#IObjectViewInternal#GetUInt64(System.Int32)">
            <inheritdoc />
        </member>
        <member name="P:Starcounter.Entity.Starcounter#Advanced#IBindableInternal#Identity">
            <inheritdoc />
        </member>
        <member name="P:Starcounter.Entity.Starcounter#Advanced#IBindableInternal#Retriever">
            <inheritdoc />
        </member>
        <member name="P:Starcounter.Entity.Starcounter#Binding#IObjectProxyInternal#ThisHandle">
            <inheritdoc />
        </member>
        <member name="P:Starcounter.Entity.Starcounter#IObjectViewInternal#TypeBinding">
            <inheritdoc />
        </member>
        <member name="T:Starcounter.Hosting.ApplicationBase">
            <summary>
            Represents a Starcounter application and defines its most
            rudimentary properties, as shared by all components and tools
            being part of application hosting.
            </summary>
        </member>
        <member name="F:Starcounter.Hosting.ApplicationBase.Name">
            <summary>
            Gets the logical name of the application.
            </summary>
        </member>
        <member name="F:Starcounter.Hosting.ApplicationBase.FilePath">
            <summary>
            Path to the application file that was used to invoke the
            starting of the current application.
            </summary>
            <remarks>
            In the simplest scenario, this path will be equal to 
            <c>BinaryFilePath</c>, but in a scenario where there is a
            transform between the input and the actual executable
            (e.g when the input is a source code file), this property
            will return the path of the source code file while the
            <c>BinaryFilePath</c> will return the path to the assembly
            compiled on the fly.
            </remarks>
        </member>
        <member name="F:Starcounter.Hosting.ApplicationBase.BinaryFilePath">
            <summary>
            Gets the path of the application binary file of the
            current application.
            </summary>
            <remarks>
            This path is not neccessary (and even most likely not)
            the path to the executable really loaded, since Starcounter
            will process application input in between it's being launched
            and when they actually become hosted, and hosting is
            normally done from a copy, running in another directory.
            </remarks>
        </member>
        <member name="P:Starcounter.Hosting.ApplicationBase.HostedFilePath">
            <summary>
            Gets the path from which the represented application
            actually runs (governed by the system).
            </summary>
        </member>
        <member name="F:Starcounter.Hosting.ApplicationBase.WorkingDirectory">
            <summary>
            Gets the working directory of the application.
            </summary>
        </member>
        <member name="F:Starcounter.Hosting.ApplicationBase.ResourceDirectories">
            <summary>
            Gets the list of application resource directories.
            </summary>
        </member>
        <member name="F:Starcounter.Hosting.ApplicationBase.Arguments">
            <summary>
            Gets the arguments that are to be sent to a possible
            application entrypoint method.
            </summary>
        </member>
        <member name="P:Starcounter.Hosting.ApplicationBase.TransactEntrypoint">
            <summary>
            Gets or sets a value that, if set, instruct the code host to wrap
            the call to the entrypoint within a write transaction.
            </summary>
        </member>
        <member name="M:Starcounter.Hosting.ApplicationBase.#ctor(System.String,System.String,System.String,System.String,System.String[])">
            <summary>
            Initializes a new <see cref="T:Starcounter.Hosting.ApplicationBase"/>.
            </summary>
            <param name="exeName">The name of the application.</param>
            <param name="applicationFile">The application file, as given by the user.</param>
            <param name="applicationBinaryFile">The application binary.</param>
            <param name="workingDirectory">The working directory.</param>
            <param name="arguments">The arguments with which the application was started.</param>
        </member>
        <member name="M:Starcounter.Hosting.ApplicationBase.CreateFullName(System.String,System.String)">
            <summary>
            Creates the full name for a given application, hosted in a
            specified and named database.
            </summary>
            <param name="databaseName">The database/host the application runs in.
            </param>
            <param name="applicationName">The short name of the application.</param>
            <returns>The application full name.</returns>
        </member>
        <member name="M:Starcounter.Hosting.ApplicationBase.CreateDisplayName(System.String,System.String)">
            <summary>
            Creates the display name for a given application, hosted in a
            specified and named database.
            </summary>
            <param name="databaseName">The database/host the application runs in.
            </param>
            <param name="applicationName">The short name of the application.</param>
            <returns>The application display name.</returns>
        </member>
        <member name="T:Starcounter.Hosting.CodeHostExtensions">
            <summary>
            Provide hosting specific extensions to <see cref="T:Starcounter.ICodeHost"/>.
            </summary>
        </member>
        <member name="M:Starcounter.Hosting.CodeHostExtensions.GetServiceContainer(Starcounter.ICodeHost)">
            <summary>
            Retreives the <see cref="T:Starcounter.Ioc.IServiceContainer"/> of the given host,
            allowing participants to register services.
            </summary>
            <param name="host">The code host whose container to retreive.</param>
            <returns>The service container.</returns>
        </member>
        <member name="T:Starcounter.Hosting.DefaultHost">
            <summary>
            The default code host (i.e the shared app code host).
            </summary>
        </member>
        <member name="M:Starcounter.Hosting.DefaultHost.InstallCurrent">
            <summary>
            Create the singleton default host and assigns it.
            </summary>
        </member>
        <member name="T:Starcounter.Hosting.IApplicationHost">
            <summary>
            By implementing this interface on the same class that defines the
            application entrypoint, applications are given an opportunity to access
            code host services just prior to the invocation of the entrypoint.
            The callback is invoked in a context where the code host assure there
            is no other application are booting too (as opposed to the entrypoint,
            which can run in parallel of applications are started in an async
            fashion).
            </summary>
            <remarks>
            Since classes implementing this interface will be instantiated by the
            code host, we tag it [Transient] to assure that constraint.
            </remarks>
        </member>
        <member name="M:Starcounter.Hosting.IApplicationHost.HostApplication(Starcounter.Application)">
            <summary>
            Invoked by the code host when the given application are hosted but
            before it's entrypoint is invoked.
            </summary>
            <param name="application">The application that is being booted.
            </param>
        </member>
        <member name="T:Starcounter.Hosting.AssemblySpecification">
            <summary>
            Represents the interface to a assembly specification, as it is
            defined <a href="http://www.starcounter.com/internal/wiki/W3">
            here</a>.
            </summary>
        </member>
        <member name="M:Starcounter.Hosting.AssemblySpecification.#ctor(System.Type,System.Type)">
            <summary>
            Allow instantiation only from factory method.
            </summary>
        </member>
        <member name="F:Starcounter.Hosting.AssemblySpecification.Name">
            <summary>
            Provides the assembly specification class name.
            </summary>
        </member>
        <member name="F:Starcounter.Hosting.AssemblySpecification.DatabaseClassIndexName">
            <summary>
            Provides the name of the database class index type.
            </summary>
        </member>
        <member name="M:Starcounter.Hosting.AssemblySpecification.TypeNameToClassIndexName(System.String)">
            <summary>
            Converts the (full) name of a .NET type to the form used in
            the database class index when referencing it.
            </summary>
            <remarks>
            Even though .NET support naming fields with dots and plus signs,
            the C# language does not and we have the ambition to allow any
            assembly specification to be manually crafted in C# (primarily
            for the sake of testing).
            </remarks>
            <seealso cref="M:Starcounter.Hosting.AssemblySpecification.ClassIndexNameToTypeName(System.String)"/>
            <param name="reflectedName">The full name of the .NET type.</param>
            <returns>The name as used in the class index.</returns>
        </member>
        <member name="M:Starcounter.Hosting.AssemblySpecification.ClassIndexNameToTypeName(System.String)">
            <summary>
            Converts a name of a database class from the form used in the
            database class index to it's .NET equivalent.
            </summary>
            <remarks>
            Even though .NET support naming fields with dots and plus signs,
            the C# language does not and we have the ambition to allow any
            assembly specification to be manually crafted in C# (primarily
            for the sake of testing).
            </remarks>
            <seealso cref="M:Starcounter.Hosting.AssemblySpecification.TypeNameToClassIndexName(System.String)"/>
            <param name="classIndexName">The name as used in the class index.
            </param>
            <returns>The full name of the .NET type.</returns>
        </member>
        <member name="M:Starcounter.Hosting.AssemblySpecification.LoadFrom(System.Reflection.Assembly)">
            <summary>
            Loads the assembly specification from a given assembly.
            </summary>
            <param name="assembly">The assembly from which to load the
            assembly specification.</param>
            <returns>An instance representing the assembly specification
            found in the given assembly.</returns>
            <exception cref="T:Starcounter.Hosting.BackingException">
            A backing exception indicating an error occured when this
            method consumed the backing infrastructure, for example that
            an assembly specification was not found. The error code of
            the exception, along with any inner exceptions, will describe
            more precisely the problem.</exception>
        </member>
        <member name="M:Starcounter.Hosting.AssemblySpecification.GetDatabaseClasses">
            <summary>
            Gets the database types in the database class index.
            </summary>
            <returns>An array that contains all the types indexed by
            the database class index.
            </returns>
        </member>
        <member name="M:Starcounter.Hosting.AssemblySpecification.GetDatabaseTypeSpecifications">
            <summary>
            Gets all type specification types in the database class
            index.
            </summary>
            <returns>An array that contains all the types indexed by
            the database class index. Each returned type is a type
            specification.
            </returns>
        </member>
        <member name="M:Starcounter.Hosting.AssemblySpecification.GetSpecificationOf(System.Type)">
            <summary>
            Gets a <see cref="T:Starcounter.Hosting.TypeSpecification"/> instance, providing
            access to the recorded metadata of the given database type.
            </summary>
            <param name="databaseClassType">The database type whose
            database specific metadata to provide access to.</param>
            <returns>A <see cref="T:Starcounter.Hosting.TypeSpecification"/> that can be used
            to consume database specific metadata about the given type.
            </returns>
            <example>
            var spec = GetSpecificationOf(typeof(Person));
            </example>
        </member>
        <member name="M:Starcounter.Hosting.AssemblySpecification.GetSpecification(System.Type)">
            <summary>
            Gets a <see cref="T:Starcounter.Hosting.TypeSpecification"/> instance from the given
            type.
            </summary>
            <remarks>
            <para>
            Lookup is perfomed via the (cached) database class index, meaning
            that even if the given type represents a valid type specification,
            an exception can still be raised if it's not indexed.
            </para>
            </remarks>
            <param name="typeSpecificationType"></param>
            <returns></returns>
        </member>
        <member name="T:Starcounter.Hosting.BackingException">
            <summary>
            Represents a group of errors that can occur when backing constructs
            are being consumed by a host, as laid out 
            <a href="http://www.starcounter.com/internal/wiki/W3"> here</a>.
            </summary>
        </member>
        <member name="T:Starcounter.Hosting.HostManager">
            <summary>
            A class with a well-known static method that every database
            class expects to invoke once it's loaded in a host.
            <see cref="M:Starcounter.Hosting.HostManager.InitTypeSpecification(System.Type)"/>
            </summary>
        </member>
        <member name="F:Starcounter.Hosting.HostManager.Host">
            <summary>
            The currently installed <see cref="T:Starcounter.Hosting.IBackingHost"/>.
            </summary>
        </member>
        <member name="M:Starcounter.Hosting.HostManager.InitTypeSpecification(System.Type)">
            <summary>
            Every database type has the resposibility to report here as
            soon as it's loaded in a host. This is governed by the weaver,
            emitting a call here from the static constructor of each such
            type.
            </summary>
            <remarks>
            Internally forwards the call to the installed backing host,
            referenced by <see cref="F:Starcounter.Hosting.HostManager.Host"/>.
            </remarks>
            <param name="typeSpecification">The type of the type specification
            to initialize.</param>
        </member>
        <member name="T:Starcounter.Hosting.IBackingHost">
            <summary>
            Defines the interface of a host governing the runtime initialization
            of the backing infrastructure.
            </summary>
            <remarks>
            The primary use of an interface is that it allows us to create test
            doubles to test backing with fake data.
            </remarks>
        </member>
        <member name="M:Starcounter.Hosting.IBackingHost.InitializeTypeSpecification(System.Type)">
            <summary>
            Initialize the backing infrastructure type specification
            represented it's <see cref="T:System.Type"/>.
            </summary>
            <param name="typeSpec">The <see cref="T:System.Type"/> of the type
            specification to initialize.</param>
        </member>
        <member name="T:Starcounter.Hosting.TypeSpecification">
            <summary>
            Represents the interface to a database type specification.
            </summary>
            <remarks>
            The current implementation is backed by reflection and static
            constructs. By having this functionality encapsulated by this
            class, we can swap the implementation later if we find a need
            to improve it.
            </remarks>
        </member>
        <member name="F:Starcounter.Hosting.TypeSpecification.Name">
            <summary>
            Provides the type specification class name.
            </summary>
        </member>
        <member name="F:Starcounter.Hosting.TypeSpecification.TypeBindingName">
            <summary>
            Provides the name of the type specification type binding
            field.
            </summary>
        </member>
        <member name="F:Starcounter.Hosting.TypeSpecification.CrudCreateHandleName">
            <summary>
            The name of the field emitted in the generated type specification,
            destined to hold the value of the CRUD create handle for the given
            type.
            </summary>
        </member>
        <member name="F:Starcounter.Hosting.TypeSpecification.ThisHandleName">
            <summary>
            Provides the name of the "this handle" field, part of
            the database class itself.
            </summary>
        </member>
        <member name="F:Starcounter.Hosting.TypeSpecification.ThisIdName">
            <summary>
            Provides the name of the "this identity" field, part of
            the database class itself.
            </summary>
        </member>
        <member name="F:Starcounter.Hosting.TypeSpecification.ThisBindingName">
            <summary>
            Provides the name of the "this binding" field, part of
            the database class itself.
            </summary>
        </member>
        <member name="M:Starcounter.Hosting.TypeSpecification.FieldNameWithoutAnyCompilerGeneratedNameAdditions(System.String)">
            <summary>
            Normalize the given field name, removing compiler generated field
            prefixing for any field under the influence of such.
            </summary>
            <param name="fieldName">Name of the actual field.</param>
            <returns>The normalized field name</returns>
        </member>
        <member name="M:Starcounter.Hosting.TypeSpecification.FieldNameToCrudColumnHandleName(System.String)">
            <summary>
            Converts a field name to its corresponding CRUD column handle
            name.
            </summary>
            <param name="fieldName">The field name to convert.</param>
            <returns>A CRUD column handle name for the given field.</returns>
        </member>
        <member name="M:Starcounter.Hosting.TypeSpecification.CrudColumnHandleNameToFieldName(System.String)">
            <summary>
            Converts a field name to its corresponding CRUD column handle
            name.
            </summary>
            <param name="fieldName">The field name to convert.</param>
            <returns>The CRUD column handle name for the given field.</returns>
        </member>
        <member name="M:Starcounter.Hosting.TypeSpecification.#ctor(System.Type,System.Boolean)">
            <summary>
            Initializes a <see cref="T:Starcounter.Hosting.TypeSpecification"/> with the
            given <paramref name="typeSpecType"/>.
            </summary>
            <param name="typeSpecType">The <see cref="T:System.Type"/> of the
            type specification the current instance represent.</param>
            <param name="omitVerifyType">Instruts this method not to
            verify the type-level construct. Used internally by emitted
            code, when it's certain that the construct is correct.</param>
        </member>
        <member name="P:Starcounter.Hosting.TypeSpecification.CrudCreateHandle">
            <summary>
            Gets or sets the underlying CRUD create handle.
            </summary>
        </member>
        <member name="P:Starcounter.Hosting.TypeSpecification.TypeBinding">
            <summary>
            Gets or sets the underlying type binding reference.
            </summary>
        </member>
        <member name="M:Starcounter.Hosting.TypeSpecification.SetCrudColumnHandle(System.String,System.UInt64)">
            <summary>
            Assigns the column CRUD handle of a column with a specified name.
            </summary>
            <param name="columnName">The name of the column whos handle
            should be assigned.</param>
            <param name="crudHandle">Value to be assigned</param>
        </member>
        <member name="T:Starcounter.ICodeHost">
            <summary>
            Represents the running code host.
            </summary>
        </member>
        <member name="P:Starcounter.ICodeHost.Services">
            <summary>
            Gets the services installed in the current code host;
            </summary>
        </member>
        <member name="M:Starcounter.ICodeHost.Run(System.Action)">
            <summary>
            Execute the code host, passing a pointer to the application
            main loop that are to be executed when the host implementation
            consider itself ready for service.
            </summary>
            <param name="applicationMainLoop">
            Application main lopp callback.
            </param>
        </member>
        <member name="M:Starcounter.ICodeHost.Start">
            <summary>
            Start the host in a non-blocking manner.
            </summary>
        </member>
        <member name="T:Starcounter.InheritsAttribute">
            <summary>
            Custom attribute that, when applied to a non-transient field or a property
            in a database class, instructs Starcounter to treat the tagged target as a
            reference to a base type (forming a hierarchy).
            </summary>
        </member>
        <member name="T:Starcounter.DatabaseAttribute">
            <summary>
            Custom attribute that, when applied to a class, indicates it
            is a database class.
            </summary>
            <remarks>
            This class will be moved to the Starcounter root namespace.
            It is here to start with, while working with removing the
            dependency on the weaver class, since it clashes with the
            class with the same name in Sc.Weaver.Schema.
            </remarks>
        </member>
        <member name="T:Starcounter.IEntity">
            <summary>
            Defines the interface of a database entity.
            </summary>
        </member>
        <member name="M:Starcounter.IEntity.OnDelete">
            <summary>
            Invoked on any database class when it is being deleted.
            By implementing this interface and this method, we can
            support manual, cascading deletes.
            </summary>
            <remarks>
            <para>
            The transaction is locked on the thread during the call to this
            method (as long as called from Delete that is). Implementation is
            not allowed to change the current transaction or modify the state
            of the current transaction (like committing or rolling back the
            transaction). If the state of the transaction is changed by another
            thread the delete operation will be aborted.
            </para>
            </remarks>
        </member>
        <member name="T:Starcounter.IObjectView">
            <summary>
            Interface to an object that acts as a view of a data object. Provides
            methods for accessing the data of the viewed object.
            </summary>
        </member>
        <member name="T:Starcounter.ITransactionConflictException">
            <summary>
            Interface that, when implemented by an <see cref="T:System.Exception"/> class,
            means that the exception may be solved by an automatic retry of the
            transaction.
            </summary>
        </member>
        <member name="T:Starcounter.Scheduler">
            <summary>
            Class Scheduler
            </summary>
        </member>
        <member name="F:Starcounter.Scheduler._instances">
            <summary>
            The _instances
            </summary>
        </member>
        <member name="F:Starcounter.Scheduler._lastErrorMessages">
            <summary>
            The _last error messages
            </summary>
        </member>
        <member name="F:Starcounter.Scheduler._sqlEnumCache">
            <summary>
            The _SQL enum cache
            </summary>
        </member>
        <member name="P:Starcounter.Scheduler.SqlEnumCache">
            <summary>
            Gets the SQL enum cache.
            </summary>
            <value>The SQL enum cache.</value>
        </member>
        <member name="P:Starcounter.Scheduler.Id">
            <summary>
            Global id of this scheduler.
            </summary>
        </member>
        <member name="F:Starcounter.Scheduler.NrOpenIterators">
            <summary>
            Keeps track of number of open kernel iterators
            </summary>
        </member>
        <member name="M:Starcounter.Scheduler.#ctor(System.Byte)">
            <summary>
            Initializes a new instance of the <see cref="T:Starcounter.Scheduler" /> class.
            </summary>
            <param name="schedId">The scheduler ID.</param>
        </member>
        <member name="M:Starcounter.Scheduler.GetInstance(System.Boolean)">
            <summary>
            Gets the instance.
            </summary>
            <param name="nullIfNotAttached">The null if not attached.</param>
            <returns>Scheduler.</returns>
        </member>
        <member name="M:Starcounter.Scheduler.GetInstance">
            <summary>
            Gets the instance.
            </summary>
            <returns>Scheduler.</returns>
        </member>
        <member name="M:Starcounter.Scheduler.GetInstance(System.Byte)">
            <summary>
            Gets the instance.
            </summary>
            <param name="cpuNumber">The scheduler ID.</param>
            <returns>Scheduler.</returns>
        </member>
        <member name="M:Starcounter.Scheduler.Setup(System.Byte)">
            <summary>
            Setups the specified CPU count.
            </summary>
            <param name="cpuCount">The cpu count.</param>
        </member>
        <member name="M:Starcounter.Scheduler.AddErrorMessage(System.String)">
            <summary>
            Adding new error message.
            Mutually exclusive.
            </summary>
            <param name="errorMsg">The error MSG.</param>
        </member>
        <member name="M:Starcounter.Scheduler.GetErrorMessages">
            <summary>
            Fetches all error messages into one big string.
            </summary>
            <returns>String.</returns>
        </member>
        <member name="P:Starcounter.Scheduler.SchedulerCount">
            <summary>
            Gets the scheduler count.
            </summary>
            <value>The scheduler count.</value>
        </member>
        <member name="M:Starcounter.Scheduler.InvalidateCache(GlobalQueryCache)">
            <summary>
            Invalidates global cache, local cache of this scheduler and sets to invalidate local caches of other schedulers
            </summary>
            <param name="generation">The generation.</param>
        </member>
        <member name="T:Starcounter.ThreadData">
            <summary>
            This class represents the context of the thread that is
            scheduled for execution by a virtual processor (VPContext).
            Every thread holds an independent instance of this class.
            </summary>
        </member>
        <member name="F:Starcounter.ThreadData.Current">
            <summary>
            The current
            </summary>
        </member>
        <member name="F:Starcounter.ThreadData.inTransactionScope_">
            <summary>
            Indicates if the thread is in a transaction scope.
            </summary>
            <remarks>
            While transaction is in a transaction scope then application code is
            not allowed to switch current transaction on the thread.
            </remarks>
        </member>
        <member name="M:Starcounter.ThreadData.GetCurrentIfAttachedAndReattachIfAutoDetached">
            <summary>
            Gets the current if attached and reattach if auto detached.
            </summary>
            <returns>ThreadData.</returns>
        </member>
        <member name="F:Starcounter.ThreadData.Scheduler">
            <summary>
            The scheduler
            </summary>
        </member>
        <member name="F:Starcounter.ThreadData._pStateShare">
            <summary>
            The _p state share
            </summary>
        </member>
        <member name="M:Starcounter.ThreadData.#ctor(System.Byte,System.UInt32*)">
            <summary>
            Initializes a new instance of the <see cref="T:Starcounter.ThreadData" /> class.
            </summary>
            <param name="schedulerNumber">The scheduler number.</param>
            <param name="pStateShare">The p state share.</param>
        </member>
        <member name="T:Starcounter.Legacy.BoundClass">
            <summary>
            Represent a user defined database class that has been bound to the
            database.
            </summary>
        </member>
        <member name="P:Starcounter.Legacy.BoundClass.Name">
            <summary>
            Gets the fully qualified name of the bound class.
            </summary>
        </member>
        <member name="P:Starcounter.Legacy.BoundClass.ShortName">
            <summary>
            Gets the short name of the bound class.
            </summary>
        </member>
        <member name="P:Starcounter.Legacy.BoundClass.RuntimeHandle">
            <summary>
            Gets the runtime handle of this bound class. The runtime handle
            can be used to instantiate/insert it effectively during runtime.
            </summary>
        </member>
        <member name="P:Starcounter.Legacy.BoundClass.BaseType">
            <summary>
            Gets the fully qualified name of the current classes base
            bound class.
            </summary>
        </member>
        <member name="P:Starcounter.Legacy.BoundClass.DynamicType">
            <summary>
            Gets the fully qualified name of the class the current bound
            class has defined as it's dynamic type.
            </summary>
        </member>
        <member name="M:Starcounter.Legacy.BoundClass.GetClass(System.String)">
            <summary>
            Retrive a <see cref="T:Starcounter.Legacy.BoundClass"/> instance based on a fully
            qualified name identifier.
            </summary>
            <param name="identifier">Fully qualified name.</param>
            <returns>Instance representing the name.</returns>
        </member>
        <member name="M:Starcounter.Legacy.BoundClass.GetClasses(System.String[],System.Func{Starcounter.Legacy.BoundClass,System.Boolean})">
            <summary>
            Retreive a set of <see cref="T:Starcounter.Legacy.BoundClass"/> instances based on a
            set of fully qualified name identifiers.
            </summary>
            <param name="identifiers">Fully qualified identifiers</param>
            <param name="filter">Optional filter</param>
            <returns>A set of <see cref="T:Starcounter.Legacy.BoundClass"/> instances</returns>
        </member>
        <member name="T:Starcounter.Legacy.LegacyHostExtensions">
            <summary>
            Host extension methods for legacy applications that need to
            access a legacy context.
            </summary>
        </member>
        <member name="M:Starcounter.Legacy.LegacyHostExtensions.GetLegacyContext(Starcounter.Application)">
            <summary>
            Gets the legacy context of the given application.
            </summary>
            <param name="application">The application.</param>
            <returns>A <see cref="T:Starcounter.Legacy.LegacyContext"/> for the given
            application.</returns>
        </member>
        <member name="M:Starcounter.Legacy.LegacyRuntimeSupport.New(System.Int32)">
            <summary>
            Watch out: this is legacy support, intended to be used by those
            that know how. Focus is performance, no validations occur! Passing
            a bad argument has undefined behaviour.
            </summary>
            <param name="runtimeClassHandle">Runtime handle retreived from legacy layer
            </param>
            <returns>New instance</returns>
        </member>
        <member name="M:Starcounter.Legacy.LegacyRuntimeSupport.New(System.Object)">
            <summary>
            Watch out: this is legacy support, intended to be used by those
            that know how. Focus is performance, no validations occur. Passing
            a bad argument has undefined behaviour.
            </summary>
            <param name="runtimeProxyTemplate">Template proxy</param>
            <returns>New instance</returns>
        </member>
        <member name="T:Starcounter.Metadata.MetadataEntity">
            <summary>
            Defines a base class used by all generated metadata classes.
            </summary>
        </member>
        <member name="M:Starcounter.Metadata.MetadataEntity.#ctor(Starcounter.Internal.Uninitialized)">
            <inheritdoc />
        </member>
        <member name="M:Starcounter.Metadata.MetadataEntity.#ctor(System.UInt64)">
            <summary>
            Defines the constructor that instantiate all metadata types
            in the database.
            </summary>
            <param name="handle">CRUD creation handle</param>
        </member>
        <member name="T:Starcounter.HtmlFromJsonProvider">
            <summary>
            Built-in MIME provider that react to conversions of Json resources into
            HTML by investigating the JSON (view model) for a property referencing a
            static file, and provide the content of that file via internal request.
            </summary>
        </member>
        <member name="P:Starcounter.HtmlFromJsonProvider.IgnoreJsonWithoutHtml">
            <summary>
            Gets or sets a value relaxing the provider to ignore any resource that
            does not expose a property referencing HTML. The default is <c>true</c>.
            Otherwise, the provider will raise an error on any resource that
            misses a property referencing an HTML view path.
            </summary>
        </member>
        <member name="M:Starcounter.HtmlFromJsonProvider.#ctor">
            <summary>
            Initialize a new <see cref="T:Starcounter.HtmlFromJsonProvider"/> instance.
            </summary>
        </member>
        <member name="T:Starcounter.IMiddleware">
            <summary>
            Abstraction that allow middleware to be wrapped up in classes and
            registered by applications to customize the request pipeline.
            </summary>
        </member>
        <member name="M:Starcounter.IMiddleware.Register(Starcounter.Application)">
            <summary>
            Registers the current middleware.
            </summary>
            <remarks>
            Invoking this method should preferably done by the code host. Hence,
            as an advice to implementors of this interface, we recommend implementing
            it explicitly.
            </remarks>
            <param name="application">The application enabling the current
            middleware.</param>
        </member>
        <member name="T:Starcounter.JsonAutoSessions">
            <summary>
            Middleware that, when installed, make sure that when HTML is
            requested and the handler respond with JSON, the JSON instance
            returned is attached to a (patching) session if it's not
            already.
            </summary>
        </member>
        <member name="T:Starcounter.MimeProvisionDelegate">
            <summary>
            Defines the signature of a MIME providers provision method.
            </summary>
            <param name="context">The context passed to the method.</param>
            <param name="next">The next provider in the chain.</param>
        </member>
        <member name="T:Starcounter.MimeProvider">
            <summary>
            Support custom mime providers to be installed as middleware, affecting the
            request pipeline for an application by governing in the convertion from a
            resource into a certain MIME representation.
            </summary>
            <remarks>Currently, installed MIME providers are activated and invoked only
            when the cargo is based on Json. This is an implementation detail though, and
            we recommend all custom providers not to assume this as it will likely change
            eventually.
            </remarks>
        </member>
        <member name="P:Starcounter.MimeProvider.MimeType">
            <summary>
            Gets the MIME type of this provider.
            </summary>
        </member>
        <member name="M:Starcounter.MimeProvider.For(System.String,Starcounter.MimeProvisionDelegate)">
            <summary>
            Creates an <see cref="T:Starcounter.IMiddleware"/> abstraction representing a mime provider
            backed by the given <paramref name="provisioner"/> delegate.
            </summary>
            <param name="mimeType">The MIME type this provider shall handle.</param>
            <param name="provisioner">The provisioner method.</param>
            <returns>An instance of the provider that can be installed as middleware.
            </returns>
        </member>
        <member name="M:Starcounter.MimeProvider.Html(Starcounter.MimeProvisionDelegate)">
            <summary>
            Provide a simple way to create a MIME type provider for "text/html".
            </summary>
            <param name="provisioner">The provisioner method.</param>
            <returns>An instance of the provider that can be installed as middleware.
            </returns>
        </member>
        <member name="T:Starcounter.MimeProviderContext">
            <summary>
            Context passed to installed MIME providers.
            </summary>
        </member>
        <member name="F:Starcounter.MimeProviderContext.Request">
            <summary>
            Gets the originating request.
            </summary>
        </member>
        <member name="F:Starcounter.MimeProviderContext.Resource">
            <summary>
            Gets the resource returned from the handler.
            </summary>
        </member>
        <member name="P:Starcounter.MimeProviderContext.Result">
            <summary>
            Gets or sets the result of this or any previous provider.
            </summary>
        </member>
        <member name="P:Starcounter.MimeProviderContext.ProvidersInvoked">
            <summary>
            Gets the number of providers invoked in this chain.
            </summary>
            <remarks>Providers consulting this value from within the handler
            should be aware it illustrate how many providers BEFORE the current
            one has been invoked. Hence, the count for the entire request chain
            is not established until AFTER the last provider has been invoked.
            </remarks>
        </member>
        <member name="T:Starcounter.MimeProviderMap">
            <summary>
            Map of installed MIME providers. Governs thread-safe registration and
            lock-free consumption of MIME providers.
            </summary>
        </member>
        <member name="T:Starcounter.MimeProviderMap.Node">
            <summary>
            The representation we keep of any provider once it's installed (i.e
            when Use() is invoked).
            </summary>
        </member>
        <member name="M:Starcounter.MimeProviderMap.Install(Starcounter.MimeType,Starcounter.MimeProvisionDelegate)">
            <summary>
            Installs the given provisioner as a provider of the specified
            MIME type.
            </summary>
            <param name="type">The MIME type <paramref name="target"/> can
            provide.</param>
            <param name="target">The provisioner</param>
        </member>
        <member name="T:Starcounter.PartialToStandaloneHtmlProvider">
             <summary>
             For any HTTP request with `Accept: text/html` with a response that is HTML,
             checks if the HTML document is a partial (does not start with a doctype).
             If yes, returns the app shell that contains code to bootstrap
             a Palindrom connection instead of that HTML.
            
             The HTML template cointans the session URL that was returned from the handler,
             so that Palindrom can request the relevant JSON in a following request.
            
             Must be used after `HtmlFromJsonProvider` middleware.
            
             A custom HTML template can be provided as a string parameter to the constructor.
            
             Middleware only wraps requests that have a HTTP handler. Since this middleware
             wraps the actual response, it will also have the HTTP status code
             that was returned from the handler.
             </summary>
        </member>
        <member name="M:Starcounter.PartialToStandaloneHtmlProvider.#ctor">
            <summary>
            Creates a new instance of <see cref="T:Starcounter.PartialToStandaloneHtmlProvider"/>
            using the template fetched from the static file server.
            </summary>
        </member>
        <member name="M:Starcounter.PartialToStandaloneHtmlProvider.#ctor(System.String)">
            <summary>
            Creates a new instance of <see cref="T:Starcounter.PartialToStandaloneHtmlProvider"/>
            using the given standalone page template.
            </summary>
        </member>
        <member name="T:Starcounter.Db">
            <summary>
            Class Db
            </summary>
        </member>
        <member name="F:Starcounter.Db.NullString">
            <summary>
            Used to represent the "null" value as a string in a uniform way.
            </summary>
        </member>
        <member name="F:Starcounter.Db.NoIdString">
            <summary>
            The no id string
            </summary>
        </member>
        <member name="F:Starcounter.Db.FieldSeparator">
            <summary>
            The field separator
            </summary>
        </member>
        <member name="M:Starcounter.Db.BinaryToHex(Starcounter.Binary)">
            <summary>
            Binary to hex.
            </summary>
            <param name="binValue">The bin value.</param>
            <returns>String.</returns>
        </member>
        <member name="M:Starcounter.Db.HexToBinary(System.String)">
            <summary>
            Hexes to binary.
            </summary>
            <param name="hexString">The hex string.</param>
            <returns>Binary.</returns>
        </member>
        <member name="M:Starcounter.Db.SQL(System.String,System.Object[])">
            <summary>
            Returns the result of an SQL query as an IEnumerable.
            </summary>
            <param name="query">An SQL query.</param>
            <param name="values">The values to be used for variables in the query.</param>
            <returns>The result of the SQL query.</returns>
        </member>
        <member name="M:Starcounter.Db.SQL``1(System.String,System.Object[])">
            <summary>
            Returns the result of an SQL query as an IEnumerable.
            </summary>
            <typeparam name="T">The type the items in the result set should have.</typeparam>
            <param name="query">An SQL query.</param>
            <param name="values">The values to be used for variables in the query.</param>
            <returns>The result of the SQL query.</returns>
        </member>
        <!-- Badly formed XML comment ignored for member "M:Starcounter.Db.SlowSQL(System.String,System.Object[])" -->
        <!-- Badly formed XML comment ignored for member "M:Starcounter.Db.SlowSQL``1(System.String,System.Object[])" -->
        <member name="P:Starcounter.Db.Environment">
            <summary>
            </summary>
        </member>
        <member name="P:Starcounter.Db.Applications">
            <summary>
            Gets the set of <see cref="T:Starcounter.Application"/>s currently running
            in the <see cref="T:Starcounter.Db"/>.
            </summary>
        </member>
        <member name="E:Starcounter.Db.DatabaseStopping">
            <summary>
            Occurs when the database is being stopped.
            </summary>
        </member>
        <member name="M:Starcounter.Db.FromId``1(System.String)">
            <summary>
            Retrieves an instance from the database by its given unique
            identity.
            </summary>
            <typeparam name="T">Type of the instance to retrieve.</typeparam>
            <param name="base64Id">The unique identity of the instance in the
            form of a base-64 encoded identity string.</param>
            <returns>The database instance with the given identity, or
            null if no instance with that identity exist.</returns>
        </member>
        <member name="M:Starcounter.Db.FromId``1(System.UInt64)">
            <summary>
            Retrieves an instance from the database by its given unique
            identity.
            </summary>
            <typeparam name="T">Type of the instance to retrieve.</typeparam>
            <param name="id">The unique identity of the instance.</param>
            <returns>The database instance with the given identity, or
            null if no instance with that identity exist.</returns>
        </member>
        <member name="M:Starcounter.Db.FromId(System.String)">
            <summary>
            Retrieves an instance from the database by its given unique
            identity.
            </summary>
            <param name="base64Id">The unique identity of the instance in the
            form of a base-64 encoded identity string.</param>
            <returns>The database instance with the given identity, or
            null if no instance with that identity exist.</returns>
        </member>
        <member name="M:Starcounter.Db.FromId(System.UInt64)">
            <summary>
            Retrieves an instance from the database by its given unique
            identity.
            </summary>
            <param name="id">The unique identity of the instance.</param>
            <returns>The database instance with the given identity, or
            null if no instance with that identity exist.</returns>
        </member>
        <member name="M:Starcounter.Db.LookupTable(System.String)">
            <summary>
            Gets the table definition based on the name.
            </summary>
            <param name="name">The fullname of the table.</param>
            <returns>TableDef.</returns>
        </member>
        <member name="M:Starcounter.Db.CreateTable(Starcounter.Binding.TableDef,Starcounter.Binding.TableDef)">
            <summary>
            Creates the table.
            </summary>
            <param name="tableDef">The table def.</param>
            <param name="inheritedTableDef">The inherited table def.</param>
        </member>
        <member name="M:Starcounter.Db.Transact(System.Action,System.Int32)">
            <summary>
            Executes the given <paramref name="action"/> within a new transaction.
            </summary>
            <param name="action">The action to execute.</param>
            <param name="maxRetries">Number of times to retry the execution of the
            transaction if committing it fails because of a conflict with another
            transaction. Specify <c>int.MaxValue</c> to instruct Starcounter
            to try until the transaction succeeds. Specify 0 to disable retrying.
            </param>
        </member>
        <member name="M:Starcounter.Db.Transact``1(System.Action{``0},``0,System.Int32)">
            <summary>
            Executes the given <paramref name="action"/> within a new transaction.
            </summary>
            <typeparam name="T">The type of the parameter for the action.</typeparam>
            <param name="action">The action to execute.</param>
            <param name="arg">Parameter to use as input to the action.</param>
            <param name="maxRetries">Number of times to retry the execution of the
            transaction if committing it fails because of a conflict with another
            transaction. Specify <c>int.MaxValue</c> to instruct Starcounter
            to try until the transaction succeeds. Specify 0 to disable retrying.
            </param>
        </member>
        <member name="M:Starcounter.Db.Transact``1(System.Func{``0},System.Int32)">
            <summary>
            Executes the given <paramref name="func"/> within a new transaction.
            </summary>
            <typeparam name="TResult">The type of the return value of the func.</typeparam>
            <param name="func">The func to execute.</param>
            <param name="maxRetries">Number of times to retry the execution of the
            transaction if committing it fails because of a conflict with another
            transaction. Specify <c>int.MaxValue</c> to instruct Starcounter
            to try until the transaction succeeds. Specify 0 to disable retrying.
            </param>
            <returns>The return value of the func.</returns>
        </member>
        <member name="M:Starcounter.Db.Transact``2(System.Func{``0,``1},``0,System.Int32)">
            <summary>
            Executes the given <paramref name="func"/> within a new transaction.
            </summary>
            <typeparam name="TResult">The type of the return value of the func.</typeparam>
            <typeparam name="T">The type of the parameter of the func.</typeparam>
            <param name="func">The func to execute.</param>
            <param name="arg">Parameter to use as input to the func</param>
            <param name="maxRetries">Number of times to retry the execution of the
            transaction if committing it fails because of a conflict with another
            transaction. Specify <c>int.MaxValue</c> to instruct Starcounter
            to try until the transaction succeeds. Specify 0 to disable retrying.
            </param>
            <returns>The return value of the func.</returns>
        </member>
        <member name="M:Starcounter.Db.TransactAsync(System.Action)">
            <summary>
            Executes the given <paramref name="action"/> within a new transaction. 
            Action is performed synchronously and returned Task manifests
            delayed durability of the transaction
            </summary>
            <param name="action">The action to execute.</param>
            <returns>A task represtenting asynchronouse activity of making the transaction durable</returns>
        </member>
        <member name="M:Starcounter.Db.TransactAsync(System.Action,Starcounter.Db.Advanced.TransactOptions)">
            <summary>
            Executes the given <paramref name="action"/> within a new transaction. 
            Action is performed synchronously and returned Task manifests
            delayed durability of the transaction
            </summary>
            <param name="action">The action to execute.</param>
            <param name="opts">Options to tweak transaction behavior.</param>
            <returns>A task represtenting asynchronouse activity of making the transaction durable</returns>
        </member>
        <member name="M:Starcounter.Db.Advanced.GlobalSlowSQL(System.String,System.Object[])">
            <summary>
            Returns the result of an SQL query as an SqlResult which implements IEnumerable.
            Especially queries with expected slow execution are supported, as for example aggregations.
            Allows access to classes from all applications (fully namespaced SQL names should be supplied).
            </summary>
            <param name="query">An SQL query.</param>
            <param name="values">The values to be used for variables in the query.</param>
            <returns>The result of the SQL query.</returns>
        </member>
        <member name="M:Starcounter.Db.Advanced.GlobalSQL(System.String,System.Object[])">
            <summary>
            Returns the result of an SQL query as an Rows which implements IEnumerable.
            Allows access to classes from all applications (fully namespaced SQL names should be supplied).
            </summary>
            <param name="query">An SQL query.</param>
            <param name="values">The values to be used for variables in the query.</param>
            <returns>The result of the SQL query.</returns>
        </member>
        <member name="M:Starcounter.Db.Advanced.GlobalSQL``1(System.String,System.Object[])">
            <summary>
            Returns the result of an SQL query as an SqlResult&lt;T&gt; which implements IEnumerable&lt;T&gt;.
            Allows access to classes from all applications (fully namespaced SQL names should be supplied).
            </summary>
            <typeparam name="T">The type the items in the result set should have.</typeparam>
            <param name="query">An SQL query.</param>
            <param name="values">The values to be used for variables in the query.</param>
            <returns>The result of the SQL query.</returns>
        </member>
        <member name="M:Starcounter.Db.Advanced.GlobalSlowSQL``1(System.String,System.Object[])">
            <summary>
            Returns the result of an SQL query as an SqlResult which implements IEnumerable.
            Especially queries with expected slow execution are supported, as for example aggregations.
            Allows access to classes from all applications (fully namespaced SQL names should be supplied).
            </summary>
            <param name="query">An SQL query.</param>
            <param name="values">The values to be used for variables in the query.</param>
            <returns>The result of the SQL query.</returns>
        </member>
        <member name="T:Starcounter.Db.Advanced.TransactOptions">
            <summary>
            Specify advanced parameters to be used with <see cref="M:Starcounter.Db.Transact(System.Action,Starcounter.Db.Advanced.TransactOptions)"/>
            and <see cref="M:Starcounter.Db.TransactAsync(System.Action,Starcounter.Db.Advanced.TransactOptions)"/>
            </summary>
        </member>
        <member name="P:Starcounter.Db.Advanced.TransactOptions.MaxRetries">
            <summary>
            Number of times to retry the execution of the
            transaction if committing it fails because of a conflict with another
            transaction. Specify <c>int.MaxValue</c> to instruct Starcounter
            to try until the transaction succeeds. Specify 0 to disable retrying.
            </summary>
            <remarks>
            Default value is 100
            </remarks>
        </member>
        <member name="P:Starcounter.Db.Advanced.TransactOptions.ApplyCommitHooks">
            <summary>
            Gets or sets a value dictating if commit hooks should execute
            for the transaction these options apply to.
            </summary>
        </member>
        <member name="P:Starcounter.Db.Advanced.TransactOptions.ApplyPostCommitHooks">
            <summary>
            Gets or sets a value dictating if post commit hooks should execute
            for the transaction these options apply to.
            </summary>
        </member>
        <member name="P:Starcounter.Db.Advanced.TransactOptions.ApplyBeforeDeleteHook">
            <summary>
            Gets or sets a value dictating if the before delete hook should
            execute for the transaction these options apply to.
            </summary>
        </member>
        <member name="P:Starcounter.Db.Advanced.TransactOptions.SourceToken">
            <summary>
            Specifies <see cref="T:Starcounter.TransactionToken"/> to make current transaction share
            the same snapshot as a transaction token was aquired from
            </summary>
            <remarks>
            See <see cref="P:Starcounter.Db.CurrentTransactionToken"/> for details
            </remarks>
        </member>
        <member name="P:Starcounter.Db.Advanced.TransactOptions.maxRetries">
            <summary>
            Obsolete. Use <c>MaxRetries</c> instead.
            </summary>
        </member>
        <member name="P:Starcounter.Db.Advanced.TransactOptions.applyHooks">
            <summary>
            Obsolete. Use combination of <c>ApplyCommitHooks</c>, <c>ApplyPostCommitHooks</c>
            and <c>ApplyBeforeDeleteHook</c> instead.
            </summary>
        </member>
        <member name="P:Starcounter.Db.Advanced.TransactOptions.source_token">
            <summary>
            Obsolete. Use <c>SourceToken</c> instead.
            </summary>
        </member>
        <member name="M:Starcounter.Db.Transact(System.Action,Starcounter.Db.Advanced.TransactOptions)">
            <summary>
            Executes the given <paramref name="action"/> within a new transaction.
            </summary>
            <param name="action">The action to execute.</param>
            <param name="opts">Options to tweak transaction behavior.</param>
        </member>
        <member name="P:Starcounter.Db.CurrentTransactionToken">
            <summary>
            Get the <see cref="T:Starcounter.TransactionToken"/> that  holds information that required to launch a transaction
            that will share the same snapshot as the current transaction. Sharing a snapshot means that both
            transaction can read the same data unless they have overwritten it with their own writes.
            The token is to be passed to <see cref="M:Starcounter.Db.Transact(System.Action,Starcounter.Db.Advanced.TransactOptions)"/> 
            or <see cref="M:Starcounter.Db.TransactAsync(System.Action,Starcounter.Db.Advanced.TransactOptions)"/> via <see cref="P:Starcounter.Db.Advanced.TransactOptions.source_token"/>.
            The token can be used to launch as many transaction as you need and it doesn't matter if original transaction token was taken 
            from is alive or not. Finally, token has to be disposed and you have to dispose it as soon as you don't need it.
            </summary>
            <remarks>
             If you changed some data in the current transaction - that data are not included in the token.
             You can take it like this - no matter when you retrieve a token during transaction lifetime - token 
             always represents data state as it was at the start of transaction.
             Other than being based on the same snapshot, cloned transactions are just as ordinary as others.
             You may modify data inside cloned transaction and they undergo normal conflict detection process.
            </remarks>
        </member>
        <member name="M:Starcounter.Db.HandleTransactException(System.Exception,System.UInt64,System.Int32,System.Int32)">
            <summary>
            Checks the specified exception. If the exception is of type <see cref="T:Starcounter.ITransactionConflictException"/>
            and the number of retries is lower then max number of retries true is returned and no other action is taken.
            If the maximum number of retries is reached an unhandled transaction conflict is thrown.
            For other exception types false is returned. 
            </summary>
            <param name="ex">The catched exception.</param>
            <param name="handle">Handle of the transaction in use.</param>
            <param name="verify">Verify of the transaction in use.</param>
            <param name="retries">The number of times the transaction have been retried.</param>
            <param name="maxRetries">The maximum number of retries.</param>
            <returns></returns>
        </member>
        <member name="M:Starcounter.Db.SetEnvironment(Starcounter.Advanced.DbEnvironment)">
            <summary>
            </summary>
        </member>
        <member name="M:Starcounter.Db.IsPersistent(System.Object)">
            <summary>
            Gets a value indicating of the given object is a
            Starcounter database instance.
            </summary>
            <param name="obj">The object to evaluate.</param>
            <returns>True if considered a database object; false
            otherwise.</returns>
        </member>
        <member name="M:Starcounter.Db.Delete(System.Object)">
            <summary>
            Deletes an object from the database. The runtime will check
            the object to see if it's a valid database object. If it is,
            the delete will be carried out. If not, an exception will be
            raised.
            </summary>
            <param name="target">
            The database object to delete.</param>
        </member>
        <member name="M:Starcounter.Db.RaiseDatabaseStoppingEvent">
            <summary>
            Raise the event that signals the database is stopping.
            </summary>
        </member>
        <member name="T:Starcounter.DbHelper">
            <summary>
            Class DbHelper
            </summary>
        </member>
        <member name="M:Starcounter.DbHelper.StringCompare(System.String,System.String)">
            <summary>
            Compares two strings according to the default collation.
            </summary>
            <param name="str1">First string to compare.</param>
            <param name="str2">Second string to compare.</param>
            <returns>
            Negative value is first string is less then second, positive value is first string is
            greater then second and 0 if equal.
            </returns>
        </member>
        <member name="M:Starcounter.DbHelper.FromID(System.UInt64)">
            <summary>
            Froms the ID.
            </summary>
            <param name="oid">The oid.</param>
            <returns>Entity.</returns>
        </member>
        <member name="M:Starcounter.DbHelper.GetObjectNo(System.Object)">
            <summary>
            Returns the object identifier of the specified object.
            </summary>
            <remarks>
            Note that all this method does is to read the object identifier from
            the proxy. It doesn't check if the proxy is valid in any way, the
            underlying object may for example be have been deleted in which
            case the method returns the identifier the object had.
            </remarks>
            <param name="obj">The object to get the identity from.</param>
            <exception cref="T:System.ArgumentNullException">
            Raised if <paramref name="obj"/> is null.</exception>
            <exception cref="T:System.InvalidCastException">Raise if Starcounter don't
            recognize the type of <paramref name="obj"/> as a type it knows
            how to get a database identity from.</exception>
            <returns>
            The unique object identity of the given object.
            </returns>
        </member>
        <member name="M:Starcounter.DbHelper.GetObjectID(System.Object)">
            <summary>
            Returns web friendly string of object identity.
            </summary>
            <param name="obj">The object to get the identity from.</param>
            <returns>The string</returns>
        </member>
        <member name="M:Starcounter.DbHelper.Base64ForUrlEncode(System.UInt64)">
            <summary>
             Base 64 Encoding with URL and Filename Safe Alphabet using UTF-8 character set.
            </summary>
            <param name="objectNo">The original string</param>
            <returns>The Base64 encoded string</returns>
        </member>
        <member name="M:Starcounter.DbHelper.Base64ForUrlDecode(System.String)">
            <summary>
             Decode Base64 encoded string with URL and Filename Safe Alphabet using UTF-8.
            </summary>
            <param name="objectID">Base64 code</param>
            <returns>The decoded string.</returns>
        </member>
        <member name="M:Starcounter.DbHelper.WriteBinary(Starcounter.Internal.TupleWriterBase64@,Starcounter.Binary)">
            <summary>
            Adds given binary as byte array to the tuple.
            </summary>
            <param name="tuple">The tuple</param>
            <param name="value">The value</param>
        </member>
        <member name="M:Starcounter.DbHelper.WriteBinary(Starcounter.Internal.SafeTupleWriterBase64@,Starcounter.Binary)">
            <summary>
            Adds given binary as byte array to the tuple.
            </summary>
            <param name="tuple">The tuple</param>
            <param name="value">The value</param>
        </member>
        <member name="M:Starcounter.DbHelper.ReadBinary(Starcounter.Internal.TupleReaderBase64@)">
            <summary>
            Reads next byte array value in the tuple into new binary.
            </summary>
            <param name="tuple">The tuple.</param>
            <returns>New binary</returns>
        </member>
        <member name="M:Starcounter.DbHelper.ReadBinary(Starcounter.Internal.SafeTupleReaderBase64@,System.Int32)">
            <summary>
            Reads byte array value at the given position in the tuple into new binary.
            </summary>
            <param name="tuple">The tuple</param>
            <param name="index">The position</param>
            <returns>New binary</returns>
        </member>
        <member name="T:Starcounter.LogSources">
            <summary>
            Class LogSources
            </summary>
        </member>
        <member name="F:Starcounter.LogSources.Sql">
            <summary>
            The SQL
            </summary>
        </member>
        <member name="F:Starcounter.LogSources.Hosting">
            <summary>
            Well-known log source used by the database host.
            </summary>
        </member>
        <member name="F:Starcounter.LogSources.CodeHostLoader">
            <summary>
            Log sources used by the Starcounter code host loader.
            </summary>
        </member>
        <member name="F:Starcounter.LogSources.CodeHostAssemblyResolver">
            <summary>
            Log sources used by the Starcounter code host assembly resolver.
            </summary>
        </member>
        <member name="F:Starcounter.LogSources.Unload">
            <summary>
            Well-known log source used by the database host when unloading.
            </summary>
        </member>
        <member name="T:Starcounter.ObjectView.ViewReader">
            <summary>
            Provide the ability for clients to enumerate values of any 
            <see cref="T:Starcounter.IObjectViewInternal"/> as string data.
            </summary>
        </member>
        <member name="M:Starcounter.ObjectView.ViewReader.#ctor(Starcounter.ObjectView.ValueFormatter)">
            <summary>
            
            </summary>
            <param name="vf"></param>
        </member>
        <member name="M:Starcounter.ObjectView.ViewReader.AllValues(Starcounter.IObjectViewInternal,System.Action{Starcounter.Binding.IPropertyBinding,System.String,System.String})">
            <summary>
            
            </summary>
            <param name="view"></param>
            <param name="receiver"></param>
        </member>
        <member name="T:Starcounter.SqlEnumerator`1">
            <summary>
            </summary>
        </member>
        <member name="T:Starcounter.QueryResultRows`1">
            <summary>
            
            </summary>
        </member>
        <member name="T:Starcounter.RecursiveTryLock">
            <summary>
            Resembles behavior of Monitor.TryEnter and Monitor.Exit
            The reason to implement own implementation is due to possible bug 
            in Debugger.NotifyOfCrossThreadDependency which doesn't work if 
            calling thread holds a lock obtained with the Monitor class.
            The bug is deemed possible as it's not confirmed by MS yet.
            </summary>
        </member>
        <member name="M:Starcounter.SqlProcessor.MetadataPopulation.PopulateClrPrimitives">
            <summary>
            Populates CLR primitives meta-table if it is empty
            </summary>
        </member>
        <member name="T:Starcounter.TransientAttribute">
            <summary>
            Custom attribute that, when applied to a field or auto-implemented
            property in a database class, makes the field/property transient, 
            meaning it will not be stored in the database nor accessible using
            SQL. Can also be used on classes and interfaces, to black list classes
            when they are whitelisted because of assembly- or file-based
            database configuration.
            </summary>
        </member>
        <member name="T:Starcounter.ObjectRef">
            <summary>
            Struct ObjectRef
            </summary>
        </member>
        <member name="F:Starcounter.ObjectRef.ObjectID">
            <summary>
            The object ID
            </summary>
        </member>
        <member name="P:Starcounter.ObjectRef.Reference">
            <summary>
            Reference to the object.
            </summary>
        </member>
        <member name="F:Starcounter.ObjectRef.ETI">
            <summary>
            The ETI
            </summary>
        </member>
        <member name="T:Starcounter.ThreadHelper">
            <summary>
            Class ThreadHelper
            </summary>
        </member>
        <member name="M:Starcounter.ThreadHelper.SetYieldBlock">
            <summary>
            Sets the yield block.
            </summary>
        </member>
        <member name="M:Starcounter.ThreadHelper.ReleaseYieldBlock">
            <summary>
            Releases the yield block.
            </summary>
        </member>
        <member name="T:Starcounter.ObjectDoesntExistException">
            <summary>
            Exception thrown when attempting to access or modify an object that was
            deleted before the current transaction was started (a transferred
            object).
            </summary>
        </member>
        <member name="M:Starcounter.ObjectDoesntExistException.#ctor(System.Runtime.Serialization.SerializationInfo,System.Runtime.Serialization.StreamingContext)">
            <summary>
            Initializes a new instance of the <see cref="T:Starcounter.ObjectDoesntExistException" /> class.
            </summary>
            <param name="info">The info.</param>
            <param name="context">The context.</param>
        </member>
        <member name="T:Starcounter.Task">
            <summary>
            Class representing a task.
            </summary>
        </member>
        <member name="P:Starcounter.Task.UserAction">
            <summary>
            User action.
            </summary>
        </member>
        <member name="M:Starcounter.Task.#ctor(System.Action,System.Void*)">
            <summary>
            </summary>
        </member>
        <member name="M:Starcounter.Task.Run">
            <summary>
            ITask interface implementation. Calls the action delegate
            associated with the task, intercepts any transaction and stores it
            with the task object.
            </summary>
        </member>
        <member name="T:Starcounter.UserTaskInfo">
            <summary>
            Saved structure containing user task.
            </summary>
        </member>
        <member name="T:Starcounter.DbSession">
            <summary>
            </summary>
        </member>
        <member name="F:Starcounter.DbSession.asyncTasksAnyScheduler_">
            <summary>
            List of user tasks scheduled on any scheduler.
            </summary>
        </member>
        <member name="F:Starcounter.DbSession.asyncTasksPerScheduler_">
            <summary>
            List of user tasks per scheduler.
            </summary>
        </member>
        <member name="F:Starcounter.DbSession.roundRobinSchedId_">
            <summary>
            Current round robin scheduler id value.
            </summary>
        </member>
        <member name="M:Starcounter.DbSession.Init">
            <summary>
            Initializes schdeduling data.
            </summary>
        </member>
        <member name="M:Starcounter.DbSession.GetAndExecuteQueuedTasks(System.Action{System.Action,System.String})">
            <summary>
            Gets and executes already scheduled tasks on current scheduler.
            </summary>
        </member>
        <member name="M:Starcounter.DbSession.RunAsync(System.Action,System.Boolean,System.Byte)">
            <summary>
            Runs the task represented by the action delegate asynchronously.
            </summary>
            <remarks>
            Schedules a task on a given scheduler (even if current scheduler is the same).
            In case if invalid scheduler is supplied then all schedulers are tried in round robin
            manner. When all schedulers are tried but the queues are full - then task is put into
            the awaiting queue.
            </remarks>
        </member>
        <member name="M:Starcounter.DbSession.RunSyncPrevious(System.Action,System.Byte)">
            <summary>
            Runs the task represented by the action delegate synchronously.
            </summary>
            <remarks>
            <para>
            If the calling thread is attached to a Starcounter scheduler, the
            thread simply calls the action delegate representing the task. If
            the calling thread is not a Starcounter thread, the task is
            scheduled on a Starcounter thread and the current thread blocks
            waiting for the task to complete.
            </para>
            <para>
            On unhandled exception in the action delegate representing the task,
            the exception is intercepted and an exception referencing that
            exception, as an inner exception, is thrown by RunSync.
            </para>
            </remarks>
        </member>
        <member name="T:Starcounter.Transaction">
            <summary>
            Represents a longrunning transaction.
            </summary>
        </member>
        <member name="F:Starcounter.Transaction._current">
            <summary>
            Current longrunning user transaction.
            </summary>
            <remarks>
            This instance will be used together with TransactionManager.current
            </remarks>
        </member>
        <member name="M:Starcounter.Transaction.#ctor(System.Boolean,System.Boolean)">
            <summary>
            New transaction constructor.
            </summary>
            <param name="readOnly">Transaction read-only flag.</param>
        </member>
        <member name="M:Starcounter.Transaction.#ctor(System.Boolean,Starcounter.HookCategory)">
            <summary>
            
            </summary>
            <param name="readOnly"></param>
            <param name="applyHooks"></param>
        </member>
        <member name="M:Starcounter.Transaction.CheckForRefOrDispose">
            <summary>
            
            </summary>
        </member>
        <member name="P:Starcounter.Transaction.Handle">
            <summary>
            
            </summary>
        </member>
        <member name="M:Starcounter.Transaction.Dispose">
            <summary>
            <c>System.IDisposable</c> interface implementation.
            </summary>
        </member>
        <member name="P:Starcounter.Transaction.IsReadOnly">
            <summary>
            Gets a value indicating if the current transaction is a
            read-only transaction, i.e. a transaction where commits
            are not allowed.
            </summary>
        </member>
        <member name="P:Starcounter.Transaction.Current">
            <summary>
            Returns current transaction if any.
            </summary>
            <returns></returns>
        </member>
        <!-- Badly formed XML comment ignored for member "M:Starcounter.Transaction.Touch(System.Object)" -->
        <!-- Badly formed XML comment ignored for member "M:Starcounter.Transaction.Touch(Starcounter.Binding.IObjectProxy)" -->
        <member name="M:Starcounter.Transaction.Scope(System.Action)">
            <summary>
            Executes some code within this transaction scope.
            </summary>
            <remarks>
            If this transaction already is in use (i.e. scoped) on another scheduler
            an exception will be thrown.
            </remarks>
            <param name="action">Delegate that is called on transaction.</param>
        </member>
        <member name="M:Starcounter.Transaction.Commit">
            <summary>
            Commits changes made on transaction.
            </summary>
        </member>
        <member name="M:Starcounter.Transaction.Rollback">
            <summary>
            Rollbacks uncommitted changes on transaction.
            </summary>
        </member>
        <member name="P:Starcounter.Transaction.IsDirty">
            <summary>
            Checks if there are any changes on transaction since last commit.
            </summary>
        </member>
        <member name="T:Starcounter.ScrapHeap">
            <summary>
            Used to clean up garbage collected objects that could not be freed by
            garbage collector directly because the associated memory is associated
            with a specific scheduler.
            </summary>
        </member>
        <member name="M:Starcounter.ScrapHeap.Setup(System.Void*)">
            <summary>
            </summary>
        </member>
        <member name="M:Starcounter.ScrapHeap.RecycleScrap">
            <summary>
            </summary>
        </member>
        <member name="F:Starcounter.ScrapHeap._scheduleOnNextAdd">
            <summary>
            This is here to provide a workaround to avoid unhandled exception
            should the scheduler input queue be full. See ThrowAway for
            details.
            </summary>
        </member>
        <member name="T:Starcounter.TransactionAbortedException">
            <summary>
            Exception thrown on when a transaction is aborted (8000 series error codes).
            </summary>
        </member>
        <member name="M:Starcounter.TransactionAbortedException.#ctor(System.Runtime.Serialization.SerializationInfo,System.Runtime.Serialization.StreamingContext)">
            <summary>
            Initializes a new instance of the <see cref="T:Starcounter.TransactionAbortedException" /> class.
            </summary>
            <param name="info">The info.</param>
            <param name="context">The context.</param>
        </member>
        <member name="T:Starcounter.TransactionConflictDbException">
            <summary>
            Variant of <see cref="T:Starcounter.DbException" /> thrown when it wraps a
            <see cref="T:Starcounter.ITransactionConflictException" />. Used to make sure that
            automatic restarts and such are triggered because of conflicts detected
            in hooks.
            </summary>
        </member>
        <member name="M:Starcounter.TransactionConflictDbException.#ctor(System.Runtime.Serialization.SerializationInfo,System.Runtime.Serialization.StreamingContext)">
            <summary>
            Initializes a new instance of the <see cref="T:Starcounter.TransactionConflictDbException" /> class.
            </summary>
            <param name="info">The info.</param>
            <param name="context">The context.</param>
        </member>
        <member name="T:Starcounter.TransactionConflictException">
            <summary>
            Exception thrown when a transaction is aborted because of a conflict with another
            transaction (error code 8002, ScErrTransactionConflictAbort).
            </summary>
        </member>
        <member name="M:Starcounter.TransactionConflictException.#ctor(System.Runtime.Serialization.SerializationInfo,System.Runtime.Serialization.StreamingContext)">
            <summary>
            Initializes a new instance of the <see cref="T:Starcounter.TransactionConflictException" /> class.
            </summary>
            <param name="info">The info.</param>
            <param name="context">The context.</param>
        </member>
        <member name="T:Starcounter.TypeAttribute">
            <summary>
            Custom attribute that, when applied to a non-transient field or a property
            in a database class, instructs Starcounter to treat the tagged target as a
            reference to a type.
            </summary>
        </member>
        <member name="T:Starcounter.TypeNameAttribute">
            <summary>
            Custom attribute that, when applied to a non-transient field or a property
            in a database class, instructs Starcounter to treat the tagged target the
            name of a dynamic type.
            </summary>
        </member>
        <member name="T:Starcounter.UnhandledTransactionConflictException">
            <summary>
            Exception thrown on failure to restart transaction aborted because of a transaction
            conflict at transaction boundary (error code 4090, ScErrUnhandledTransactConflict).
            </summary>
            <seealso cref="T:Starcounter.TransactionConflictException"/>
            <seealso cref="!:Starcounter.Db.Transact(System.Action)"/>
        </member>
        <member name="M:Starcounter.UnhandledTransactionConflictException.#ctor(System.Exception)">
            <summary>
            For internal use, not to be used in user code (used in generated
            transaction scopes).
            </summary>
        </member>
        <member name="M:Starcounter.UnhandledTransactionConflictException.#ctor(System.Runtime.Serialization.SerializationInfo,System.Runtime.Serialization.StreamingContext)">
            <summary>
            Initializes a new instance of the <see cref="T:Starcounter.UnhandledTransactionConflictException" /> class.
            </summary>
            <param name="info">The info.</param>
            <param name="context">The context.</param>
        </member>
        <member name="T:Sc.Server.Weaver.Schema.DatabaseAssembly">
            <summary>
            Represents an assembly in the database schema.
            </summary>
            <remarks>
            The database server has no notion of assembly. Type names for the database
            server does not contain the assembly name. This concept exists for the database
            schema so that it is possible to save the part of the database schema that
            is defined by a single assembly, so that it can be loaded later without
            requiring the complete assembly to be reloaded.
            </remarks>
        </member>
        <member name="M:Sc.Server.Weaver.Schema.DatabaseAssembly.#ctor(System.String,System.String)">
            <summary>
            Initializes a new <see cref="T:Sc.Server.Weaver.Schema.DatabaseAssembly" />.
            </summary>
            <param name="name">Assembly name.</param>
            <param name="fullName">The full name.</param>
        </member>
        <member name="P:Sc.Server.Weaver.Schema.DatabaseAssembly.Schema">
            <summary>
            Gets or sets the schema to which the current assembly belongs.
            </summary>
        </member>
        <member name="M:Sc.Server.Weaver.Schema.DatabaseAssembly.SetSchema(Sc.Server.Weaver.Schema.DatabaseSchema)">
            <summary>
            </summary>
            <param name="schema"></param>
        </member>
        <member name="P:Sc.Server.Weaver.Schema.DatabaseAssembly.Name">
            <summary>
            Gets the assembly name.
            </summary>
        </member>
        <member name="P:Sc.Server.Weaver.Schema.DatabaseAssembly.FullName">
            <summary>
            Gets the assembly full name.
            </summary>
        </member>
        <member name="P:Sc.Server.Weaver.Schema.DatabaseAssembly.DatabaseClasses">
            <summary>
            Gets the collection of database classes contained in this assembly.
            </summary>
            <remarks>
            This collection contains all database classes without exception.
            Consumer code should filter them if it is only interested by entity classes,
            for instance.
            </remarks>
        </member>
        <member name="P:Sc.Server.Weaver.Schema.DatabaseAssembly.IsTransformed">
            <summary>
            Determines whether the current assembly is transformed
            (user assemblies are transformed, system assemblies are typically not).
            </summary>
        </member>
        <member name="P:Sc.Server.Weaver.Schema.DatabaseAssembly.HasDebuggingSymbols">
            <summary>
            Determines whether the current assembly has debugging symbols
            (a PDB file).
            </summary>
        </member>
        <member name="P:Sc.Server.Weaver.Schema.DatabaseAssembly.Dependencies">
            <summary>
            Gets the dictionary of dependent assemblies.
            </summary>
            <remarks>
            The item key is the assembly name (without file extension). The item value
            is the hash value coded in hexadecimal.
            </remarks>
        </member>
        <member name="P:Sc.Server.Weaver.Schema.DatabaseAssembly.TargetVersion">
            <summary>
            Version of Starcounter the given assembly target.
            </summary>
        </member>
        <member name="M:Sc.Server.Weaver.Schema.DatabaseAssembly.DebugOutput(System.CodeDom.Compiler.IndentedTextWriter)">
            <summary>
            Formats the current assembly and all its members to a writer.
            </summary>
            <param name="writer">The writer to which the object should be formatted.</param>
        </member>
        <member name="M:Sc.Server.Weaver.Schema.DatabaseAssembly.Serialize(System.String)">
            <summary>
            Serializes the current assembly to a file.
            </summary>
            <param name="fileName">Name of the file to which the assembly should be serialized.</param>
        </member>
        <member name="M:Sc.Server.Weaver.Schema.DatabaseAssembly.Deserialize(System.String)">
            <summary>
            Deserializes a file representing a <see cref="T:Sc.Server.Weaver.Schema.DatabaseAssembly"/>.
            </summary>
            <param name="fileName">Name of the file containing the serialized <see cref="T:Sc.Server.Weaver.Schema.DatabaseAssembly"/>.</param>
            <returns>The <see cref="T:Sc.Server.Weaver.Schema.DatabaseAssembly"/> stored in <paramref name="fileName"/>.</returns>
        </member>
        <member name="M:Sc.Server.Weaver.Schema.DatabaseAssembly.Deserialize(System.IO.Stream)">
            <summary>
            Deserializes a file representing a <see cref="T:Sc.Server.Weaver.Schema.DatabaseAssembly"/>.
            </summary>
            <param name="stream">A stream containing the serialized <see cref="T:Sc.Server.Weaver.Schema.DatabaseAssembly"/>.</param>
            <returns>The <see cref="T:Sc.Server.Weaver.Schema.DatabaseAssembly"/> stored in <paramref name="stream"/>.</returns>
        </member>
        <member name="M:Sc.Server.Weaver.Schema.DatabaseAssembly.OnSchemaComplete">
            <summary>
            
            </summary>
        </member>
        <member name="M:Sc.Server.Weaver.Schema.DatabaseAssembly.ToString">
            <summary>
            
            </summary>
            <returns></returns>
        </member>
        <member name="T:Sc.Server.Weaver.Schema.DatabaseAssemblyCollection">
            <summary>
            Collection of <see cref="T:Sc.Server.Weaver.Schema.DatabaseAssembly"/> with indexing by name.
            </summary>
            <remarks>
            This collection may only be owned by a <see cref="T:Sc.Server.Weaver.Schema.DatabaseSchema"/>. When an assembly
            is added to the collection, the database classes it contains are automatically indexed
            in the schema.
            </remarks>
        </member>
        <member name="M:Sc.Server.Weaver.Schema.DatabaseAssemblyCollection.#ctor(Sc.Server.Weaver.Schema.DatabaseSchema)">
            <summary>
            Initializes a new <see cref="T:Sc.Server.Weaver.Schema.DatabaseAssemblyCollection"/>.
            </summary>
            <param name="schema"><see cref="T:Sc.Server.Weaver.Schema.DatabaseSchema"/> to which the new collection belongs</param>
        </member>
        <member name="M:Sc.Server.Weaver.Schema.DatabaseAssemblyCollection.Add(Sc.Server.Weaver.Schema.DatabaseAssembly)">
            <summary>
            Adds the specified item.
            </summary>
            <param name="item">The item.</param>
        </member>
        <member name="M:Sc.Server.Weaver.Schema.DatabaseAssemblyCollection.Clear">
            <summary>
            
            </summary>
        </member>
        <member name="M:Sc.Server.Weaver.Schema.DatabaseAssemblyCollection.Contains(Sc.Server.Weaver.Schema.DatabaseAssembly)">
            <summary>
            
            </summary>
            <param name="item"></param>
            <returns></returns>
        </member>
        <member name="M:Sc.Server.Weaver.Schema.DatabaseAssemblyCollection.CopyTo(Sc.Server.Weaver.Schema.DatabaseAssembly[],System.Int32)">
            <summary>
            
            </summary>
            <param name="array"></param>
            <param name="arrayIndex"></param>
        </member>
        <member name="M:Sc.Server.Weaver.Schema.DatabaseAssemblyCollection.Remove(Sc.Server.Weaver.Schema.DatabaseAssembly)">
            <summary>
            
            </summary>
            <param name="item"></param>
            <returns></returns>
        </member>
        <member name="P:Sc.Server.Weaver.Schema.DatabaseAssemblyCollection.Count">
            <summary>
            
            </summary>
        </member>
        <member name="P:Sc.Server.Weaver.Schema.DatabaseAssemblyCollection.IsReadOnly">
            <summary>
            
            </summary>
        </member>
        <member name="M:Sc.Server.Weaver.Schema.DatabaseAssemblyCollection.GetEnumerator">
            <summary>
            
            </summary>
            <returns></returns>
        </member>
        <member name="M:Sc.Server.Weaver.Schema.DatabaseAssemblyCollection.System#Collections#IEnumerable#GetEnumerator">
            <summary>
            
            </summary>
            <returns></returns>
        </member>
        <member name="P:Sc.Server.Weaver.Schema.DatabaseAssemblyCollection.Item(System.String)">
            <summary>
            
            </summary>
            <param name="name"></param>
            <returns></returns>
        </member>
        <member name="T:Sc.Server.Weaver.Schema.DatabaseAttribute">
            <summary>
            Represents a database attribute.
            </summary>
            <remarks>
            See the property <see cref="P:Sc.Server.Weaver.Schema.DatabaseAttribute.AttributeType"/> to determine if the
            attribute is a persistent field, a regular field or a persistent property.
            </remarks>
        </member>
        <member name="M:Sc.Server.Weaver.Schema.DatabaseAttribute.#ctor(Sc.Server.Weaver.Schema.DatabaseClass,System.String)">
            <summary>
            Initializes a new <see cref="T:Sc.Server.Weaver.Schema.DatabaseAttribute"/>.
            </summary>
            <param name="declaringClass">Class declaring the attribute.</param>
            <param name="name">Name of the attribute.</param>
        </member>
        <member name="P:Sc.Server.Weaver.Schema.DatabaseAttribute.DeclaringClass">
            <summary>
            Gets the class declaring the attribute.
            </summary>
        </member>
        <member name="P:Sc.Server.Weaver.Schema.DatabaseAttribute.Name">
            <summary>
            Gets the CLR name of the field.
            </summary>
        </member>
        <member name="P:Sc.Server.Weaver.Schema.DatabaseAttribute.Index">
            <summary>
            Gets or sets the field index in the database kernel.
            </summary>
            <remarks>
            <para>This field is set only <i>after</i> calls the method see cref="ITypeResolver.SetSchema".</para>
            </remarks>
        </member>
        <member name="P:Sc.Server.Weaver.Schema.DatabaseAttribute.IsInitOnly">
            <summary>
            Determines whether the field is forbidden to be set outside a constructor (<b>readonly</b> qualifier
            in C#).
            </summary>
        </member>
        <member name="P:Sc.Server.Weaver.Schema.DatabaseAttribute.IsPublicRead">
            <summary>
            Gets or sets a value indicating whether this instance is public read.
            </summary>
            <remarks>
            An attribute is not considered public read only if it is explicitly
            declared public. As an example, a protected field in a public class is
            considered public as well. Basically, this property indicates if its
            possible to read the property outside the assembly in which it is
            defined.
            </remarks>
            <value><c>true</c> if this instance is public read; otherwise, <c>false</c>.</value>
        </member>
        <member name="P:Sc.Server.Weaver.Schema.DatabaseAttribute.IsDeclaredPublic">
            <summary>
            Gets or sets a value if the attribute was originally declared
            as public (i.e. the original field or property was).
            </summary>
            <remarks>
            If the attribute originates from a property, the visibility of
            the getter is used to derive this value; if no getter exist,
            false is returned.
            </remarks>
        </member>
        <member name="P:Sc.Server.Weaver.Schema.DatabaseAttribute.IsTypeReference">
            <summary>
            Gets a value indicating of the current attribute is to be
            considered a type reference, part of Starcounter dynamic
            types.
            </summary>
        </member>
        <member name="P:Sc.Server.Weaver.Schema.DatabaseAttribute.IsInheritsReference">
            <summary>
            Gets a value indicating if the current attribute is to be
            considered a reference to a base type, part of Starcounter
            dynamic types.
            </summary>
        </member>
        <member name="P:Sc.Server.Weaver.Schema.DatabaseAttribute.IsTypeName">
            <summary>
            Gets a value indicating if the current attribute is to be
            considered holding the type name of a class part of the new
            dynamic types domain.
            </summary>
        </member>
        <member name="P:Sc.Server.Weaver.Schema.DatabaseAttribute.AttributeType">
            <summary>
            Gets the type of the attribute.
            </summary>
        </member>
        <member name="P:Sc.Server.Weaver.Schema.DatabaseAttribute.IsNullable">
            <summary>
            Determines whether the database attribute is nullable.
            </summary>
            <remarks>
            Value types normally not nullable, unless their type is <see cref="T:System.Nullable`1"/>
            (<b>?</b> type postfix in C#). Reference types are always nullable. In the future,
            we may define a custom attribute forbidden null values to be assigned on reference
            types.
            </remarks>
        </member>
        <member name="P:Sc.Server.Weaver.Schema.DatabaseAttribute.WeaverId">
            <summary>
            Unique identifier of the current custom attribute, as assigned by the weaver.
            </summary>
            <remarks>
            This identifier is during the resolution of the database schema. Passing the field
            identifier instead of the complete field reduces the volume of serialized data and
            improves performance.
            </remarks>
        </member>
        <member name="P:Sc.Server.Weaver.Schema.DatabaseAttribute.InitialValue">
            <summary>
            Gets or sets the initial value of the current attribute.
            </summary>
            <value>
            The initial value of the proper type (typically a boxed intrincic), or <b>null</b>
            if the initial value has not been set (which means that the initial value should
            be the default value for this type, i.e. the zero value).
            </value>
        </member>
        <member name="P:Sc.Server.Weaver.Schema.DatabaseAttribute.AttributeKind">
            <summary>
            Gets the kind (persistent field, regular field, persistent property) of attribute
            the current instance is.
            </summary>
        </member>
        <member name="P:Sc.Server.Weaver.Schema.DatabaseAttribute.IsPersistent">
            <summary>
            Determines whether the current attribute is persistent.
            </summary>
        </member>
        <member name="P:Sc.Server.Weaver.Schema.DatabaseAttribute.IsField">
            <summary>
            Determines whether the current attribute is a field (persistent or not).
            </summary>
        </member>
        <member name="P:Sc.Server.Weaver.Schema.DatabaseAttribute.IsTransient">
            <summary>
            Gets a value indicating of the current attribute is considered
            transient, i.e. not stored in the database or part of the database
            schema.
            </summary>
        </member>
        <member name="P:Sc.Server.Weaver.Schema.DatabaseAttribute.Schema">
            <summary>
            Gets the <see cref="T:Sc.Server.Weaver.Schema.DatabaseSchema"/> to which the current database attribute belongs.
            </summary>
        </member>
        <member name="P:Sc.Server.Weaver.Schema.DatabaseAttribute.BackingField">
            <summary>
            When not null, indicates that the proprerty is the trivial accessor for a field of the current instance.
            This property is then set to this this field.
            </summary>
        </member>
        <member name="P:Sc.Server.Weaver.Schema.DatabaseAttribute.SpecialFlags">
            <summary>
            Gets the current attributes special flags.
            </summary>
        </member>
        <member name="M:Sc.Server.Weaver.Schema.DatabaseAttribute.ToString">
            <summary>
            
            </summary>
            <returns></returns>
        </member>
        <member name="T:Sc.Server.Weaver.Schema.DatabaseAttributeCollection">
            <summary>
            
            </summary>
        </member>
        <member name="M:Sc.Server.Weaver.Schema.DatabaseAttributeCollection.#ctor">
            <summary>
            
            </summary>
        </member>
        <member name="M:Sc.Server.Weaver.Schema.DatabaseAttributeCollection.GetKeyForItem(Sc.Server.Weaver.Schema.DatabaseAttribute)">
            <summary>
            
            </summary>
            <param name="item"></param>
            <returns></returns>
        </member>
        <member name="T:Sc.Server.Weaver.Schema.DatabaseAttributeArrayOnIndexCompararer">
            <summary>
            
            </summary>
        </member>
        <member name="M:Sc.Server.Weaver.Schema.DatabaseAttributeArrayOnIndexCompararer.Compare(System.Object,System.Object)">
            <summary>
            
            </summary>
            <param name="x"></param>
            <param name="y"></param>
            <returns></returns>
        </member>
        <member name="T:Sc.Server.Weaver.Schema.DatabaseAttributeKind">
            <summary>
            Defines the different kinds of attributes emitted by the
            weaver analysis engine when database classes are being analyzed.
            </summary>
        </member>
        <member name="F:Sc.Server.Weaver.Schema.DatabaseAttributeKind.Field">
            <summary>
            Indicates a regular database field, i.e. a field
            defined in a database class and not marked with
            any particular attribute meaninful to Starcounter.
            </summary>
        </member>
        <member name="F:Sc.Server.Weaver.Schema.DatabaseAttributeKind.TransientField">
            <summary>
            Indicates a field in a database class tagged with the
            <see cref="!:TransientAttribute"/>.
            </summary>
        </member>
        <member name="F:Sc.Server.Weaver.Schema.DatabaseAttributeKind.Property">
            <summary>
            Indicates a regular database property, i.e. a property
            defined in a database class and not marked with any 
            particular attribute meaninful to Starcounter.
            </summary>
        </member>
        <member name="F:Sc.Server.Weaver.Schema.DatabaseAttributeKind.TransientProperty">
            <summary>
            Indicates a property in a database class tagged with the
            <see cref="!:TransientAttribute"/>.
            </summary>
        </member>
        <member name="T:Sc.Server.Weaver.Schema.DatabaseAttributeRef">
            <summary>
            Serializable reference to a <see cref="T:Sc.Server.Weaver.Schema.DatabaseAttribute"/>.
            </summary>
            <remarks>
            The purpose of this object is to store a cross-assembly reference that is serializable
            without hard-linking to the assembly, so that assemblies can be serialized separately.
            References are resolved transparently and are never exposed to consumer code.
            </remarks>
        </member>
        <member name="M:Sc.Server.Weaver.Schema.DatabaseAttributeRef.#ctor(Sc.Server.Weaver.Schema.DatabaseAttribute)">
            <summary>
            Initialize a new <see cref="T:Sc.Server.Weaver.Schema.DatabaseAttributeRef"/>.
            </summary>
            <param name="target">Referenced <see cref="T:Sc.Server.Weaver.Schema.DatabaseAttribute"/>.</param>
        </member>
        <member name="M:Sc.Server.Weaver.Schema.DatabaseAttributeRef.MakeRef(Sc.Server.Weaver.Schema.DatabaseAttribute)">
            <summary>
            Makes a <see cref="T:Sc.Server.Weaver.Schema.DatabaseAttributeRef"/>.
            </summary>
            <param name="attribute">Referenced <see cref="T:Sc.Server.Weaver.Schema.DatabaseAttribute"/>.</param>
            <returns>A <see cref="T:Sc.Server.Weaver.Schema.DatabaseAttributeRef"/> referencing <paramref name="attribute"/>,
            or <b>null</b> if <paramref name="attribute"/> is <b>null</b>.</returns>
        </member>
        <member name="M:Sc.Server.Weaver.Schema.DatabaseAttributeRef.Resolve(Sc.Server.Weaver.Schema.DatabaseAttributeRef,Sc.Server.Weaver.Schema.DatabaseSchemaElement)">
            <summary>
            Gets the <see cref="T:Sc.Server.Weaver.Schema.DatabaseAttribute"/> referenced to by the a <see cref="T:Sc.Server.Weaver.Schema.DatabaseAttributeRef"/>.
            </summary>
            <param name="databaseAttributeRef">Reference to be resolved.</param>
            <param name="element">Element of the schema w.r.t. which the referenced should be resolved.
            Theoritically only the schema is used, but since we cache the reference, passing the schema
            element allows to avoid taking the schema from the element in case of a cache hit.</param>
            <returns>The <see cref="T:Sc.Server.Weaver.Schema.DatabaseAttribute"/> represented by <paramref name="databaseAttributeRef"/></returns>
        </member>
        <member name="T:Sc.Server.Weaver.Schema.DatabaseAttributeRefCollection">
            <summary>
            
            </summary>
        </member>
        <member name="M:Sc.Server.Weaver.Schema.DatabaseAttributeRefCollection.#ctor(Sc.Server.Weaver.Schema.DatabaseSchemaElement)">
            <summary>
            
            </summary>
            <param name="parent"></param>
        </member>
        <member name="M:Sc.Server.Weaver.Schema.DatabaseAttributeRefCollection.Add(Sc.Server.Weaver.Schema.DatabaseAttribute)">
            <summary>
            
            </summary>
            <param name="item"></param>
        </member>
        <member name="M:Sc.Server.Weaver.Schema.DatabaseAttributeRefCollection.Clear">
            <summary>
            
            </summary>
        </member>
        <member name="M:Sc.Server.Weaver.Schema.DatabaseAttributeRefCollection.Contains(Sc.Server.Weaver.Schema.DatabaseAttribute)">
            <summary>
            
            </summary>
            <param name="item"></param>
            <returns></returns>
        </member>
        <member name="M:Sc.Server.Weaver.Schema.DatabaseAttributeRefCollection.CopyTo(Sc.Server.Weaver.Schema.DatabaseAttribute[],System.Int32)">
            <summary>
            
            </summary>
            <param name="array"></param>
            <param name="arrayIndex"></param>
        </member>
        <member name="P:Sc.Server.Weaver.Schema.DatabaseAttributeRefCollection.Count">
            <summary>
            
            </summary>
        </member>
        <member name="P:Sc.Server.Weaver.Schema.DatabaseAttributeRefCollection.IsReadOnly">
            <summary>
            
            </summary>
        </member>
        <member name="M:Sc.Server.Weaver.Schema.DatabaseAttributeRefCollection.Remove(Sc.Server.Weaver.Schema.DatabaseAttribute)">
            <summary>
            
            </summary>
            <param name="item"></param>
            <returns></returns>
        </member>
        <member name="M:Sc.Server.Weaver.Schema.DatabaseAttributeRefCollection.GetEnumerator">
            <summary>
            
            </summary>
            <returns></returns>
        </member>
        <member name="P:Sc.Server.Weaver.Schema.DatabaseAttributeRefCollection.Schema">
            <summary>
            
            </summary>
        </member>
        <member name="T:Sc.Server.Weaver.Schema.DatabaseClass">
            <summary>
            Represents any class whose instances are to be stored in the database.
            </summary>
        </member>
        <member name="M:Sc.Server.Weaver.Schema.DatabaseClass.#ctor(Sc.Server.Weaver.Schema.DatabaseAssembly,System.String)">
            <summary>
            Initializes a new <see cref="T:Sc.Server.Weaver.Schema.DatabaseClass"/>.
            </summary>
            <param name="assembly">Assembly to which the class belong.</param>
            <param name="name">Full name of the class.</param>
        </member>
        <member name="M:Sc.Server.Weaver.Schema.DatabaseClass.#ctor(Sc.Server.Weaver.Schema.DatabaseAssembly,System.String,System.Boolean)">
            <summary>
            Initializes a new <see cref="T:Sc.Server.Weaver.Schema.DatabaseClass"/>.
            </summary>
            <param name="assembly">Assembly to which the class belong.</param>
            <param name="name">Full name of the class.</param>
            <param name="internalMetadataClass">
            If true this class is an internal class for starcounter that should be handled a bit different.
            for example it should be filtered out when doing an unload.
            </param>
        </member>
        <member name="P:Sc.Server.Weaver.Schema.DatabaseClass.Assembly">
            <summary>
            Gets the assembly to which the class belong.
            </summary>
        </member>
        <member name="P:Sc.Server.Weaver.Schema.DatabaseClass.BaseClass">
            <summary>
            Gets or sets the base class.
            </summary>
            <remarks>
            A <see cref="T:Sc.Server.Weaver.Schema.DatabaseClass"/>, or <b>null</b> if the base class
            is the <b>Entity</b> class.
            </remarks>
        </member>
        <member name="P:Sc.Server.Weaver.Schema.DatabaseClass.Name">
            <summary>
            Gets or sets the class name, including the namespace.
            </summary>
        </member>
        <member name="P:Sc.Server.Weaver.Schema.DatabaseClass.IsQualifiedOnlyByFullNameInQueries">
            <summary>
            Gets or sets a value indicating if the current type should be qualified
            only by its full name.
            </summary>
        </member>
        <member name="P:Sc.Server.Weaver.Schema.DatabaseClass.Attributes">
            <summary>
            Gets the collection of database attributes defined in the current class.
            </summary>
        </member>
        <member name="M:Sc.Server.Weaver.Schema.DatabaseClass.FindAttributeInAncestors(System.String)">
            <summary>
            Searches an attribute by name in the current class and in all ancestors.
            </summary>
            <param name="name">Name of the searched field.</param>
            <returns>The <see cref="T:Sc.Server.Weaver.Schema.DatabaseAttribute"/> named <paramref name="name"/>, or <b>null</b>
            if the type and its ancestors don't contain a field with that name.</returns>
        </member>
        <member name="M:Sc.Server.Weaver.Schema.DatabaseClass.FindAttributeInAncestors(System.Func{Sc.Server.Weaver.Schema.DatabaseAttribute,System.Boolean})">
            <summary>
            Searches an attribute by name in the current class and in all ancestors, using
            a specified predicate to determine if attributes are considered matches or not.
            </summary>
            <param name="predicate">The predicate that determine if an attribute match.</param>
            <returns>An attribute if found; null if not.</returns>
        </member>
        <member name="P:Sc.Server.Weaver.Schema.DatabaseClass.Schema">
            <summary>
            Gets the schema to which the current class belong.
            </summary>
        </member>
        <member name="M:Sc.Server.Weaver.Schema.DatabaseClass.ToString">
            <summary>
            
            </summary>
            <returns></returns>
        </member>
        <member name="M:Sc.Server.Weaver.Schema.DatabaseClass.DebugOutput(System.CodeDom.Compiler.IndentedTextWriter)">
            <summary>
            Formats the current assembly and all its members to a writer.
            </summary>
            <param name="writer">The writer to which the object should be formatted.</param>
        </member>
        <member name="T:Sc.Server.Weaver.Schema.DatabaseClassCollection">
            <summary>
            Collection of database classes (<see cref="T:Sc.Server.Weaver.Schema.DatabaseClass"/>).
            </summary>
            <remarks>
            This collection has the particularity to index classes by name and
            and to update the schema-level index of classes.
            </remarks>
        </member>
        <member name="M:Sc.Server.Weaver.Schema.DatabaseClassCollection.#ctor(Sc.Server.Weaver.Schema.DatabaseAssembly)">
            <summary>
            Initializes a new <see cref="T:Sc.Server.Weaver.Schema.DatabaseClassCollection"/>.
            </summary>
            <param name="assembly">Assembly to which the collection belong.</param>
        </member>
        <member name="M:Sc.Server.Weaver.Schema.DatabaseClassCollection.GetKeyForItem(Sc.Server.Weaver.Schema.DatabaseClass)">
            <summary>
            Gets the class name.
            </summary>
            <param name="item">The database class.</param>
            <returns>The database class name.</returns>
        </member>
        <member name="M:Sc.Server.Weaver.Schema.DatabaseClassCollection.InsertItem(System.Int32,Sc.Server.Weaver.Schema.DatabaseClass)">
            <summary>
            Called when an item is inserted. We update the index located in the database schema.
            </summary>
            <param name="index">Index.</param>
            <param name="item">Item.</param>
        </member>
        <member name="M:Sc.Server.Weaver.Schema.DatabaseClassCollection.RemoveItem(System.Int32)">
            <summary>
            The <b>Remove</b> operation is not supported.
            </summary>
            <param name="index"></param>
        </member>
        <member name="M:Sc.Server.Weaver.Schema.DatabaseClassCollection.SetItem(System.Int32,Sc.Server.Weaver.Schema.DatabaseClass)">
            <summary>
            The <b>Set</b> operation is not supported.
            </summary>
            <param name="index"></param>
            <param name="item"></param>
        </member>
        <member name="T:Sc.Server.Weaver.Schema.DatabaseClassRef">
            <summary>
            Serializable reference to a <see cref="T:Sc.Server.Weaver.Schema.DatabaseClass"/>.
            </summary>
            <remarks>
            The purpose of this object is to store a cross-assembly reference that is serializable
            without hard-linking to the assembly, so that assemblies can be serialized separately.
            References are resolved transparently and are never exposed to consumer code.
            </remarks>
        </member>
        <member name="M:Sc.Server.Weaver.Schema.DatabaseClassRef.#ctor(Sc.Server.Weaver.Schema.DatabaseClass)">
            <summary>
            Initializes a new <see cref="T:Sc.Server.Weaver.Schema.DatabaseClassRef"/>.
            </summary>
            <param name="target">Referenced <see cref="T:Sc.Server.Weaver.Schema.DatabaseClass"/>.</param>
        </member>
        <member name="M:Sc.Server.Weaver.Schema.DatabaseClassRef.MakeRef(Sc.Server.Weaver.Schema.DatabaseClass)">
            <summary>
            Makes a <see cref="T:Sc.Server.Weaver.Schema.DatabaseClassRef"/>.
            </summary>
            <param name="databaseClass">Referenced <see cref="T:Sc.Server.Weaver.Schema.DatabaseClass"/>.</param>
            <returns>A <see cref="T:Sc.Server.Weaver.Schema.DatabaseClassRef"/> referencing <paramref name="databaseClass"/>,
            or <b>null</b> if <paramref name="databaseClass"/> is <b>null</b>.</returns>
        </member>
        <member name="M:Sc.Server.Weaver.Schema.DatabaseClassRef.MakeRef(Sc.Server.Weaver.Schema.IDatabaseAttributeType)">
            <summary>
            Makes the ref.
            </summary>
            <param name="attributeType">Type of the attribute.</param>
            <returns>IDatabaseAttributeType.</returns>
        </member>
        <member name="M:Sc.Server.Weaver.Schema.DatabaseClassRef.Resolve(Sc.Server.Weaver.Schema.DatabaseClassRef,Sc.Server.Weaver.Schema.DatabaseSchemaElement)">
            <summary>
            Gets the <see cref="T:Sc.Server.Weaver.Schema.DatabaseClass"/> referenced to by the a <see cref="T:Sc.Server.Weaver.Schema.DatabaseClassRef"/>.
            </summary>
            <param name="databaseClassRef">Reference to be resolved.</param>
            <param name="element">Element of the schema w.r.t. which the referenced should be resolved.
            Theoritically only the schema is used, but since we cache the reference, passing the schema
            element allows to avoid taking the schema from the element in case of a cache hit.</param>
            <returns>The <see cref="T:Sc.Server.Weaver.Schema.DatabaseClass"/> represented by <paramref name="databaseClassRef"/></returns>
        </member>
        <member name="M:Sc.Server.Weaver.Schema.DatabaseClassRef.ToString">
            <summary>
            Returns a <see cref="T:System.String" /> that represents this instance.
            </summary>
            <returns>A <see cref="T:System.String" /> that represents this instance.</returns>
        </member>
        <member name="M:Sc.Server.Weaver.Schema.DatabaseClassRef.Equals(Sc.Server.Weaver.Schema.DatabaseClassRef)">
            <summary>
            Equalses the specified other.
            </summary>
            <param name="other">The other.</param>
            <returns><c>true</c> if XXXX, <c>false</c> otherwise</returns>
        </member>
        <member name="M:Sc.Server.Weaver.Schema.DatabaseClassRef.Equals(System.Object)">
            <summary>
            Determines whether the specified <see cref="T:System.Object" /> is equal to this instance.
            </summary>
            <param name="obj">The object to compare with the current object.</param>
            <returns><c>true</c> if the specified <see cref="T:System.Object" /> is equal to this instance; otherwise, <c>false</c>.</returns>
        </member>
        <member name="M:Sc.Server.Weaver.Schema.DatabaseClassRef.GetHashCode">
            <summary>
            Returns a hash code for this instance.
            </summary>
            <returns>A hash code for this instance, suitable for use in hashing algorithms and data structures like a hash table.</returns>
        </member>
        <member name="T:Sc.Server.Weaver.Schema.DatabaseEntityClass">
            <summary>
            Represents an entity class, i.e. a class derived from the <b>Entity</b>
            class.
            </summary>
        </member>
        <member name="M:Sc.Server.Weaver.Schema.DatabaseEntityClass.#ctor(Sc.Server.Weaver.Schema.DatabaseAssembly,System.String)">
            <summary>
            Initializes a new <see cref="T:Sc.Server.Weaver.Schema.DatabaseEntityClass"/>.
            </summary>
            <param name="assembly">Assembly to which the class belong.</param>
            <param name="name">Class name.</param>
        </member>
        <member name="M:Sc.Server.Weaver.Schema.DatabaseEntityClass.#ctor(Sc.Server.Weaver.Schema.DatabaseAssembly,System.String,System.Boolean)">
            <summary>
            
            </summary>
            <param name="assembly"></param>
            <param name="name"></param>
            <param name="internalMetadataClass"></param>
        </member>
        <member name="P:Sc.Server.Weaver.Schema.DatabaseEntityClass.ExtensionClasses">
            <summary>
            Gets the collection of extension classes defined for the current entity class.
            </summary>
        </member>
        <member name="M:Sc.Server.Weaver.Schema.DatabaseEntityClass.DebugOutput(System.CodeDom.Compiler.IndentedTextWriter)">
            <summary>
            Formats the current assembly and all its members to a writer.
            </summary>
            <param name="writer">The writer to which the object should be formatted.</param>
        </member>
        <member name="T:Sc.Server.Weaver.Schema.DatabaseEnumType">
            <summary>
            Represents an enumeration type (<b>enum</b> in C#).
            </summary>
        </member>
        <member name="M:Sc.Server.Weaver.Schema.DatabaseEnumType.#ctor(System.String,Sc.Server.Weaver.Schema.DatabasePrimitive)">
            <summary>
            Initializes a new <see cref="T:Sc.Server.Weaver.Schema.DatabaseEnumType"/>.
            </summary>
            <param name="name">Name of the enumeration.</param>
            <param name="underlyingType">Underlying type of the enumeration (typically <see cref="T:System.Int32"/>).</param>
        </member>
        <member name="M:Sc.Server.Weaver.Schema.DatabaseEnumType.GetInstance(System.String,Sc.Server.Weaver.Schema.DatabasePrimitive)">
            <summary>
            Gets a cached instance of <see cref="T:Sc.Server.Weaver.Schema.DatabaseEnumType"/>.
            </summary>
            <param name="name">Name of the enumeration.</param>
            <param name="underlyingType">Underlying type of the enumeration (typically <see cref="T:System.Int32"/>).</param>
            <returns>The instance <see cref="T:Sc.Server.Weaver.Schema.DatabaseEnumType"/> representing this enumeration.</returns>
        </member>
        <member name="P:Sc.Server.Weaver.Schema.DatabaseEnumType.Name">
            <summary>
            Gets the name of the current enumeration.
            </summary>
        </member>
        <member name="P:Sc.Server.Weaver.Schema.DatabaseEnumType.UnderlyingType">
            <summary>
            Gets the underlying type of the
            </summary>
        </member>
        <member name="M:Sc.Server.Weaver.Schema.DatabaseEnumType.ToString">
            <summary>
            Returns a <see cref="T:System.String" /> that represents this instance.
            </summary>
            <returns>A <see cref="T:System.String" /> that represents this instance.</returns>
        </member>
        <member name="T:Sc.Server.Weaver.Schema.DatabaseExtensionClass">
            <summary>
            Represents a database extension class (i.e. a class derived from <b>Extension&lt;T&gt;</b>).
            </summary>
        </member>
        <member name="M:Sc.Server.Weaver.Schema.DatabaseExtensionClass.#ctor(Sc.Server.Weaver.Schema.DatabaseAssembly,System.String)">
            <summary>
            Initializes a new <see cref="T:Sc.Server.Weaver.Schema.DatabaseExtensionClass"/>.
            </summary>
            <param name="assembly">Assembly to which the class belong.</param>
            <param name="name">Full name of the class.</param>
        </member>
        <member name="P:Sc.Server.Weaver.Schema.DatabaseExtensionClass.Extends">
            <summary>
            Gets of sets the database class that this extension extends.
            </summary>
        </member>
        <member name="T:Sc.Server.Weaver.Schema.DatabaseIndex">
            <summary>
            Class DatabaseIndex
            </summary>
        </member>
        <member name="T:Sc.Server.Weaver.Schema.DatabasePrimitive">
            <summary>
            Enumeration of primitives supported by the database.
            </summary>
        </member>
        <member name="F:Sc.Server.Weaver.Schema.DatabasePrimitive.None">
            <summary>
            The none
            </summary>
        </member>
        <member name="F:Sc.Server.Weaver.Schema.DatabasePrimitive.Boolean">
            <summary>
            The boolean
            </summary>
        </member>
        <member name="F:Sc.Server.Weaver.Schema.DatabasePrimitive.Byte">
            <summary>
            The byte
            </summary>
        </member>
        <member name="F:Sc.Server.Weaver.Schema.DatabasePrimitive.SByte">
            <summary>
            The S byte
            </summary>
        </member>
        <member name="F:Sc.Server.Weaver.Schema.DatabasePrimitive.Int16">
            <summary>
            The int16
            </summary>
        </member>
        <member name="F:Sc.Server.Weaver.Schema.DatabasePrimitive.UInt16">
            <summary>
            The U int16
            </summary>
        </member>
        <member name="F:Sc.Server.Weaver.Schema.DatabasePrimitive.Int32">
            <summary>
            The int32
            </summary>
        </member>
        <member name="F:Sc.Server.Weaver.Schema.DatabasePrimitive.UInt32">
            <summary>
            The U int32
            </summary>
        </member>
        <member name="F:Sc.Server.Weaver.Schema.DatabasePrimitive.Int64">
            <summary>
            The int64
            </summary>
        </member>
        <member name="F:Sc.Server.Weaver.Schema.DatabasePrimitive.UInt64">
            <summary>
            The U int64
            </summary>
        </member>
        <member name="F:Sc.Server.Weaver.Schema.DatabasePrimitive.Decimal">
            <summary>
            The decimal
            </summary>
        </member>
        <member name="F:Sc.Server.Weaver.Schema.DatabasePrimitive.Single">
            <summary>
            The single
            </summary>
        </member>
        <member name="F:Sc.Server.Weaver.Schema.DatabasePrimitive.Double">
            <summary>
            The double
            </summary>
        </member>
        <member name="F:Sc.Server.Weaver.Schema.DatabasePrimitive.String">
            <summary>
            The string
            </summary>
        </member>
        <member name="F:Sc.Server.Weaver.Schema.DatabasePrimitive.DateTime">
            <summary>
            The date time
            </summary>
        </member>
        <member name="F:Sc.Server.Weaver.Schema.DatabasePrimitive.TimeSpan">
            <summary>
            The time span
            </summary>
        </member>
        <member name="F:Sc.Server.Weaver.Schema.DatabasePrimitive.Binary">
            <summary>
            The binary
            </summary>
        </member>
        <member name="T:Sc.Server.Weaver.Schema.DatabasePrimitiveType">
            <summary>
            Encapsulates a <see cref="T:Sc.Server.Weaver.Schema.DatabasePrimitive"/> into a <see cref="T:Sc.Server.Weaver.Schema.IDatabaseAttributeType"/>.
            </summary>
        </member>
        <member name="M:Sc.Server.Weaver.Schema.DatabasePrimitiveType.#ctor(Sc.Server.Weaver.Schema.DatabasePrimitive)">
            <summary>
            Initializes a new <see cref="T:Sc.Server.Weaver.Schema.DatabasePrimitiveType"/>.
            </summary>
            <param name="primitive">The encapsulated <see cref="T:Sc.Server.Weaver.Schema.DatabasePrimitive"/>.</param>
        </member>
        <member name="M:Sc.Server.Weaver.Schema.DatabasePrimitiveType.GetInstance(Sc.Server.Weaver.Schema.DatabasePrimitive)">
            <summary>
            Gets a cached instance of <see cref="T:Sc.Server.Weaver.Schema.DatabasePrimitiveType"/>
            </summary>
            <param name="primitive">The encapsulated <see cref="T:Sc.Server.Weaver.Schema.DatabasePrimitive"/>.</param>
            <returns>The instance of <see cref="T:Sc.Server.Weaver.Schema.DatabasePrimitiveType"/> encapsulating <paramref name="primitive"/>.</returns>
        </member>
        <member name="P:Sc.Server.Weaver.Schema.DatabasePrimitiveType.Primitive">
            <summary>
            Gets the encapsulated <see cref="T:Sc.Server.Weaver.Schema.DatabasePrimitive"/>.
            </summary>
        </member>
        <member name="M:Sc.Server.Weaver.Schema.DatabasePrimitiveType.ToString">
            <summary>
            
            </summary>
            <returns></returns>
        </member>
        <member name="T:Sc.Server.Weaver.Schema.DatabaseSchema">
            <summary>
            Closed set of assemblies and database classes forming a single and consistent database schema.
            </summary>
        </member>
        <member name="F:Sc.Server.Weaver.Schema.DatabaseSchema.EmbeddedResourceName">
            <summary>
            Name we use when embedding a serialized schema into an assembly
            as part of weaving.
            </summary>
        </member>
        <member name="M:Sc.Server.Weaver.Schema.DatabaseSchema.#ctor">
            <summary>
            Initializes a new <see cref="T:Sc.Server.Weaver.Schema.DatabaseSchema"/>.
            </summary>
        </member>
        <member name="P:Sc.Server.Weaver.Schema.DatabaseSchema.Assemblies">
            <summary>
            Gets the collection of assemblies forming the current schema.
            </summary>
        </member>
        <member name="M:Sc.Server.Weaver.Schema.DatabaseSchema.AddStarcounterAssembly">
            <summary>
            </summary>
        </member>
        <member name="M:Sc.Server.Weaver.Schema.DatabaseSchema.FindDatabaseClass(System.String)">
            <summary>
            Finds a class in the current schema given its name.
            </summary>
            <param name="name">Name of the requested class.</param>
            <returns>The <see cref="T:Sc.Server.Weaver.Schema.DatabaseClass"/> named <paramref name="name"/>, or
            <b>null</b> if the schema does not contain a class named <paramref name="name"/>.</returns>
        </member>
        <member name="M:Sc.Server.Weaver.Schema.DatabaseSchema.IndexDatabaseClass(Sc.Server.Weaver.Schema.DatabaseClass)">
             <summary>
             Index a <see cref="T:Sc.Server.Weaver.Schema.DatabaseClass"/> in the current schema.
             </summary>
             <param name="databaseClass">Class to index.</param>
             <remarks>
             This method is called when an assembly is added to the schema or when a class
             is added to an assembly of this schema. It ensures that all classes in this schema
            
             </remarks>
        </member>
        <member name="M:Sc.Server.Weaver.Schema.DatabaseSchema.FindDatabaseClassByShortname(System.String,Sc.Server.Weaver.Schema.DatabaseClass@)">
            <summary>
            Finds a class in the current schema given its shortname.
            </summary>
            <param name="name">
            Name of the requested class.
            </param>
            <param name="databaseClass">
            Out parameter. contains the <see cref="T:Sc.Server.Weaver.Schema.DatabaseClass"/>, 
            or null if not found or on an ambiguous match.
            </param>
            <returns>
            True if found (including ambiguous match), false if no 
            class is found.
            </returns>
        </member>
        <member name="M:Sc.Server.Weaver.Schema.DatabaseSchema.FindDatabaseAttribute(System.String,System.String)">
            <summary>
            </summary>
            <param name="fieldName"></param>
            <param name="fieldDeclaringTypeReflectionName"></param>
            <returns></returns>
        </member>
        <member name="M:Sc.Server.Weaver.Schema.DatabaseSchema.EnumerateDatabaseClasses">
            <summary>
            Enumerates all classes contained in the current schema.
            </summary>
            <returns>An enumerator for all classes contained in the current schema.</returns>
        </member>
        <member name="M:Sc.Server.Weaver.Schema.DatabaseSchema.PopulateDatabaseEntityClasses(System.Collections.Generic.IList{Sc.Server.Weaver.Schema.DatabaseEntityClass})">
            <summary>
            Populates a list with the entity classes (different than the root class)
            in the current database schema.
            </summary>
            <param name="classes">Collection to be populated.</param>
        </member>
        <member name="M:Sc.Server.Weaver.Schema.DatabaseSchema.PopulateOrderedDatabaseClasses(System.Collections.Generic.IList{Sc.Server.Weaver.Schema.DatabaseClass})">
            <summary>
            Populates a list (ordered collection) with the database classes present in the
            database schema, sorted by order of inheritance (if A is the parent of B, A is
            before B in the list).
            </summary>
            <param name="list">The list to be populate.</param>
        </member>
        <member name="M:Sc.Server.Weaver.Schema.DatabaseSchema.PopulateOrderedDatabaseEntityClasses(System.Collections.Generic.IList{Sc.Server.Weaver.Schema.DatabaseClass})">
             <summary>
             Populates a list (ordered collection) with the database classes present in the
             database schema, sorted by order of inheritance (if A is the parent of B, A is
             before B in the list).
            
             Excludes extension classes.
             </summary>
             <param name="list">The list to be populate.</param>
        </member>
        <member name="M:Sc.Server.Weaver.Schema.DatabaseSchema.PopulateOrderedDatabaseEntityClasses2(System.Collections.Generic.IList{Sc.Server.Weaver.Schema.DatabaseEntityClass})">
            <summary>
            </summary>
        </member>
        <member name="M:Sc.Server.Weaver.Schema.DatabaseSchema.DebugOutput(System.CodeDom.Compiler.IndentedTextWriter)">
            <summary>
            Formats the current assembly and all its members to a writer.
            </summary>
            <param name="writer">The writer to which the object should be formatted.</param>
        </member>
        <member name="M:Sc.Server.Weaver.Schema.DatabaseSchema.AfterDeserialization">
            <summary>
            Asserts all assemblies are properly initialized in the domain
            they live. Should be invoked every time the schema has been
            deserialized in a new AppDomain (i.e either after it was fully
            assembled from disk .schema files or after it was serialized
            accross an AppDomain boundary.
            </summary>
        </member>
        <member name="M:Sc.Server.Weaver.Schema.DatabaseSchema.RecursivePopulateOrderedClasses(Sc.Server.Weaver.Schema.DatabaseClass,System.Collections.Generic.IList{Sc.Server.Weaver.Schema.DatabaseClass},System.Collections.Generic.Dictionary{Sc.Server.Weaver.Schema.DatabaseClass,System.Object})">
            <summary>
            Inserts a given class and its ancestors in a collection of classes that should be
            ordered by inheritance (parent first, children after).
            </summary>
            <param name="databaseClass">The database class that has to be inserted (as well
            as its ancestors) to the collection.</param>
            <param name="orderedClasses">The collection into which the classes have to
            be added.</param>
            <param name="index">Index of classes that are already present in <paramref name="orderedClasses"/>.
            </param>
        </member>
        <member name="M:Sc.Server.Weaver.Schema.DatabaseSchema.Serialize">
            <summary>
            Serialize the current instance into a new <c>MemoryStream</c>.
            </summary>
            <returns>A stream with the serialized schema.</returns>
        </member>
        <member name="M:Sc.Server.Weaver.Schema.DatabaseSchema.DeserializeFrom(System.IO.Stream)">
            <summary>
            Deserialize an instance of a schema from a stream.
            </summary>
            <param name="stream">The stream in which the serialized schema is contained.</param>
            <returns>A materialized schema.</returns>
        </member>
        <member name="T:Sc.Server.Weaver.Schema.DatabaseSchemaElement">
            <summary>
            Class DatabaseSchemaElement
            </summary>
        </member>
        <member name="F:Sc.Server.Weaver.Schema.DatabaseSchemaElement.tags">
            <summary>
            The tags
            </summary>
        </member>
        <member name="F:Sc.Server.Weaver.Schema.DatabaseSchemaElement.serializedTags">
            <summary>
            The serialized tags
            </summary>
        </member>
        <member name="M:Sc.Server.Weaver.Schema.DatabaseSchemaElement.OnDeserializedInitializeTags(System.Runtime.Serialization.StreamingContext)">
            <summary>
            Called when [deserialized initialize tags].
            </summary>
            <param name="context">The context.</param>
        </member>
        <member name="P:Sc.Server.Weaver.Schema.DatabaseSchemaElement.Tags">
            <summary>
            Gets the tags.
            </summary>
            <value>The tags.</value>
        </member>
        <member name="P:Sc.Server.Weaver.Schema.DatabaseSchemaElement.SerializedTag">
            <summary>
            Gets the serialized tag.
            </summary>
            <value>The serialized tag.</value>
        </member>
        <member name="P:Sc.Server.Weaver.Schema.DatabaseSchemaElement.Schema">
            <summary>
            Gets the <see cref="T:Sc.Server.Weaver.Schema.DatabaseSchema" /> to which the current object belong.
            </summary>
            <value>The schema.</value>
        </member>
        <member name="T:Sc.Server.Weaver.Schema.DatabaseUnsupportedType">
            <summary>
            Represents a type that is not supported by the database,
            and that was consequently not parsed.
            </summary>
        </member>
        <member name="M:Sc.Server.Weaver.Schema.DatabaseUnsupportedType.#ctor(System.String)">
            <summary>
            Initializes a new <see cref="T:Sc.Server.Weaver.Schema.DatabaseUnsupportedType" />.
            </summary>
            <param name="typeName">Name of the type.</param>
        </member>
        <member name="P:Sc.Server.Weaver.Schema.DatabaseUnsupportedType.TypeName">
            <summary>
            Ges the name of the unsupported field.
            </summary>
        </member>
        <member name="M:Sc.Server.Weaver.Schema.DatabaseUnsupportedType.ToString">
            <summary>
            
            </summary>
            <returns></returns>
        </member>
        <member name="T:Sc.Server.Weaver.Schema.IDatabaseAttributeType">
            <summary>
            Interface that should be inherited by all possible types of a database attributes.
            </summary>
            <remarks>
            This interface has no property. We use it only for strong typing.
            </remarks>
        </member>
    </members>
</doc>
