<?xml version="1.0"?>
<doc>
    <assembly>
        <name>BizArk.Core</name>
    </assembly>
    <members>
        <member name="T:BizArk.Core.Application">
            <summary>
            Primary class for application information and plugin support.
            </summary>
        </member>
        <member name="M:BizArk.Core.Application.#ctor">
            <summary>
            Private to enforce the Singleton pattern.
            </summary>
        </member>
        <member name="P:BizArk.Core.Application.Title">
            <summary>
            Gets the title of the executing assembly from AssemblyTitleAttribute.
            </summary>
        </member>
        <member name="P:BizArk.Core.Application.Version">
            <summary>
            Gets the version of the executing assembly.
            </summary>
        </member>
        <member name="P:BizArk.Core.Application.Description">
            <summary>
            Gets the description of the executing assembly from AssemblyDescriptionAttribute.
            </summary>
        </member>
        <member name="P:BizArk.Core.Application.Company">
            <summary>
            Gets the company name of the executing assembly from AssemblyCompanyAttribute.
            </summary>
        </member>
        <member name="P:BizArk.Core.Application.Product">
            <summary>
            Gets the product name of the executing assembly from AssemblyProductAttribute.
            </summary>
        </member>
        <member name="P:BizArk.Core.Application.Copyright">
            <summary>
            Gets the copyright of the executing assembly from AssemblyCopyrightAttribute.
            </summary>
        </member>
        <member name="P:BizArk.Core.Application.Trademark">
            <summary>
            Gets the trademark of the executing assembly from AssemblyTrademarkAttribute.
            </summary>
        </member>
        <member name="P:BizArk.Core.Application.ExePath">
            <summary>
            Gets the path the the executing assembly.
            </summary>
        </member>
        <member name="P:BizArk.Core.Application.ExeName">
            <summary>
            Gets the just the name of the exe (without the extension).
            </summary>
        </member>
        <member name="M:BizArk.Core.Application.GetPath(System.String)">
            <summary>
            Returns an absolute path relative to the ExePath.
            </summary>
            <param name="relativePath"></param>
            <returns></returns>
        </member>
        <member name="M:BizArk.Core.Application.GetTempPath">
            <summary>
            Gets the path to the temporary directory for this application. This is a subdirectory off of the system temp directory.
            </summary>
            <returns></returns>
        </member>
        <member name="T:BizArk.Core.CmdLine.CmdLineArgAttribute">
            <summary>
            Apply this attribute to a property in order to allow the CmdLineProcessor to set the value.
            </summary>
        </member>
        <member name="M:BizArk.Core.CmdLine.CmdLineArgAttribute.#ctor">
            <summary>
            Creates an instance of CmdLineArgAttribute.
            </summary>
        </member>
        <member name="P:BizArk.Core.CmdLine.CmdLineArgAttribute.Alias">
            <summary>
            Gets or sets the alias for the command-line argument. It is recommended that this be a single character. This will overwrite Aliases.
            </summary>
        </member>
        <member name="P:BizArk.Core.CmdLine.CmdLineArgAttribute.Aliases">
            <summary>
            Gets or sets the aliases for the command-line argument. Aliases cannot conflict with one another. It is recommended that the first alias be a single character. This will overwrite Alias.
            </summary>
        </member>
        <member name="P:BizArk.Core.CmdLine.CmdLineArgAttribute.Required">
            <summary>
            Gets or sets a value that determines if the command-line argument must be specified.
            </summary>
        </member>
        <member name="P:BizArk.Core.CmdLine.CmdLineArgAttribute.Usage">
            <summary>
            Gets or sets the short description that should be used in the usage description.
            </summary>
        </member>
        <member name="P:BizArk.Core.CmdLine.CmdLineArgAttribute.AllowSave">
            <summary>
            Gets or sets a value that determines if the property should be saved.
            </summary>
        </member>
        <member name="P:BizArk.Core.CmdLine.CmdLineArgAttribute.ShowInUsage">
            <summary>
            Gets or sets a value that determines if the argument should be displayed in the usage. By default, only required arguments and help are displayed in the usage in order to save space when printing the usage.
            </summary>
        </member>
        <member name="T:BizArk.Core.CmdLine.CmdLineDefaultArgAttribute">
            <summary>
            Apply this attribute to the command-line class in order to define a default argument.
            This is the property that will be set if the first argument in the command-line 
            isn't an argument name. For example, if you want process a file name sent from
            Windows.
            </summary>
        </member>
        <member name="M:BizArk.Core.CmdLine.CmdLineDefaultArgAttribute.#ctor(System.String)">
            <summary>
            Creates an instance of CmdLineDefaultArgAttribute.
            </summary>
            <param name="DefaultArgName"></param>
        </member>
        <member name="P:BizArk.Core.CmdLine.CmdLineDefaultArgAttribute.DefaultArgName">
            <summary>
            The name of the property for the default argument.
            </summary>
        </member>
        <member name="T:BizArk.Core.CmdLine.CmdLineOptions">
            <summary>
            Command-line options.
            </summary>
        </member>
        <member name="M:BizArk.Core.CmdLine.CmdLineOptions.#ctor">
            <summary>
            Creates an instance of CmdLineOptions.
            </summary>
        </member>
        <member name="P:BizArk.Core.CmdLine.CmdLineOptions.Title">
            <summary>
            Gets or sets the title for the application. Shown at the top of the help text. Defaults to {AssemblyTitleAttribute} ver. {EntryAssembly.Version}
            </summary>
        </member>
        <member name="P:BizArk.Core.CmdLine.CmdLineOptions.ApplicationName">
            <summary>
            Gets or sets the name of the application for use in the usage text. Defaults to the name of the exe that is running.
            </summary>
        </member>
        <member name="P:BizArk.Core.CmdLine.CmdLineOptions.Usage">
            <summary>
            Gets or sets the text that shows how to use the command-line. Shown in help.
            </summary>
        </member>
        <member name="P:BizArk.Core.CmdLine.CmdLineOptions.Description">
            <summary>
            Gets or sets the long description for the console application. Shown in help.
            </summary>
        </member>
        <member name="P:BizArk.Core.CmdLine.CmdLineOptions.DefaultArgNames">
            <summary>
            Gets or sets the names/aliases of the default properties for the command-line.
            </summary>
        </member>
        <member name="P:BizArk.Core.CmdLine.CmdLineOptions.ArgumentPrefix">
            <summary>
            Gets or sets the string used to identify argument names.
            </summary>
        </member>
        <member name="P:BizArk.Core.CmdLine.CmdLineOptions.WaitArgName">
            <summary>
            Gets or sets the boolean property used to determine if the application should wait before exiting. Only used in ConsoleApplication.RunProgram().
            </summary>
        </member>
        <member name="P:BizArk.Core.CmdLine.CmdLineOptions.Wait">
            <summary>
            Gets or sets a value used to determine if the application should wait before exiting. Only used in ConsoleApplication.RunProgram(). If WaitProperty is set, this value will be set during initialization.
            </summary>
        </member>
        <member name="P:BizArk.Core.CmdLine.CmdLineOptions.Comparer">
            <summary>
            Gets or sets the rule for comparing the names/aliases. By default this is set to 
            </summary>
        </member>
        <member name="T:BizArk.Core.CmdLine.ConsoleApplication">
            <summary>
            Provides helper methods for command-line applications.
            </summary>
        </member>
        <member name="M:BizArk.Core.CmdLine.ConsoleApplication.RunProgram``1(BizArk.Core.CmdLine.ConsoleApplication.Run{``0})">
            <summary>
            Convenient method for running an application. Provides command-line argument initialization, help text, error handling, and waiting for exit. This is typically the only line of code in Main.
            </summary>
            <typeparam name="TArgs">The type for the CmdLineObject to use. Must have a default constructor.</typeparam>
            <param name="run">The method to run once the arguments are initialized. Will not be called if the help flag is set or the args aren't valid.</param>
        </member>
        <member name="M:BizArk.Core.CmdLine.ConsoleApplication.WriteError(System.Exception)">
            <summary>
            Displays the exception to the console.
            </summary>
            <param name="ex"></param>
        </member>
        <member name="M:BizArk.Core.CmdLine.ConsoleApplication.WriteLine(System.String,System.String)">
            <summary>
            Writes a message to the console. Ensures that the message is wrapped at word boundaries and that indentation is preserved.
            </summary>
            <param name="msg"></param>
            <param name="prefix">Adds this string to the beginning of each line.</param>
        </member>
        <member name="T:BizArk.Core.CmdLine.ConsoleApplication.Run`1">
            <summary>
            Delegate method that is used to run a console application.
            </summary>
            <typeparam name="T"></typeparam>
            <param name="args"></param>
        </member>
        <member name="T:BizArk.Core.CmdLine.CmdLineObject">
            <summary>
            Represents an object that can be initialized via command-line arguments.
            </summary>
            <remarks>
            <para>The CmdLineObject class can be inherited from to allow the 
            properties of a class to be initialized from command-line arguments.
            The properties can be any type that can be converted to and from a string 
            using the <see cref="M:BizArk.Core.ConvertEx.ChangeType(System.Object,System.Type,System.IFormatProvider)"/> 
            method.</para>
            <para>Only properties that have the CmdLineArgAttribute applied to them
            can be initialized from the command-line. To make a property the default
            property, apply the CmdLineDefaultArgAttribute to the class and specify
            the name of the property.</para>
            <para>This class will automatically produce command-line help to let
            the user know what arguments are available from the command-line and
            how to use them. If you want to customize the usage text, override the
            GetUsage method. If you want to customize the title of the application,
            override the GetTitle method. The usage for properties can be set in the
            CmdLineArgAttribute and the description can be set by applying the
            System.ComponentModel.DescriptionAttribute to the property.</para>
            </remarks>
        </member>
        <member name="M:BizArk.Core.CmdLine.CmdLineObject.#ctor">
            <summary>
            Instantiates CmdLineObject.
            </summary>
        </member>
        <member name="M:BizArk.Core.CmdLine.CmdLineObject.#ctor(BizArk.Core.CmdLine.CmdLineOptions)">
            <summary>
            Instantiates CmdLineObject.
            </summary>
            <param name="options"></param>
        </member>
        <member name="P:BizArk.Core.CmdLine.CmdLineObject.Options">
            <summary>
            Gets the options used for the handling the command-line object.
            </summary>
        </member>
        <member name="P:BizArk.Core.CmdLine.CmdLineObject.Help">
            <summary>
            Gets or sets a value that determines if help should be displayed.
            </summary>
        </member>
        <member name="P:BizArk.Core.CmdLine.CmdLineObject.Properties">
            <summary>
            Gets the list of command-line properties.
            </summary>
        </member>
        <member name="P:BizArk.Core.CmdLine.CmdLineObject.ErrorText">
            <summary>
            Gets the error text for the command-line object.
            </summary>
        </member>
        <member name="P:BizArk.Core.CmdLine.CmdLineObject.IsInitialized">
            <summary>
            Gets a value that determines if the CmdLineObject is ready to use.
            </summary>
        </member>
        <member name="P:BizArk.Core.CmdLine.CmdLineObject.DefaultProperties">
            <summary>
            Gets the default properties for the command-line.
            </summary>
        </member>
        <member name="M:BizArk.Core.CmdLine.CmdLineObject.Initialize_Internal">
            <summary>
            Initializes the command-line object. 
            </summary>
        </member>
        <member name="M:BizArk.Core.CmdLine.CmdLineObject.Initialize">
            <summary>
            Initializes the CmdLineObject.
            </summary>
        </member>
        <member name="M:BizArk.Core.CmdLine.CmdLineObject.InitializeEmpty">
            <summary>
            Initializes the command-line object, but does not populate it.
            </summary>
        </member>
        <member name="M:BizArk.Core.CmdLine.CmdLineObject.InitializeFromCmdLine(System.String[])">
            <summary>
            Initializes the object with the given arguments.
            </summary>
            <param name="args">The command-line args. Make sure to shrink the array if the first element contains the path to the application (as in Environment.GetCommandLineArgs()) or the default parameter won't get set correctly.</param>
            <example>
            using BizArk.Core.ArrayExt;
            var args = Environment.GetCommandLineArgs().Shrink(1);
            </example>
        </member>
        <member name="M:BizArk.Core.CmdLine.CmdLineObject.Validate">
            <summary>
            Override this method to perform cmd-line validation. It is recommended to call the base method.
            </summary>
            <returns></returns>
        </member>
        <member name="M:BizArk.Core.CmdLine.CmdLineObject.IsValid">
            <summary>
            Makes sure the command-line object is valid. 
            </summary>
            <returns></returns>
        </member>
        <member name="M:BizArk.Core.CmdLine.CmdLineObject.GetHelpText(System.Int32)">
            <summary>
            Gets the full description for the command-line arguments.
            </summary>
            <param name="maxWidth">Determines the number of characters per line. Set this to Console.Width.</param>
            <returns></returns>
        </member>
        <member name="M:BizArk.Core.CmdLine.CmdLineObject.SaveToXml(System.String)">
            <summary>
            Saves the settings to an xml file.
            </summary>
            <param name="path"></param>
        </member>
        <member name="M:BizArk.Core.CmdLine.CmdLineObject.RestoreFromXml(System.String)">
            <summary>
            Restores the settings from an xml file.
            </summary>
            <param name="path"></param>
            <returns>True if the settings are restored from the file.</returns>
        </member>
        <member name="M:BizArk.Core.CmdLine.CmdLineObject.Initialized">
            <summary>
            This method is called after initialization is complete to allow for any additional intialization.
            </summary>
        </member>
        <member name="M:BizArk.Core.CmdLine.CmdLineObject.ToString">
            <summary>
            Gets the usage for this command-line object.
            </summary>
            <returns></returns>
        </member>
        <member name="T:BizArk.Core.CmdLine.CmdLineProperty">
            <summary>
            Represents a property that can be set via the command-line.
            </summary>
        </member>
        <member name="M:BizArk.Core.CmdLine.CmdLineProperty.#ctor(BizArk.Core.CmdLine.CmdLineObject,System.ComponentModel.PropertyDescriptor)">
            <summary>
            Creates an instance of a CmdLineProperty.
            </summary>
            <param name="obj"></param>
            <param name="prop"></param>
        </member>
        <member name="M:BizArk.Core.CmdLine.CmdLineProperty.#ctor(BizArk.Core.CmdLine.CmdLineObject,System.ComponentModel.PropertyDescriptor,BizArk.Core.CmdLine.CmdLineArgAttribute)">
            <summary>
            Creates an instance of a CmdLineProperty.
            </summary>
            <param name="obj"></param>
            <param name="prop"></param>
            <param name="claAtt"></param>
        </member>
        <member name="P:BizArk.Core.CmdLine.CmdLineProperty.Object">
            <summary>
            Gets the command-line object associated with this property.
            </summary>
        </member>
        <member name="P:BizArk.Core.CmdLine.CmdLineProperty.Name">
            <summary>
            The name of the command-line property.
            </summary>
        </member>
        <member name="P:BizArk.Core.CmdLine.CmdLineProperty.Description">
            <summary>
            Gets the description associated with the property.
            </summary>
        </member>
        <member name="P:BizArk.Core.CmdLine.CmdLineProperty.PropertyType">
            <summary>
            Gets the type of the property.
            </summary>
        </member>
        <member name="P:BizArk.Core.CmdLine.CmdLineProperty.Aliases">
            <summary>
            Gets the aliases associated with this property.
            </summary>
        </member>
        <member name="P:BizArk.Core.CmdLine.CmdLineProperty.Required">
            <summary>
            Gets or sets a value that determines if this command-line argument is required.
            </summary>
        </member>
        <member name="P:BizArk.Core.CmdLine.CmdLineProperty.Usage">
            <summary>
            Gets or sets the short description that should be used in the usage description.
            </summary>
        </member>
        <member name="P:BizArk.Core.CmdLine.CmdLineProperty.ShowInUsage">
            <summary>
            Gets or sets a value that determines if the argument should be displayed in the usage. By default, only required arguments and help are displayed in the usage in order to save space when printing the usage.
            </summary>
        </member>
        <member name="P:BizArk.Core.CmdLine.CmdLineProperty.PropertySet">
            <summary>
            Gets a value that determines if this property was set through the command-line or not.
            </summary>
        </member>
        <member name="P:BizArk.Core.CmdLine.CmdLineProperty.DefaultValue">
            <summary>
            Gets the default value for this property. Used in the command-line help description.
            </summary>
        </member>
        <member name="P:BizArk.Core.CmdLine.CmdLineProperty.Value">
            <summary>
            Gets or sets the current value for this property.
            </summary>
        </member>
        <member name="P:BizArk.Core.CmdLine.CmdLineProperty.ShowDefaultValue">
            <summary>
            Gets or sets a value that determines if the default value should be displayed to the user in the usage.
            </summary>
        </member>
        <member name="P:BizArk.Core.CmdLine.CmdLineProperty.AllowSave">
            <summary>
            Gets or sets a value that determines if the property should be saved.
            </summary>
        </member>
        <member name="P:BizArk.Core.CmdLine.CmdLineProperty.Error">
            <summary>
            Gets any errors associated with this property.
            </summary>
        </member>
        <member name="M:BizArk.Core.CmdLine.CmdLineProperty.ToString">
            <summary>
            Gets the textual representation of this command-line object.
            </summary>
            <returns></returns>
        </member>
        <member name="T:BizArk.Core.CmdLine.CmdLinePropertyList">
            <summary>
            A list of CmdLineProperty objects.
            </summary>
        </member>
        <member name="M:BizArk.Core.CmdLine.CmdLinePropertyList.#ctor(BizArk.Core.CmdLine.CmdLineObject)">
            <summary>
            Creates an instance of CmdLinePropertyList.
            </summary>
        </member>
        <member name="P:BizArk.Core.CmdLine.CmdLinePropertyList.Item(System.String)">
            <summary>
            Gets the command-line property associated with this argument.
            </summary>
            <param name="argName">This can be the shortcut, full property name, or a partial property name that is unique.</param>
            <returns></returns>
            <exception cref="T:System.ArgumentException">Thrown when the command-line property cannot be found.</exception>
        </member>
        <member name="P:BizArk.Core.CmdLine.CmdLinePropertyList.Count">
            <summary>
            Gets the number of properties in the list.
            </summary>
        </member>
        <member name="P:BizArk.Core.CmdLine.CmdLinePropertyList.Object">
            <summary>
            Gets the command-line object for this list.
            </summary>
        </member>
        <member name="M:BizArk.Core.CmdLine.CmdLinePropertyList.Add(System.String,BizArk.Core.CmdLine.CmdLineProperty)">
            <summary>
            Adds a command-line property to the list keyed to the given name.
            </summary>
            <param name="name"></param>
            <param name="prop"></param>
        </member>
        <member name="M:BizArk.Core.CmdLine.CmdLinePropertyList.GetEnumerator">
            <summary>
            Gets the enumerator for the list.
            </summary>
            <returns></returns>
        </member>
        <member name="T:BizArk.Core.CmdLine.CmdLineOptionsAttribute">
            <summary>
            Apply this attribute to the command-line class in order to define options for 
            the command-line object.
            </summary>
        </member>
        <member name="P:BizArk.Core.CmdLine.CmdLineOptionsAttribute.Title">
            <summary>
            Gets or sets the title for the application. Shown at the top of the help text. Defaults to {AssemblyTitleAttribute} ver. {EntryAssembly.Version}
            </summary>
        </member>
        <member name="P:BizArk.Core.CmdLine.CmdLineOptionsAttribute.ApplicationName">
            <summary>
            Gets or sets the name of the application for use in the usage text. Defaults to the name of the exe that is running.
            </summary>
        </member>
        <member name="P:BizArk.Core.CmdLine.CmdLineOptionsAttribute.Usage">
            <summary>
            Gets or sets the text that shows how to use the command-line. Shown in help.
            </summary>
        </member>
        <member name="P:BizArk.Core.CmdLine.CmdLineOptionsAttribute.Description">
            <summary>
            Gets or sets the long description for the console application. Shown in help.
            </summary>
        </member>
        <member name="P:BizArk.Core.CmdLine.CmdLineOptionsAttribute.DefaultArgName">
            <summary>
            Gets or sets the name/alias of the default property for the command-line. Setting this overwrites DefaultArgNames.
            </summary>
        </member>
        <member name="P:BizArk.Core.CmdLine.CmdLineOptionsAttribute.DefaultArgNames">
            <summary>
            Gets or sets the names/aliases of the default properties for the command-line. Setting this overwrites DefaultArgName.
            </summary>
        </member>
        <member name="P:BizArk.Core.CmdLine.CmdLineOptionsAttribute.ArgumentPrefix">
            <summary>
            Gets or sets the string used to identify argument names.
            </summary>
        </member>
        <member name="P:BizArk.Core.CmdLine.CmdLineOptionsAttribute.WaitArgName">
            <summary>
            Gets or sets the boolean property used to determine if the application should wait before exiting. Only used in ConsoleApplication.RunProgram().
            </summary>
        </member>
        <member name="P:BizArk.Core.CmdLine.CmdLineOptionsAttribute.Wait">
            <summary>
            Gets or sets a value used to determine if the application should wait before exiting. Only used in ConsoleApplication.RunProgram(). If WaitProperty is set, this value will be set during initialization.
            </summary>
        </member>
        <member name="P:BizArk.Core.CmdLine.CmdLineOptionsAttribute.Comparer">
            <summary>
            Gets or sets the rule for comparing the names/aliases. By default this is set to 
            </summary>
        </member>
        <member name="M:BizArk.Core.CmdLine.CmdLineOptionsAttribute.CreateOptions">
            <summary>
            Creates the options object.
            </summary>
            <returns></returns>
        </member>
        <member name="T:BizArk.Core.CmdLine.CmdLineException">
            <summary>
            Base class for exceptions used for command-line parsing.
            </summary>
        </member>
        <member name="M:BizArk.Core.CmdLine.CmdLineException.#ctor(System.String,System.Exception)">
            <summary>
            Creates an instance of CmdLineException.
            </summary>
            <param name="message"></param>
            <param name="innerException"></param>
        </member>
        <member name="T:BizArk.Core.CmdLine.CmdLineArgumentException">
            <summary>
            Exception thrown if there is a problem with a command line arugment definition.
            </summary>
        </member>
        <member name="M:BizArk.Core.CmdLine.CmdLineArgumentException.#ctor(System.String)">
            <summary>
            Creates an instance of CmdLineArgumentException.
            </summary>
            <param name="message"></param>
        </member>
        <member name="T:BizArk.Core.CmdLine.AmbiguousCmdLineNameException">
            <summary>
            Exception thrown when multiple command-line properties match a given argument name.
            </summary>
        </member>
        <member name="M:BizArk.Core.CmdLine.AmbiguousCmdLineNameException.#ctor(System.String,BizArk.Core.CmdLine.CmdLineProperty[])">
            <summary>
            Creates an instance of AmbiguousCmdLineNameException.
            </summary>
            <param name="argName"></param>
            <param name="props"></param>
        </member>
        <member name="P:BizArk.Core.CmdLine.AmbiguousCmdLineNameException.ArgName">
            <summary>
            Gets the name of the invalid argument.
            </summary>
        </member>
        <member name="P:BizArk.Core.CmdLine.AmbiguousCmdLineNameException.AmbiguousProperties">
            <summary>
            Gets the conflicting properties.
            </summary>
        </member>
        <member name="T:BizArk.Core.ConvertEx">
            <summary>
            This class provides the ability to convert types 
            beyond what is provided by the System.Convert
            class.
            </summary>
        </member>
        <member name="M:BizArk.Core.ConvertEx.ToBoolean(System.Object)">
            <summary>
            Converts the value to a Boolean. 
            Checks for a TypeConverter, conversion methods, 
            and the IConvertible interface.
            </summary>
            <param name="value">The value to convert from.</param>
        </member>
        <member name="M:BizArk.Core.ConvertEx.ToChar(System.Object)">
            <summary>
            Converts the value to a Char. 
            Checks for a TypeConverter, conversion methods, 
            and the IConvertible interface.
            </summary>
            <param name="value">The value to convert from.</param>
        </member>
        <member name="M:BizArk.Core.ConvertEx.ToSByte(System.Object)">
            <summary>
            Converts the value to a SByte. 
            Checks for a TypeConverter, conversion methods, 
            and the IConvertible interface.
            </summary>
            <param name="value">The value to convert from.</param>
        </member>
        <member name="M:BizArk.Core.ConvertEx.ToByte(System.Object)">
            <summary>
            Converts the value to a Byte. 
            Checks for a TypeConverter, conversion methods, 
            and the IConvertible interface.
            </summary>
            <param name="value">The value to convert from.</param>
        </member>
        <member name="M:BizArk.Core.ConvertEx.ToInt16(System.Object)">
            <summary>
            Converts the value to a Int16. 
            Checks for a TypeConverter, conversion methods, 
            and the IConvertible interface.
            </summary>
            <param name="value">The value to convert from.</param>
        </member>
        <member name="M:BizArk.Core.ConvertEx.ToShort(System.Object)">
            <summary>
            Converts the value to a Int16. 
            Checks for a TypeConverter, conversion methods, 
            and the IConvertible interface.
            </summary>
            <param name="value">The value to convert from.</param>
        </member>
        <member name="M:BizArk.Core.ConvertEx.ToUInt16(System.Object)">
            <summary>
            Converts the value to a UInt16. 
            Checks for a TypeConverter, conversion methods, 
            and the IConvertible interface.
            </summary>
            <param name="value">The value to convert from.</param>
        </member>
        <member name="M:BizArk.Core.ConvertEx.ToInt32(System.Object)">
            <summary>
            Converts the value to a Int32. 
            Checks for a TypeConverter, conversion methods, 
            and the IConvertible interface.
            </summary>
            <param name="value">The value to convert from.</param>
        </member>
        <member name="M:BizArk.Core.ConvertEx.ToInt(System.Object)">
            <summary>
            Converts the value to a Int32. 
            Checks for a TypeConverter, conversion methods, 
            and the IConvertible interface.
            </summary>
            <param name="value">The value to convert from.</param>
        </member>
        <member name="M:BizArk.Core.ConvertEx.ToInteger(System.Object)">
            <summary>
            Converts the value to a Int32. 
            Checks for a TypeConverter, conversion methods, 
            and the IConvertible interface.
            </summary>
            <param name="value">The value to convert from.</param>
        </member>
        <member name="M:BizArk.Core.ConvertEx.ToUInt32(System.Object)">
            <summary>
            Converts the value to a UInt32. 
            Checks for a TypeConverter, conversion methods, 
            and the IConvertible interface.
            </summary>
            <param name="value">The value to convert from.</param>
        </member>
        <member name="M:BizArk.Core.ConvertEx.ToInt64(System.Object)">
            <summary>
            Converts the value to a Int64. 
            Checks for a TypeConverter, conversion methods, 
            and the IConvertible interface.
            </summary>
            <param name="value">The value to convert from.</param>
        </member>
        <member name="M:BizArk.Core.ConvertEx.ToLong(System.Object)">
            <summary>
            Converts the value to a Int64. 
            Checks for a TypeConverter, conversion methods, 
            and the IConvertible interface.
            </summary>
            <param name="value">The value to convert from.</param>
        </member>
        <member name="M:BizArk.Core.ConvertEx.ToUInt64(System.Object)">
            <summary>
            Converts the value to a UInt64. 
            Checks for a TypeConverter, conversion methods, 
            and the IConvertible interface.
            </summary>
            <param name="value">The value to convert from.</param>
        </member>
        <member name="M:BizArk.Core.ConvertEx.ToSingle(System.Object)">
            <summary>
            Converts the value to a Single. 
            Checks for a TypeConverter, conversion methods, 
            and the IConvertible interface.
            </summary>
            <param name="value">The value to convert from.</param>
        </member>
        <member name="M:BizArk.Core.ConvertEx.ToFloat(System.Object)">
            <summary>
            Converts the value to a Single. 
            Checks for a TypeConverter, conversion methods, 
            and the IConvertible interface.
            </summary>
            <param name="value">The value to convert from.</param>
        </member>
        <member name="M:BizArk.Core.ConvertEx.ToDouble(System.Object)">
            <summary>
            Converts the value to a Double. 
            Checks for a TypeConverter, conversion methods, 
            and the IConvertible interface.
            </summary>
            <param name="value">The value to convert from.</param>
        </member>
        <member name="M:BizArk.Core.ConvertEx.ToDecimal(System.Object)">
            <summary>
            Converts the value to a Decimal. 
            Checks for a TypeConverter, conversion methods, 
            and the IConvertible interface.
            </summary>
            <param name="value">The value to convert from.</param>
        </member>
        <member name="M:BizArk.Core.ConvertEx.ToDateTime(System.Object)">
            <summary>
            Converts the value to a DateTime. 
            Checks for a TypeConverter, conversion methods, 
            and the IConvertible interface.
            </summary>
            <param name="value">The value to convert from.</param>
        </member>
        <member name="M:BizArk.Core.ConvertEx.ToString(System.Object)">
            <summary>
            Converts the value to a String. 
            Checks for a TypeConverter, conversion methods, 
            and the IConvertible interface.
            </summary>
            <param name="value">The value to convert from.</param>
        </member>
        <member name="M:BizArk.Core.ConvertEx.To``1(System.Object)">
            <summary>
            Converts the value to the specified type. 
            Checks for a TypeConverter, conversion methods, 
            and the IConvertible interface. This is an alias 
            to ChangeType.
            </summary>
            <typeparam name="T">The type to convert to.</typeparam>
            <param name="value">The value to convert from.</param>
            <returns></returns>
            <remarks>
            <para>The ChangeType method converts a value to another type.</para>
            <para>It can use a number of different conversion techniques depending on
            what is most appropriate based on the type of the value and the type it
            is converting to. The following lists explains the order that the checks 
            are made in.
            <list type="">
            <item>String to Boolean - Used when we are converting from a string to a boolean. Valid values for true are "true", "t", "yes", "1", and "-1", everything else is false.</item>
            <item>TypeConverter - Used when a TypeConverter exists for either the type we are converting to or from that can convert to the other type.</item>
            <item>Parse method - Used when the type we are converting from is a string and the type we are converting to defines a static, parameterless Parse method that returns the type we are converting to.</item>
            <item>Convert method - Used when the type we are converting from defines an instance method called ToXXX where XXX is the name of the type we are converting to with some common aliases allowed (example ToBool or ToInt instead of ToBoolean and ToInt32). The method must return the type we are converting to</item>
            <item>IConvertible - Used when the type we are converting from implements the IConvertible interface.</item>
            </list>
            </para>
            <para>This method makes use of the strategy pattern for determining how to 
            convert values. To define a custom strategy to convert from one type to 
            another, define a class that implements the IConvertStrategy interface and
            register it with the ConvertStrategyMgr class.</para>
            </remarks>
            <exception cref="T:System.InvalidCastException">This conversion is not supported. -or-value is null and conversionType is a value type.</exception>
            <exception cref="T:System.ArgumentNullException">conversionType is null.</exception>
        </member>
        <member name="M:BizArk.Core.ConvertEx.ChangeType``1(System.Object)">
            <summary>
            Converts the value to the specified type. 
            Checks for a TypeConverter, conversion methods, 
            and the IConvertible interface.
            </summary>
            <typeparam name="T">The type to convert to.</typeparam>
            <param name="value">The value to convert from.</param>
            <returns></returns>
            <remarks>
            <para>The ChangeType method converts a value to another type.</para>
            <para>It can use a number of different conversion techniques depending on
            what is most appropriate based on the type of the value and the type it
            is converting to. The following lists explains the order that the checks 
            are made in.
            <list type="">
            <item>String to Boolean - Used when we are converting from a string to a boolean. Valid values for true are "true", "t", "yes", "1", and "-1", everything else is false.</item>
            <item>TypeConverter - Used when a TypeConverter exists for either the type we are converting to or from that can convert to the other type.</item>
            <item>Parse method - Used when the type we are converting from is a string and the type we are converting to defines a static, parameterless Parse method that returns the type we are converting to.</item>
            <item>Convert method - Used when the type we are converting from defines an instance method called ToXXX where XXX is the name of the type we are converting to with some common aliases allowed (example ToBool or ToInt instead of ToBoolean and ToInt32). The method must return the type we are converting to</item>
            <item>IConvertible - Used when the type we are converting from implements the IConvertible interface.</item>
            </list>
            </para>
            <para>This method makes use of the strategy pattern for determining how to 
            convert values. To define a custom strategy to convert from one type to 
            another, define a class that implements the IConvertStrategy interface and
            register it with the ConvertStrategyMgr class.</para>
            </remarks>
            <exception cref="T:System.InvalidCastException">This conversion is not supported. -or-value is null and conversionType is a value type.</exception>
            <exception cref="T:System.ArgumentNullException">conversionType is null.</exception>
        </member>
        <member name="M:BizArk.Core.ConvertEx.ChangeType(System.Object,System.Type,System.IFormatProvider)">
            <summary>
            Converts the value to the specified type. 
            Checks for a TypeConverter, conversion methods, 
            and the IConvertible interface.
            </summary>
            <param name="value">The value to convert from.</param>
            <param name="to">The type to convert to.</param>
            <param name="provider">The IFormatProvider to use for the conversion.</param>
            <returns></returns>
            <remarks>
            <para>The ChangeType method converts a value to another type.</para>
            <para>It can use a number of different conversion techniques depending on
            what is most appropriate based on the type of the value and the type it
            is converting to. The following lists explains the order that the checks 
            are made in.
            <list type="">
            <item>String to Boolean - Used when we are converting from a string to a boolean. Valid values for true are "true", "t", "yes", "1", and "-1", everything else is false.</item>
            <item>TypeConverter - Used when a TypeConverter exists for either the type we are converting to or from that can convert to the other type.</item>
            <item>Parse method - Used when the type we are converting from is a string and the type we are converting to defines a static, parameterless Parse method that returns the type we are converting to.</item>
            <item>Convert method - Used when the type we are converting from defines an instance method called ToXXX where XXX is the name of the type we are converting to with some common aliases allowed (example ToBool or ToInt instead of ToBoolean and ToInt32). The method must return the type we are converting to</item>
            <item>IConvertible - Used when the type we are converting from implements the IConvertible interface.</item>
            </list>
            </para>
            <para>This method makes use of the strategy pattern for determining how to 
            convert values. To define a custom strategy to convert from one type to 
            another, define a class that implements the IConvertStrategy interface and
            register it with the ConvertStrategyMgr class.</para>
            </remarks>
            <exception cref="T:System.InvalidCastException">This conversion is not supported. -or-value is null and conversionType is a value type.</exception>
            <exception cref="T:System.ArgumentNullException">conversionType is null.</exception>
        </member>
        <member name="M:BizArk.Core.ConvertEx.IsEmpty(System.Object)">
            <summary>
            Checks to see if the value is empty. The value is empty if it is null, DBNull, or matches the MinValue, MaxValue, or Empty fields of the values type.
            </summary>
            <param name="value"></param>
            <returns></returns>
        </member>
        <member name="M:BizArk.Core.ConvertEx.RegisterEmptyValue(System.Type,System.Object)">
            <summary>
            Register a value that will be interpreted as an empty value for IsEmpty.
            </summary>
            <param name="type"></param>
            <param name="emptyValue"></param>
        </member>
        <member name="M:BizArk.Core.ConvertEx.RegisterDefaultEmptyValues(System.Type)">
            <summary>
            Registers the default empty values for this type for use in IsEmpty.
            </summary>
            <param name="type"></param>
        </member>
        <member name="M:BizArk.Core.ConvertEx.GetDefaultEmptyValue``1">
            <summary>
            Gets the default value that represents empty for the given type.
            </summary>
            <returns></returns>
        </member>
        <member name="M:BizArk.Core.ConvertEx.GetDefaultEmptyValue(System.Type)">
            <summary>
            Gets the default value that represents empty for the given type.
            </summary>
            <returns></returns>
        </member>
        <member name="M:BizArk.Core.ConvertEx.ResetEmptyValues">
            <summary>
            Removes all the custom default empty values.
            </summary>
        </member>
        <member name="T:BizArk.Core.Convert.ConvertStrategyMgr">
            <summary>
            Manages the strategies that can be used to convert values. Used by ConvertEx.
            </summary>
        </member>
        <member name="M:BizArk.Core.Convert.ConvertStrategyMgr.GetStrategy(System.Type,System.Type)">
            <summary>
            Gets a conversion strategy based on the from and to types.
            </summary>
            <param name="from"></param>
            <param name="to"></param>
            <returns></returns>
        </member>
        <member name="M:BizArk.Core.Convert.ConvertStrategyMgr.RegisterStrategy(BizArk.Core.Convert.Strategies.IConvertStrategy)">
            <summary>
            Register a custom strategy. Custom strategies will be considered before built-in strategies.
            </summary>
            <param name="strategy"></param>
        </member>
        <member name="T:BizArk.Core.Convert.Strategies.ByteArrayImageConversionStrategy">
            <summary>
            Uses the IConvertible interface to convert the value.
            </summary>
        </member>
        <member name="M:BizArk.Core.Convert.Strategies.ByteArrayImageConversionStrategy.Convert(System.Type,System.Type,System.Object,System.IFormatProvider)">
            <summary>
            Changes the type of the value.
            </summary>
            <param name="from"></param>
            <param name="to"></param>
            <param name="value"></param>
            <param name="provider"></param>
            <returns></returns>
        </member>
        <member name="M:BizArk.Core.Convert.Strategies.ByteArrayImageConversionStrategy.CanConvert(System.Type,System.Type)">
            <summary>
            Determines whether this converter can convert the value.
            </summary>
            <param name="from"></param>
            <param name="to"></param>
            <returns></returns>
        </member>
        <member name="T:BizArk.Core.Convert.Strategies.ByteArrayStringConversionStrategy">
            <summary>
            Converts a string to a byte[] (and vice-versa).
            </summary>
        </member>
        <member name="P:BizArk.Core.Convert.Strategies.ByteArrayStringConversionStrategy.Encoding">
            <summary>
            Gets the encoding to use for converting the value.
            </summary>
        </member>
        <member name="M:BizArk.Core.Convert.Strategies.ByteArrayStringConversionStrategy.Convert(System.Type,System.Type,System.Object,System.IFormatProvider)">
            <summary>
            Changes the type of the value.
            </summary>
            <param name="from"></param>
            <param name="to"></param>
            <param name="value"></param>
            <param name="provider"></param>
            <returns></returns>
        </member>
        <member name="M:BizArk.Core.Convert.Strategies.ByteArrayStringConversionStrategy.CanConvert(System.Type,System.Type)">
            <summary>
            Determines whether this converter can convert the value.
            </summary>
            <param name="from"></param>
            <param name="to"></param>
            <returns></returns>
        </member>
        <member name="T:BizArk.Core.Convert.Strategies.ConvertibleConversionStrategy">
            <summary>
            Uses the IConvertible interface to convert the value.
            </summary>
        </member>
        <member name="M:BizArk.Core.Convert.Strategies.ConvertibleConversionStrategy.Convert(System.Type,System.Type,System.Object,System.IFormatProvider)">
            <summary>
            Changes the type of the value.
            </summary>
            <param name="from"></param>
            <param name="to"></param>
            <param name="value"></param>
            <param name="provider"></param>
            <returns></returns>
        </member>
        <member name="M:BizArk.Core.Convert.Strategies.ConvertibleConversionStrategy.CanConvert(System.Type,System.Type)">
            <summary>
            Determines whether this converter can convert the value.
            </summary>
            <param name="from"></param>
            <param name="to"></param>
            <returns></returns>
        </member>
        <member name="M:BizArk.Core.Convert.Strategies.ConvertibleConversionStrategy.GetTrueType(System.Type)">
            <summary>
            Handles nullable types.
            </summary>
            <param name="to"></param>
            <returns></returns>
        </member>
        <member name="M:BizArk.Core.Convert.Strategies.ConvertibleConversionStrategy.CanConvertTo(System.Type)">
            <summary>
            Determines if IConvertible can convert to the given type.
            </summary>
            <param name="to"></param>
            <returns></returns>
        </member>
        <member name="T:BizArk.Core.Convert.Strategies.ConvertMethodConversionStrategy">
            <summary>
            Uses a conversion method to convert the value.
            </summary>
        </member>
        <member name="M:BizArk.Core.Convert.Strategies.ConvertMethodConversionStrategy.Convert(System.Type,System.Type,System.Object,System.IFormatProvider)">
            <summary>
            Changes the type of the value.
            </summary>
            <param name="from"></param>
            <param name="to"></param>
            <param name="value"></param>
            <param name="provider"></param>
            <returns></returns>
        </member>
        <member name="M:BizArk.Core.Convert.Strategies.ConvertMethodConversionStrategy.CanConvert(System.Type,System.Type)">
            <summary>
            Determines whether this converter can convert the value.
            </summary>
            <param name="from"></param>
            <param name="to"></param>
            <returns></returns>
        </member>
        <member name="T:BizArk.Core.Convert.Strategies.CtorConversionStrategy">
            <summary>
            Uses a typed constructor to convert the value.
            </summary>
        </member>
        <member name="M:BizArk.Core.Convert.Strategies.CtorConversionStrategy.Convert(System.Type,System.Type,System.Object,System.IFormatProvider)">
            <summary>
            Changes the type of the value.
            </summary>
            <param name="from"></param>
            <param name="to"></param>
            <param name="value"></param>
            <param name="provider"></param>
            <returns></returns>
        </member>
        <member name="M:BizArk.Core.Convert.Strategies.CtorConversionStrategy.CanConvert(System.Type,System.Type)">
            <summary>
            Determines whether this converter can convert the value.
            </summary>
            <param name="from"></param>
            <param name="to"></param>
            <returns></returns>
        </member>
        <member name="T:BizArk.Core.Convert.Strategies.DefaultValueConversionStrategy">
            <summary>
            Strategy used to return the default value for a type;
            </summary>
        </member>
        <member name="M:BizArk.Core.Convert.Strategies.DefaultValueConversionStrategy.Convert(System.Type,System.Type,System.Object,System.IFormatProvider)">
            <summary>
            Changes the type of the value.
            </summary>
            <param name="from"></param>
            <param name="to"></param>
            <param name="value"></param>
            <param name="provider"></param>
            <returns></returns>
        </member>
        <member name="M:BizArk.Core.Convert.Strategies.DefaultValueConversionStrategy.CanConvert(System.Type,System.Type)">
            <summary>
            Determines whether this converter can convert the value.
            </summary>
            <param name="from"></param>
            <param name="to"></param>
            <returns></returns>
        </member>
        <member name="T:BizArk.Core.Convert.Strategies.EnumConversionStrategy">
            <summary>
            Converts to enumeration values.
            </summary>
        </member>
        <member name="M:BizArk.Core.Convert.Strategies.EnumConversionStrategy.Convert(System.Type,System.Type,System.Object,System.IFormatProvider)">
            <summary>
            Changes the type of the value.
            </summary>
            <param name="from"></param>
            <param name="to"></param>
            <param name="value"></param>
            <param name="provider"></param>
            <returns></returns>
        </member>
        <member name="M:BizArk.Core.Convert.Strategies.EnumConversionStrategy.CanConvert(System.Type,System.Type)">
            <summary>
            Determines whether this converter can convert the value.
            </summary>
            <param name="from"></param>
            <param name="to"></param>
            <returns></returns>
        </member>
        <member name="T:BizArk.Core.Convert.Strategies.IConvertStrategy">
            <summary>
            Interface for defining conversion strategies. Used in ConvertEx. Each strategy object should be used to convert from exactly one type to another.
            </summary>
        </member>
        <member name="M:BizArk.Core.Convert.Strategies.IConvertStrategy.Convert(System.Type,System.Type,System.Object,System.IFormatProvider)">
            <summary>
            Changes the type of the value.
            </summary>
            <param name="from"></param>
            <param name="to"></param>
            <param name="value"></param>
            <param name="provider"></param>
            <returns></returns>
        </member>
        <member name="M:BizArk.Core.Convert.Strategies.IConvertStrategy.CanConvert(System.Type,System.Type)">
            <summary>
            Determines whether this converter can convert the value.
            </summary>
            <param name="from"></param>
            <param name="to"></param>
            <returns></returns>
        </member>
        <member name="T:BizArk.Core.Convert.Strategies.NoConvertConversionStrategy">
            <summary>
            Strategy used to do no conversion at all. Just returns the value that was sent in.
            </summary>
        </member>
        <member name="M:BizArk.Core.Convert.Strategies.NoConvertConversionStrategy.Convert(System.Type,System.Type,System.Object,System.IFormatProvider)">
            <summary>
            Changes the type of the value.
            </summary>
            <param name="from"></param>
            <param name="to"></param>
            <param name="value"></param>
            <param name="provider"></param>
            <returns></returns>
        </member>
        <member name="M:BizArk.Core.Convert.Strategies.NoConvertConversionStrategy.CanConvert(System.Type,System.Type)">
            <summary>
            Determines whether this converter can convert the value.
            </summary>
            <param name="from"></param>
            <param name="to"></param>
            <returns></returns>
        </member>
        <member name="T:BizArk.Core.Convert.Strategies.SqlDBTypeConversionStrategy">
            <summary>
            Converts a .Net type to a SqlDBType.
            </summary>
        </member>
        <member name="M:BizArk.Core.Convert.Strategies.SqlDBTypeConversionStrategy.Convert(System.Type,System.Type,System.Object,System.IFormatProvider)">
            <summary>
            Changes the type of the value.
            </summary>
            <param name="from"></param>
            <param name="to"></param>
            <param name="value"></param>
            <param name="provider"></param>
            <returns></returns>
        </member>
        <member name="M:BizArk.Core.Convert.Strategies.SqlDBTypeConversionStrategy.CanConvert(System.Type,System.Type)">
            <summary>
            Determines whether this converter can convert the value.
            </summary>
            <param name="from"></param>
            <param name="to"></param>
            <returns></returns>
        </member>
        <member name="T:BizArk.Core.Convert.Strategies.DbTypeMap">
            <summary>
            Map between different datatypes.
            </summary>
        </member>
        <member name="M:BizArk.Core.Convert.Strategies.DbTypeMap.ToNetType(System.Data.SqlDbType)">
            <summary>
            Converts the value.
            </summary>
            <param name="type"></param>
            <returns></returns>
        </member>
        <member name="M:BizArk.Core.Convert.Strategies.DbTypeMap.ToNetType(System.Data.DbType)">
            <summary>
            Converts the value.
            </summary>
            <param name="type"></param>
            <returns></returns>
        </member>
        <member name="M:BizArk.Core.Convert.Strategies.DbTypeMap.ToDbType(System.Data.SqlDbType)">
            <summary>
            Converts the value.
            </summary>
            <param name="type"></param>
            <returns></returns>
        </member>
        <member name="M:BizArk.Core.Convert.Strategies.DbTypeMap.ToDbType(System.Type)">
            <summary>
            Converts the value.
            </summary>
            <param name="type"></param>
            <returns></returns>
        </member>
        <member name="M:BizArk.Core.Convert.Strategies.DbTypeMap.ToSqlDbType(System.Data.DbType)">
            <summary>
            Converts the value.
            </summary>
            <param name="type"></param>
            <returns></returns>
        </member>
        <member name="M:BizArk.Core.Convert.Strategies.DbTypeMap.ToSqlDbType(System.Type)">
            <summary>
            Converts the value.
            </summary>
            <param name="type"></param>
            <returns></returns>
        </member>
        <member name="M:BizArk.Core.Convert.Strategies.DbTypeMap.CanConvertType(System.Type)">
            <summary>
            Determines if the .Net type can be converted to a SqlDbType/DbType or not.
            </summary>
            <param name="type"></param>
            <returns></returns>
        </member>
        <member name="T:BizArk.Core.Convert.Strategies.DbTypeMap.DbTypeMapEntry">
            <summary>
            Represents a map entry for conversion.
            </summary>
        </member>
        <member name="M:BizArk.Core.Convert.Strategies.DbTypeMap.DbTypeMapEntry.#ctor(System.Type,System.Data.DbType,System.Data.SqlDbType)">
            <summary>
            Creates an instance of DbTypeMapEntry.
            </summary>
            <param name="type"></param>
            <param name="dbType"></param>
            <param name="sqlDbType"></param>
        </member>
        <member name="P:BizArk.Core.Convert.Strategies.DbTypeMap.DbTypeMapEntry.Type">
            <summary>
            Gets the .Net type.
            </summary>
        </member>
        <member name="P:BizArk.Core.Convert.Strategies.DbTypeMap.DbTypeMapEntry.DbType">
            <summary>
            Gets the DbType.
            </summary>
        </member>
        <member name="P:BizArk.Core.Convert.Strategies.DbTypeMap.DbTypeMapEntry.SqlDbType">
            <summary>
            Gets the SqlDbType.
            </summary>
        </member>
        <member name="T:BizArk.Core.Convert.Strategies.StaticMethodConversionStrategy">
            <summary>
            Uses a typed constructor to convert the value.
            </summary>
        </member>
        <member name="M:BizArk.Core.Convert.Strategies.StaticMethodConversionStrategy.Convert(System.Type,System.Type,System.Object,System.IFormatProvider)">
            <summary>
            Changes the type of the value.
            </summary>
            <param name="from"></param>
            <param name="to"></param>
            <param name="value"></param>
            <param name="provider"></param>
            <returns></returns>
        </member>
        <member name="M:BizArk.Core.Convert.Strategies.StaticMethodConversionStrategy.CanConvert(System.Type,System.Type)">
            <summary>
            Determines whether this converter can convert the value.
            </summary>
            <param name="from"></param>
            <param name="to"></param>
            <returns></returns>
        </member>
        <member name="T:BizArk.Core.Convert.Strategies.StringToBoolConversionStrategy">
            <summary>
            Converts from a string to a bool.
            </summary>
        </member>
        <member name="P:BizArk.Core.Convert.Strategies.StringToBoolConversionStrategy.TrueValues">
            <summary>
            Gets the list of values that will equate to True. Everything else is false.
            </summary>
        </member>
        <member name="M:BizArk.Core.Convert.Strategies.StringToBoolConversionStrategy.Convert(System.Type,System.Type,System.Object,System.IFormatProvider)">
            <summary>
            Changes the type of the value.
            </summary>
            <param name="from"></param>
            <param name="to"></param>
            <param name="value"></param>
            <param name="provider"></param>
            <returns></returns>
        </member>
        <member name="M:BizArk.Core.Convert.Strategies.StringToBoolConversionStrategy.CanConvert(System.Type,System.Type)">
            <summary>
            Determines whether this converter can convert the value.
            </summary>
            <param name="from"></param>
            <param name="to"></param>
            <returns></returns>
        </member>
        <member name="T:BizArk.Core.Convert.Strategies.TypeConverterConversionStrategy">
            <summary>
            Uses a TypeConverter to perform a conversion.
            </summary>
        </member>
        <member name="M:BizArk.Core.Convert.Strategies.TypeConverterConversionStrategy.Convert(System.Type,System.Type,System.Object,System.IFormatProvider)">
            <summary>
            Changes the type of the value.
            </summary>
            <param name="from"></param>
            <param name="to"></param>
            <param name="value"></param>
            <param name="provider"></param>
            <returns></returns>
        </member>
        <member name="M:BizArk.Core.Convert.Strategies.TypeConverterConversionStrategy.CanConvert(System.Type,System.Type)">
            <summary>
            Determines whether this converter can convert the value.
            </summary>
            <param name="from"></param>
            <param name="to"></param>
            <returns></returns>
        </member>
        <member name="T:BizArk.Core.ArrayExt.ArrayExt">
            <summary>
            Provides extension methods for string arrays.
            </summary>
        </member>
        <member name="M:BizArk.Core.ArrayExt.ArrayExt.Shrink(System.Array,System.Int32,System.Int32)">
            <summary>
            Creates a new array with just the specified elements.
            </summary>
            <param name="arr"></param>
            <param name="startIndex"></param>
            <param name="endIndex"></param>
            <returns></returns>
        </member>
        <member name="M:BizArk.Core.ArrayExt.ArrayExt.Shrink(System.String[],System.Int32)">
            <summary>
            Creates a new array with just the specified elements.
            </summary>
            <param name="arr"></param>
            <param name="startIndex"></param>
            <returns></returns>
        </member>
        <member name="M:BizArk.Core.ArrayExt.ArrayExt.Shrink(System.String[],System.Int32,System.Int32)">
            <summary>
            Creates a new array with just the specified elements.
            </summary>
            <param name="arr"></param>
            <param name="startIndex"></param>
            <param name="endIndex"></param>
            <returns></returns>
        </member>
        <member name="M:BizArk.Core.ArrayExt.ArrayExt.Shrink(System.Int32[],System.Int32)">
            <summary>
            Creates a new array with just the specified elements.
            </summary>
            <param name="arr"></param>
            <param name="startIndex"></param>
            <returns></returns>
        </member>
        <member name="M:BizArk.Core.ArrayExt.ArrayExt.Shrink(System.Int32[],System.Int32,System.Int32)">
            <summary>
            Creates a new array with just the specified elements.
            </summary>
            <param name="arr"></param>
            <param name="startIndex"></param>
            <param name="endIndex"></param>
            <returns></returns>
        </member>
        <member name="M:BizArk.Core.ArrayExt.ArrayExt.Convert``1(System.Array)">
            <summary>
            Converts the array to a different type.
            </summary>
            <typeparam name="T"></typeparam>
            <param name="arr"></param>
            <returns></returns>
        </member>
        <member name="M:BizArk.Core.ArrayExt.ArrayExt.Convert(System.Array,System.Type)">
            <summary>
            Converts the array to a different type.
            </summary>
            <param name="arr"></param>
            <param name="elementType"></param>
            <returns></returns>
        </member>
        <member name="M:BizArk.Core.ArrayExt.ArrayExt.RemoveEmpties(System.String[])">
            <summary>
            Creates a new array that contains the non-empty elements of the given array.
            </summary>
            <param name="arr"></param>
            <returns></returns>
        </member>
        <member name="M:BizArk.Core.ArrayExt.ArrayExt.RemoveEmpties(System.Array)">
            <summary>
            Creates a new array that contains the non-empty elements of the given array.
            </summary>
            <param name="arr"></param>
            <returns></returns>
        </member>
        <member name="M:BizArk.Core.ArrayExt.ArrayExt.Split(System.String,System.Char,System.Boolean)">
            <summary>
            Splits a string on the given char and if trim is true, removes leading and trailing whitespace characters from each element.
            </summary>
            <param name="str">The string to split.</param>
            <param name="separator">The char used to split the string.</param>
            <param name="trim">If true, removes leading and trailing whitespace characters from each element.</param>
            <returns></returns>
        </member>
        <member name="M:BizArk.Core.ArrayExt.ArrayExt.Split``1(System.String,System.Char)">
            <summary>
            Splits a string on the given char and if trim is true, removes leading and trailing whitespace characters from each element.
            </summary>
            <param name="str">The string to split.</param>
            <param name="separator">The char used to split the string.</param>
            <returns></returns>
        </member>
        <member name="M:BizArk.Core.ArrayExt.ArrayExt.Split(System.String,System.Char,System.Boolean,System.Boolean)">
            <summary>
            Splits a string on the given char and if trim is true, removes leading and trailing whitespace characters from each element.
            </summary>
            <param name="str">The string to split.</param>
            <param name="separator">The char used to split the string.</param>
            <param name="trim">If true, removes leading and trailing whitespace characters from each element.</param>
            <param name="removeEmpties">Removes empty elements from the string.</param>
            <returns></returns>
        </member>
        <member name="M:BizArk.Core.ArrayExt.ArrayExt.Split``1(System.String,System.Char,System.Boolean)">
            <summary>
            Splits a string on the given char and if trim is true, removes leading and trailing whitespace characters from each element.
            </summary>
            <param name="str">The string to split.</param>
            <param name="separator">The char used to split the string.</param>
            <param name="removeEmpties">Removes empty elements from the string.</param>
            <returns></returns>
        </member>
        <member name="M:BizArk.Core.ArrayExt.ArrayExt.Join(System.Array,System.String)">
            <summary>
            Joins the elements of an array together as a string using the given separator.
            </summary>
            <param name="arr"></param>
            <param name="separator"></param>
            <returns></returns>
        </member>
        <member name="M:BizArk.Core.ArrayExt.ArrayExt.Append``1(``0[],``0[])">
            <summary>
            Concatenates the two arrays together and returns a new array.
            </summary>
            <typeparam name="T"></typeparam>
            <param name="arr"></param>
            <param name="arr2"></param>
            <returns></returns>
        </member>
        <member name="M:BizArk.Core.ArrayExt.ArrayExt.Append``1(``0[],``0)">
            <summary>
            Adds the value to the end of the array and returns the new array.
            </summary>
            <typeparam name="T"></typeparam>
            <param name="arr"></param>
            <param name="value"></param>
            <returns></returns>
        </member>
        <member name="M:BizArk.Core.ArrayExt.ArrayExt.IndexOf(System.Array,System.Object)">
            <summary>
            Searches for the specified object and returns the index of the first occurrence
            within the entire one-dimensional System.Array.
            </summary>
            <param name="arr">The one-dimensional System.Array to search.</param>
            <param name="val">The object to locate in array.</param>
            <returns>
            The index of the first occurrence of value within the entire array, if found;
            otherwise, the lower bound of the array minus 1.
            </returns>
            <exception cref="T:System.ArgumentNullException">arr is null</exception>
            <exception cref="T:System.RankException">arr is multidimensional.</exception>
        </member>
        <member name="M:BizArk.Core.ArrayExt.ArrayExt.Contains(System.Array,System.Object)">
            <summary>
            Determines if the array contains the given value.
            </summary>
            <param name="arr">The one-dimensional System.Array to search.</param>
            <param name="val">The object to locate in array.</param>
            <returns>
            </returns>
            <exception cref="T:System.ArgumentNullException">arr is null</exception>
            <exception cref="T:System.RankException">arr is multidimensional.</exception>
        </member>
        <member name="M:BizArk.Core.ArrayExt.ArrayExt.Copy(System.Array)">
            <summary>
            Copies the array to a new array of the same type.
            </summary>
            <param name="arr"></param>
            <returns></returns>
        </member>
        <member name="T:BizArk.Core.DefaultBoolean">
            <summary>
            Provides a tri-state boolean to allow something else to determine the value.
            </summary>
        </member>
        <member name="F:BizArk.Core.DefaultBoolean.Default">
            <summary>Parent object determines value.</summary>
        </member>
        <member name="F:BizArk.Core.DefaultBoolean.True">
            <summary>True</summary>
        </member>
        <member name="F:BizArk.Core.DefaultBoolean.False">
            <summary>False</summary>
        </member>
        <member name="T:BizArk.Core.Properties.Resources">
            <summary>
              A strongly-typed resource class, for looking up localized strings, etc.
            </summary>
        </member>
        <member name="P:BizArk.Core.Properties.Resources.ResourceManager">
            <summary>
              Returns the cached ResourceManager instance used by this class.
            </summary>
        </member>
        <member name="P:BizArk.Core.Properties.Resources.Culture">
            <summary>
              Overrides the current thread's CurrentUICulture property for all
              resource lookups using this strongly typed resource class.
            </summary>
        </member>
        <member name="P:BizArk.Core.Properties.Resources.Mime_Types">
             <summary>
               Looks up a localized string similar to # This file maps Internet media types to unique file extension(s).
            # Although created for httpd, this file is used by many software systems
            # and has been placed in the public domain for unlimited redisribution.
            #
            # The table below contains both registered and (common) unregistered types.
            # A type that has no unique extension can be ignored -- they are listed
            # here to guide configurations toward known types and to make it easier to
            # identify &quot;new&quot; types.  File extensions are also commonly used to indicate [rest of string was truncated]&quot;;.
             </summary>
        </member>
        <member name="T:BizArk.Core.Template.StringTemplate">
            <summary>
            Provides a way to format a string using named parameters instead of positional parameters.
            </summary>
        </member>
        <member name="M:BizArk.Core.Template.StringTemplate.#ctor(System.String)">
            <summary>
            Creates an instance of StringTemplate.
            </summary>
            <param name="template"></param>
        </member>
        <member name="P:BizArk.Core.Template.StringTemplate.Item(System.String)">
            <summary>
            Gets or sets the named argument. Ignores invalid arguments.
            </summary>
            <param name="name"></param>
            <returns></returns>
        </member>
        <member name="P:BizArk.Core.Template.StringTemplate.Template">
            <summary>
            Gets the template string.
            </summary>
        </member>
        <member name="P:BizArk.Core.Template.StringTemplate.ArgValues">
            <summary>
            Gets the values for the arguments.
            </summary>
        </member>
        <member name="P:BizArk.Core.Template.StringTemplate.ArgNames">
            <summary>
            Gets the names for the arguments.
            </summary>
        </member>
        <member name="M:BizArk.Core.Template.StringTemplate.ToString">
            <summary>
            Returns the formatted string.
            </summary>
            <returns></returns>
        </member>
        <member name="M:BizArk.Core.Template.StringTemplate.ToString(System.Object)">
            <summary>
            Returns the formatted string based on the values in the object.
            </summary>
            <param name="values"></param>
            <returns></returns>
        </member>
        <member name="M:BizArk.Core.Template.StringTemplate.Format(System.String,System.Object)">
            <summary>
            Format a string template with the given values.
            </summary>
            <param name="template"></param>
            <param name="values"></param>
            <returns></returns>
        </member>
        <member name="M:BizArk.Core.Template.StringTemplate.CreateFormat">
            <summary>
            Called from Format property to parse the template and create a format string.
            </summary>
        </member>
        <member name="T:BizArk.Core.AttributeExt.AttributeExt">
            <summary>
            Provides extension methods for PropertyDescriptor.
            </summary>
        </member>
        <member name="M:BizArk.Core.AttributeExt.AttributeExt.GetAttribute``1(System.ComponentModel.PropertyDescriptor)">
            <summary>
            Gets the specified attribute from the PropertyDescriptor.
            </summary>
            <typeparam name="T"></typeparam>
            <param name="prop"></param>
            <returns></returns>
        </member>
        <member name="M:BizArk.Core.AttributeExt.AttributeExt.GetAttribute``1(System.Reflection.PropertyInfo,System.Boolean)">
            <summary>
            Gets the specified attribute from the PropertyDescriptor.
            </summary>
            <typeparam name="T"></typeparam>
            <param name="prop"></param>
            <param name="inherit"></param>
            <returns></returns>
        </member>
        <member name="M:BizArk.Core.AttributeExt.AttributeExt.GetAttribute``1(System.Type,System.Boolean)">
            <summary>
            Gets the specified attribute from the type.
            </summary>
            <typeparam name="T"></typeparam>
            <param name="type"></param>
            <param name="inherit"></param>
            <returns></returns>
        </member>
        <member name="M:BizArk.Core.AttributeExt.AttributeExt.GetAttribute``1(System.Reflection.Assembly)">
            <summary>
            Gets the specified attribute for the assembly.
            </summary>
            <typeparam name="T"></typeparam>
            <param name="asm"></param>
            <returns></returns>
        </member>
        <member name="M:BizArk.Core.AttributeExt.AttributeExt.GetAttribute``1(System.Object,System.Boolean)">
            <summary>
            Gets the specified attribute from the PropertyDescriptor.
            </summary>
            <typeparam name="T"></typeparam>
            <param name="obj"></param>
            <param name="inherit"></param>
            <returns></returns>
        </member>
        <member name="M:BizArk.Core.AttributeExt.AttributeExt.GetAttribute``1(System.Enum)">
            <summary>
            Gets the specified attribute from the Enum.
            </summary>
            <typeparam name="T"></typeparam>
            <param name="val"></param>
            <returns></returns>
        </member>
        <member name="M:BizArk.Core.AttributeExt.AttributeExt.GetDescription(System.Enum)">
            <summary>
            Gets the value from the DescriptionAttribute for the given enumeration value.
            </summary>
            <param name="e"></param>
            <returns></returns>
        </member>
        <member name="T:BizArk.Core.ExceptionExt.ExceptionExt">
            <summary>
            Extensions for classes within the Drawing namespace.
            </summary>
        </member>
        <member name="M:BizArk.Core.ExceptionExt.ExceptionExt.GetDetails(System.Exception)">
            <summary>
            Gets the details of an exception suitable for display.
            </summary>
            <param name="ex"></param>
            <returns></returns>
        </member>
        <member name="T:BizArk.Core.FormatExt.FormatExt">
            <summary>
            Provides extension methods to format values.
            </summary>
        </member>
        <member name="M:BizArk.Core.FormatExt.FormatExt.Fmt(System.String,System.Object[])">
            <summary>
            Formats a string.
            </summary>
            <param name="format"></param>
            <param name="args"></param>
            <returns></returns>
        </member>
        <member name="M:BizArk.Core.FormatExt.FormatExt.Fmt(System.Int16)">
            <summary>
            Formats a numeric value.
            </summary>
            <param name="val"></param>
            <returns></returns>
        </member>
        <member name="M:BizArk.Core.FormatExt.FormatExt.Fmt(System.Nullable{System.Int16})">
            <summary>
            Formats a numeric value.
            </summary>
            <param name="val"></param>
            <returns></returns>
        </member>
        <member name="M:BizArk.Core.FormatExt.FormatExt.Fmt(System.Int32)">
            <summary>
            Formats a numeric value.
            </summary>
            <param name="val"></param>
            <returns></returns>
        </member>
        <member name="M:BizArk.Core.FormatExt.FormatExt.Fmt(System.Nullable{System.Int32})">
            <summary>
            Formats a numeric value.
            </summary>
            <param name="val"></param>
            <returns></returns>
        </member>
        <member name="M:BizArk.Core.FormatExt.FormatExt.Fmt(System.Int64)">
            <summary>
            Formats a numeric value.
            </summary>
            <param name="val"></param>
            <returns></returns>
        </member>
        <member name="M:BizArk.Core.FormatExt.FormatExt.Fmt(System.Nullable{System.Int64})">
            <summary>
            Formats a numeric value.
            </summary>
            <param name="val"></param>
            <returns></returns>
        </member>
        <member name="M:BizArk.Core.FormatExt.FormatExt.Fmt(System.Decimal,System.Int32)">
            <summary>
            Formats a numeric value.
            </summary>
            <param name="val"></param>
            <param name="precision">Number of decimal places to show. If less than 0, uses the current cultures default.</param>
            <returns></returns>
        </member>
        <member name="M:BizArk.Core.FormatExt.FormatExt.Fmt(System.Nullable{System.Decimal},System.Int32)">
            <summary>
            Formats a numeric value.
            </summary>
            <param name="val"></param>
            <param name="precision">Number of decimal places to show. If less than 0, uses the current cultures default.</param>
            <returns></returns>
        </member>
        <member name="M:BizArk.Core.FormatExt.FormatExt.Fmt(System.Single,System.Int32)">
            <summary>
            Formats a numeric value.
            </summary>
            <param name="val"></param>
            <param name="precision">Number of decimal places to show. If less than 0, uses the current cultures default.</param>
            <returns></returns>
        </member>
        <member name="M:BizArk.Core.FormatExt.FormatExt.Fmt(System.Nullable{System.Single},System.Int32)">
            <summary>
            Formats a numeric value.
            </summary>
            <param name="val"></param>
            <param name="precision">Number of decimal places to show. If less than 0, uses the current cultures default.</param>
            <returns></returns>
        </member>
        <member name="M:BizArk.Core.FormatExt.FormatExt.Fmt(System.Double,System.Int32)">
            <summary>
            Formats a numeric value.
            </summary>
            <param name="val"></param>
            <param name="precision">Number of decimal places to show. If less than 0, uses the current cultures default.</param>
            <returns></returns>
        </member>
        <member name="M:BizArk.Core.FormatExt.FormatExt.Fmt(System.Nullable{System.Double},System.Int32)">
            <summary>
            Formats a numeric value.
            </summary>
            <param name="val"></param>
            <param name="precision">Number of decimal places to show. If less than 0, uses the current cultures default.</param>
            <returns></returns>
        </member>
        <member name="M:BizArk.Core.FormatExt.FormatExt.FmtCurrency(System.Decimal,System.Int32)">
            <summary>
            Formats a currency value.
            </summary>
            <param name="val"></param>
            <param name="precision">Number of decimal places to show. If less than 0, uses the current cultures default.</param>
            <returns></returns>
        </member>
        <member name="M:BizArk.Core.FormatExt.FormatExt.FmtCurrency(System.Nullable{System.Decimal},System.Int32)">
            <summary>
            Formats a currency value.
            </summary>
            <param name="val"></param>
            <param name="precision">Number of decimal places to show. If less than 0, uses the current cultures default.</param>
            <returns></returns>
        </member>
        <member name="M:BizArk.Core.FormatExt.FormatExt.Tmpl(System.String,System.Object)">
            <summary>
            Uses a StringTemplate to replace the values in the string.
            </summary>
            <param name="template"></param>
            <param name="values"></param>
            <returns></returns>
        </member>
        <member name="T:BizArk.Core.Util.MimeMap">
            <summary>
            Provides a lookup service to get the MimeType based on a file extension. The default data comes from the Mime.Types file that is embedded in this project and the registry.
            </summary>
        </member>
        <member name="M:BizArk.Core.Util.MimeMap.InitializeFromRegistry">
            <summary>
            Initializes the mime map from the registry.
            </summary>
        </member>
        <member name="M:BizArk.Core.Util.MimeMap.Initialize(System.String)">
            <summary>
            Initializes the mime map from the string.
            </summary>
            <param name="mimeTypes">List of mime types. Uses the format in Apache Mime.Types format. View at http://svn.apache.org/viewvc/httpd/httpd/trunk/docs/conf/mime.types?view=markup.</param>
        </member>
        <member name="M:BizArk.Core.Util.MimeMap.RegisterMimeType(System.String,System.String[])">
            <summary>
            Register a mime type.
            </summary>
            <param name="mimeType">The mime type. Ex: text/plain.</param>
            <param name="extensions">List of extensions for this mime type</param>
        </member>
        <member name="M:BizArk.Core.Util.MimeMap.GetMimeType(System.String)">
            <summary>
            Gets the mime type based on the extension.
            </summary>
            <param name="ext"></param>
            <returns></returns>
        </member>
        <member name="T:BizArk.Core.Util.PropertyUtil">
            <summary>
            Provides methods that are useful when working with properties.
            </summary>
        </member>
        <member name="M:BizArk.Core.Util.PropertyUtil.GetName``1(System.Linq.Expressions.Expression{System.Func{``0,System.Object}})">
            <summary>
            Gets the name of the property based on a Linq expression.
            </summary>
            <typeparam name="TObject"></typeparam>
            <param name="propertyRefExpr"></param>
            <returns></returns>
        </member>
        <member name="M:BizArk.Core.Util.PropertyUtil.GetNameCore(System.Linq.Expressions.Expression)">
            <summary>
            Gets the name of the property in the expression.
            </summary>
            <param name="propertyRefExpr"></param>
            <returns></returns>
        </member>
        <member name="T:BizArk.Core.ObjectExt.ObjectExt">
            <summary>
            Extends the Object class.
            </summary>
        </member>
        <member name="M:BizArk.Core.ObjectExt.ObjectExt.Convert``1(System.Object)">
            <summary>
            Converts the value to the specified type. 
            Checks for a TypeConverter, conversion methods, 
            and the IConvertible interface. Uses <see cref="M:BizArk.Core.ConvertEx.ChangeType(System.Object,System.Type,System.IFormatProvider)"/>.
            </summary>
            <typeparam name="T">The type to convert to.</typeparam>
            <param name="obj">The value to convert from.</param>
            <returns></returns>
            <exception cref="T:System.InvalidCastException">This conversion is not supported. -or-value is null and conversionType is a value type.</exception>
            <exception cref="T:System.ArgumentNullException">conversionType is null.</exception>
        </member>
        <member name="M:BizArk.Core.ObjectExt.ObjectExt.GetValue(System.Object,System.String)">
            <summary>
            Gets the value for the given property name. This works for any object that uses CustomTypeDescriptor.
            </summary>
            <param name="obj"></param>
            <param name="propertyName"></param>
            <returns></returns>
        </member>
        <member name="M:BizArk.Core.ObjectExt.ObjectExt.GetValue``1(System.Object,System.String)">
            <summary>
            Gets the value for the given property name. This works for any object that uses CustomTypeDescriptor.
            </summary>
            <param name="obj"></param>
            <param name="propertyName"></param>
            <returns></returns>
        </member>
        <member name="M:BizArk.Core.ObjectExt.ObjectExt.GetInt(System.Object,System.String)">
            <summary>
            Gets the value for the given property name. This works for any object that uses CustomTypeDescriptor.
            </summary>
            <param name="obj"></param>
            <param name="propertyName"></param>
            <returns></returns>
        </member>
        <member name="M:BizArk.Core.ObjectExt.ObjectExt.Getint(System.Object,System.String)">
            <summary>
            Gets the value for the given property name. This works for any object that uses CustomTypeDescriptor.
            </summary>
            <param name="obj"></param>
            <param name="propertyName"></param>
            <returns></returns>
        </member>
        <member name="M:BizArk.Core.ObjectExt.ObjectExt.GetString(System.Object,System.String)">
            <summary>
            Gets the value for the given property name. This works for any object that uses CustomTypeDescriptor.
            </summary>
            <param name="obj"></param>
            <param name="propertyName"></param>
            <returns></returns>
        </member>
        <member name="M:BizArk.Core.ObjectExt.ObjectExt.GetBoolean(System.Object,System.String)">
            <summary>
            Gets the value for the given property name. This works for any object that uses CustomTypeDescriptor.
            </summary>
            <param name="obj"></param>
            <param name="propertyName"></param>
            <returns></returns>
        </member>
        <member name="M:BizArk.Core.ObjectExt.ObjectExt.GetDecimal(System.Object,System.String)">
            <summary>
            Gets the value for the given property name. This works for any object that uses CustomTypeDescriptor.
            </summary>
            <param name="obj"></param>
            <param name="propertyName"></param>
            <returns></returns>
        </member>
        <member name="M:BizArk.Core.ObjectExt.ObjectExt.GetPropertyName``1(``0,System.Linq.Expressions.Expression{System.Func{``0,System.Object}})">
            <summary>
            Gets the name of the property based on a Linq expression.
            </summary>
            <typeparam name="TObject"></typeparam>
            <param name="type"></param>
            <param name="propertyRefExpr"></param>
            <returns></returns>
        </member>
        <member name="M:BizArk.Core.ObjectExt.ObjectExt.Validate(System.Object)">
            <summary>
            Uses DataAnnotations to validate the properties of the object.
            </summary>
            <param name="obj"></param>
        </member>
        <member name="T:BizArk.Core.StringExt.StringExt">
            <summary>
            Provides extension methods for strings.
            </summary>
        </member>
        <member name="M:BizArk.Core.StringExt.StringExt.Wrap(System.String,System.Int32)">
            <summary>
            Forces the string to word wrap so that each line doesn't exceed the maxLineLength.
            </summary>
            <param name="str">The string to wrap.</param>
            <param name="maxLength">The maximum number of characters per line.</param>
            <returns></returns>
        </member>
        <member name="M:BizArk.Core.StringExt.StringExt.Wrap(System.String,System.Int32,System.String)">
            <summary>
            Forces the string to word wrap so that each line doesn't exceed the maxLineLength.
            </summary>
            <param name="str">The string to wrap.</param>
            <param name="maxLength">The maximum number of characters per line.</param>
            <param name="prefix">Adds this string to the beginning of each line.</param>
            <returns></returns>
        </member>
        <member name="M:BizArk.Core.StringExt.StringExt.Lines(System.String)">
            <summary>
            Splits the string into lines.
            </summary>
            <param name="str"></param>
            <returns></returns>
        </member>
        <member name="M:BizArk.Core.StringExt.StringExt.Words(System.String)">
            <summary>
            Splits the string into words (all white space is removed).
            </summary>
            <param name="str"></param>
            <returns></returns>
        </member>
        <member name="M:BizArk.Core.StringExt.StringExt.IsEmpty(System.String)">
            <summary>
            Shortcut for ConvertEx.IsEmpty. Works because this is an extension method, not a real method.
            </summary>
            <param name="str"></param>
            <returns></returns>
        </member>
        <member name="M:BizArk.Core.StringExt.StringExt.HasValue(System.String)">
            <summary>
            Shortcut for !ConvertEx.IsEmpty. Works because this is an extension method, not a real method.
            </summary>
            <param name="str"></param>
            <returns></returns>
        </member>
        <member name="M:BizArk.Core.StringExt.StringExt.Max(System.String,System.Int32)">
            <summary>
            Gets the string up to the maximum number of characters.
            </summary>
            <param name="str"></param>
            <param name="max"></param>
            <returns></returns>
        </member>
        <member name="M:BizArk.Core.StringExt.StringExt.Split``1(System.String,System.Char[])">
            <summary>
            Returns an array split along the separator.
            </summary>
            <typeparam name="T"></typeparam>
            <param name="str"></param>
            <param name="separator"></param>
            <returns></returns>
        </member>
        <member name="M:BizArk.Core.StringExt.StringExt.Max(System.String,System.Int32,System.Boolean)">
            <summary>
            Gets the string up to the maximum number of characters. If ellipses is true and the string is longer than the max, the last 3 chars will be ellipses.
            </summary>
            <param name="str"></param>
            <param name="max"></param>
            <param name="ellipses"></param>
            <returns></returns>
        </member>
        <member name="M:BizArk.Core.StringExt.StringExt.IsAscii(System.String)">
            <summary>
            Determines if a string consists of all valid ASCII values.
            </summary>
            <param name="str"></param>
            <returns></returns>
        </member>
        <member name="M:BizArk.Core.StringExt.StringExt.Right(System.String,System.Int32)">
            <summary>
            Gets the right side of the string.
            </summary>
            <param name="str"></param>
            <param name="length"></param>
            <returns></returns>
        </member>
        <member name="M:BizArk.Core.StringExt.StringExt.Left(System.String,System.Int32)">
            <summary>
            Truncates the string.
            </summary>
            <param name="str"></param>
            <param name="length"></param>
            <returns></returns>
        </member>
        <member name="M:BizArk.Core.StringExt.StringExt.Format(System.String,System.Object[])">
            <summary>
            Shortcut for string.Format.
            </summary>
            <param name="str"></param>
            <param name="args"></param>
            <returns></returns>
        </member>
        <member name="M:BizArk.Core.StringExt.StringExt.IfEmpty(System.String,System.String)">
            <summary>
            If the string is empty, returns the default.
            </summary>
            <param name="str"></param>
            <param name="dflt"></param>
            <returns></returns>
        </member>
        <member name="F:BizArk.Core.StringExt.StringExt.Vowels">
            <summary>
            Vowels. Used for IsVowel.
            </summary>
        </member>
        <member name="M:BizArk.Core.StringExt.StringExt.IsVowel(System.Char)">
            <summary>
            Determines if the character is a vowel.
            </summary>
            <param name="ch"></param>
            <returns></returns>
        </member>
        <member name="T:BizArk.Core.TypeExt.TypeExt">
            <summary>
            Provides extension methods for Type.
            </summary>
        </member>
        <member name="M:BizArk.Core.TypeExt.TypeExt.Implements(System.Type,System.Type)">
            <summary>
            Determines if the type implements the given interface.
            </summary>
            <param name="type"></param>
            <param name="interfaceType"></param>
            <returns></returns>
        </member>
        <member name="M:BizArk.Core.TypeExt.TypeExt.IsDerivedFrom(System.Type,System.Type)">
            <summary>
            Determines if the type is derived from the given base type.
            </summary>
            <param name="type"></param>
            <param name="baseType"></param>
            <returns></returns>
        </member>
        <member name="M:BizArk.Core.TypeExt.TypeExt.IsDerivedFromGenericType(System.Type,System.Type)">
            <summary>
            Determines if the type is an instance of a generic type.
            </summary>
            <param name="type"></param>
            <param name="genericType"></param>
            <returns></returns>
        </member>
        <member name="M:BizArk.Core.TypeExt.TypeExt.IsNullable(System.Type)">
            <summary>
            Gets a value that determines if the type allows instances with a null value.
            </summary>
            <param name="type"></param>
            <returns></returns>
        </member>
        <member name="M:BizArk.Core.TypeExt.TypeExt.GetCSharpName(System.Type)">
            <summary>
            Gets the C# name of the type.
            </summary>
            <param name="type"></param>
            <returns></returns>
        </member>
        <member name="M:BizArk.Core.TypeExt.TypeExt.IsNumericType(System.Type)">
            <summary>
            Determines if the type corresponds to one of the built in numeric types (such as int, double, etc).
            </summary>
            <param name="type"></param>
            <returns></returns>
        </member>
        <member name="M:BizArk.Core.TypeExt.TypeExt.GetTrueType(System.Type)">
            <summary>
            Gets the underlying type if the type is Nullable, otherwise just returns the type.
            </summary>
            <param name="type"></param>
            <returns></returns>
        </member>
    </members>
</doc>
